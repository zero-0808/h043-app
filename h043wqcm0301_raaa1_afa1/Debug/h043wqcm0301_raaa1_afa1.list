
h043wqcm0301_raaa1_afa1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014550  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080147f0  080147f0  000247f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ab4  08014ab4  00024ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014abc  08014abc  00024abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014ac0  08014ac0  00024ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000000  08014ac4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005988  20000120  08014be4  00030120  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005aa8  08014be4  00035aa8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 10 .debug_info   00075d67  00000000  00000000  0003014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000be8f  00000000  00000000  000a5eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002f00  00000000  00000000  000b1d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002ad8  00000000  00000000  000b4c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00047315  00000000  00000000  000b7720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049adb  00000000  00000000  000fea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187420  00000000  00000000  00148510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002cf930  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c438  00000000  00000000  002cf984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000120 	.word	0x20000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080147d8 	.word	0x080147d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000124 	.word	0x20000124
 80002dc:	080147d8 	.word	0x080147d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005de:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <MX_DMA2D_Init+0x7c>)
 80005e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DMA2D_Init+0x78>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DMA2D_Init+0x78>)
 8000602:	2200      	movs	r2, #0
 8000604:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DMA2D_Init+0x78>)
 8000608:	2202      	movs	r2, #2
 800060a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DMA2D_Init+0x78>)
 800060e:	2200      	movs	r2, #0
 8000610:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 255;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DMA2D_Init+0x78>)
 8000614:	22ff      	movs	r2, #255	; 0xff
 8000616:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DMA2D_Init+0x78>)
 800061a:	2200      	movs	r2, #0
 800061c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DMA2D_Init+0x78>)
 8000620:	2200      	movs	r2, #0
 8000622:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DMA2D_Init+0x78>)
 8000626:	2200      	movs	r2, #0
 8000628:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_DMA2D_Init+0x78>)
 800062c:	f002 f98c 	bl	8002948 <HAL_DMA2D_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000636:	f001 f8e1 	bl	80017fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800063a:	2101      	movs	r1, #1
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DMA2D_Init+0x78>)
 800063e:	f002 faf7 	bl	8002c30 <HAL_DMA2D_ConfigLayer>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DMA2D_Init+0x74>
  {
    Error_Handler();
 8000648:	f001 f8d8 	bl	80017fc <Error_Handler>
  }

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20004a6c 	.word	0x20004a6c
 8000654:	52001000 	.word	0x52001000

08000658 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_DMA2D_MspInit+0x48>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d116      	bne.n	8000698 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_DMA2D_MspInit+0x4c>)
 800066c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <HAL_DMA2D_MspInit+0x4c>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_DMA2D_MspInit+0x4c>)
 800067c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 14, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	210e      	movs	r1, #14
 800068c:	205a      	movs	r0, #90	; 0x5a
 800068e:	f001 fe73 	bl	8002378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000692:	205a      	movs	r0, #90	; 0x5a
 8000694:	f001 fe8a 	bl	80023ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	52001000 	.word	0x52001000
 80006a4:	58024400 	.word	0x58024400

080006a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b090      	sub	sp, #64	; 0x40
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80006ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80006dc:	4b44      	ldr	r3, [pc, #272]	; (80007f0 <MX_FMC_Init+0x148>)
 80006de:	4a45      	ldr	r2, [pc, #276]	; (80007f4 <MX_FMC_Init+0x14c>)
 80006e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <MX_FMC_Init+0x148>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_DISABLE;
 80006ea:	4b41      	ldr	r3, [pc, #260]	; (80007f0 <MX_FMC_Init+0x148>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80006f0:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <MX_FMC_Init+0x148>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80006f6:	4b3e      	ldr	r3, [pc, #248]	; (80007f0 <MX_FMC_Init+0x148>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80006fc:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <MX_FMC_Init+0x148>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <MX_FMC_Init+0x148>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000708:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <MX_FMC_Init+0x148>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 800070e:	4b38      	ldr	r3, [pc, #224]	; (80007f0 <MX_FMC_Init+0x148>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <MX_FMC_Init+0x148>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <MX_FMC_Init+0x148>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8000720:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_FMC_Init+0x148>)
 8000722:	2200      	movs	r2, #0
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <MX_FMC_Init+0x148>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 800072c:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <MX_FMC_Init+0x148>)
 800072e:	2200      	movs	r2, #0
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <MX_FMC_Init+0x148>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800073a:	23fc      	movs	r3, #252	; 0xfc
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 800073e:	23fc      	movs	r3, #252	; 0xfc
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000742:	23fc      	movs	r3, #252	; 0xfc
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 8000746:	23fc      	movs	r3, #252	; 0xfc
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800074a:	23fc      	movs	r3, #252	; 0xfc
 800074c:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 800074e:	23fc      	movs	r3, #252	; 0xfc
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000752:	23fc      	movs	r3, #252	; 0xfc
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 8000756:	23fc      	movs	r3, #252	; 0xfc
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800075a:	f107 0220 	add.w	r2, r7, #32
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	4619      	mov	r1, r3
 8000764:	4822      	ldr	r0, [pc, #136]	; (80007f0 <MX_FMC_Init+0x148>)
 8000766:	f005 fff7 	bl	8006758 <HAL_NAND_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_FMC_Init+0xcc>
  {
    Error_Handler( );
 8000770:	f001 f844 	bl	80017fc <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_FMC_Init+0x150>)
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_FMC_Init+0x154>)
 8000778:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_FMC_Init+0x150>)
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_FMC_Init+0x150>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_FMC_Init+0x150>)
 8000788:	2208      	movs	r2, #8
 800078a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_FMC_Init+0x150>)
 800078e:	2210      	movs	r2, #16
 8000790:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_FMC_Init+0x150>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_FMC_Init+0x150>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_FMC_Init+0x150>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_FMC_Init+0x150>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_FMC_Init+0x150>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_FMC_Init+0x150>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80007b6:	2310      	movs	r3, #16
 80007b8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80007ba:	2310      	movs	r3, #16
 80007bc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80007be:	2310      	movs	r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80007c2:	2310      	movs	r3, #16
 80007c4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80007c6:	2310      	movs	r3, #16
 80007c8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80007ca:	2310      	movs	r3, #16
 80007cc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80007ce:	2310      	movs	r3, #16
 80007d0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_FMC_Init+0x150>)
 80007d8:	f008 fdd4 	bl	8009384 <HAL_SDRAM_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_FMC_Init+0x13e>
  {
    Error_Handler( );
 80007e2:	f001 f80b 	bl	80017fc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007e6:	bf00      	nop
 80007e8:	3740      	adds	r7, #64	; 0x40
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20004ad4 	.word	0x20004ad4
 80007f4:	52004080 	.word	0x52004080
 80007f8:	20004b14 	.word	0x20004b14
 80007fc:	52004140 	.word	0x52004140

08000800 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000814:	4b43      	ldr	r3, [pc, #268]	; (8000924 <HAL_FMC_MspInit+0x124>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d17e      	bne.n	800091a <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800081c:	4b41      	ldr	r3, [pc, #260]	; (8000924 <HAL_FMC_MspInit+0x124>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000822:	4b41      	ldr	r3, [pc, #260]	; (8000928 <HAL_FMC_MspInit+0x128>)
 8000824:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000828:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <HAL_FMC_MspInit+0x128>)
 800082a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <HAL_FMC_MspInit+0x128>)
 8000834:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
 8000840:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000844:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4834      	ldr	r0, [pc, #208]	; (800092c <HAL_FMC_MspInit+0x12c>)
 800085c:	f002 fa9c 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_5
 8000860:	f248 3337 	movw	r3, #33591	; 0x8337
 8000864:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000872:	230c      	movs	r3, #12
 8000874:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	482d      	ldr	r0, [pc, #180]	; (8000930 <HAL_FMC_MspInit+0x130>)
 800087c:	f002 fa8c 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_4
 8000880:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000884:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4826      	ldr	r0, [pc, #152]	; (8000934 <HAL_FMC_MspInit+0x134>)
 800089c:	f002 fa7c 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 80008a0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b2:	230c      	movs	r3, #12
 80008b4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	481f      	ldr	r0, [pc, #124]	; (8000938 <HAL_FMC_MspInit+0x138>)
 80008bc:	f002 fa6c 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c0:	2301      	movs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4818      	ldr	r0, [pc, #96]	; (800093c <HAL_FMC_MspInit+0x13c>)
 80008da:	f002 fa5d 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <HAL_FMC_MspInit+0x140>)
 80008f8:	f002 fa4e 	bl	8002d98 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80008fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <HAL_FMC_MspInit+0x134>)
 8000914:	f002 fa40 	bl	8002d98 <HAL_GPIO_Init>
 8000918:	e000      	b.n	800091c <HAL_FMC_MspInit+0x11c>
    return;
 800091a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000013c 	.word	0x2000013c
 8000928:	58024400 	.word	0x58024400
 800092c:	58021000 	.word	0x58021000
 8000930:	58021800 	.word	0x58021800
 8000934:	58020c00 	.word	0x58020c00
 8000938:	58021400 	.word	0x58021400
 800093c:	58020800 	.word	0x58020800
 8000940:	58021c00 	.word	0x58021c00

08000944 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 800094c:	f7ff ff58 	bl	8000800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000960:	f7ff ff4e 	bl	8000800 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <MX_FREERTOS_Init+0x18>)
 8000972:	2100      	movs	r1, #0
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_FREERTOS_Init+0x1c>)
 8000976:	f010 f8f3 	bl	8010b60 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <MX_FREERTOS_Init+0x20>)
 800097e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08014834 	.word	0x08014834
 8000988:	08000991 	.word	0x08000991
 800098c:	20004b48 	.word	0x20004b48

08000990 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000998:	f013 fad8 	bl	8013f4c <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800099c:	2001      	movs	r0, #1
 800099e:	f010 f985 	bl	8010cac <osDelay>
 80009a2:	e7fb      	b.n	800099c <StartDefaultTask+0xc>

080009a4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ba:	4bbf      	ldr	r3, [pc, #764]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	4abd      	ldr	r2, [pc, #756]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ca:	4bbb      	ldr	r3, [pc, #748]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	f003 0310 	and.w	r3, r3, #16
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d8:	4bb7      	ldr	r3, [pc, #732]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	4ab6      	ldr	r2, [pc, #728]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e8:	4bb3      	ldr	r3, [pc, #716]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	4bb0      	ldr	r3, [pc, #704]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	4aae      	ldr	r2, [pc, #696]	; (8000cb8 <MX_GPIO_Init+0x314>)
 80009fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a06:	4bac      	ldr	r3, [pc, #688]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4ba8      	ldr	r3, [pc, #672]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1a:	4aa7      	ldr	r2, [pc, #668]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a24:	4ba4      	ldr	r3, [pc, #656]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4ba1      	ldr	r3, [pc, #644]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a9f      	ldr	r2, [pc, #636]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b9d      	ldr	r3, [pc, #628]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b99      	ldr	r3, [pc, #612]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a98      	ldr	r2, [pc, #608]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b95      	ldr	r3, [pc, #596]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6e:	4b92      	ldr	r3, [pc, #584]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b8e      	ldr	r3, [pc, #568]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8c:	4b8a      	ldr	r3, [pc, #552]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a89      	ldr	r2, [pc, #548]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b86      	ldr	r3, [pc, #536]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aaa:	4b83      	ldr	r3, [pc, #524]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a81      	ldr	r2, [pc, #516]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b7f      	ldr	r3, [pc, #508]	; (8000cb8 <MX_GPIO_Init+0x314>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2108      	movs	r1, #8
 8000acc:	487b      	ldr	r0, [pc, #492]	; (8000cbc <MX_GPIO_Init+0x318>)
 8000ace:	f002 fb13 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad8:	4879      	ldr	r0, [pc, #484]	; (8000cc0 <MX_GPIO_Init+0x31c>)
 8000ada:	f002 fb0d 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_EN_GPIO_Port, BL_EN_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4878      	ldr	r0, [pc, #480]	; (8000cc4 <MX_GPIO_Init+0x320>)
 8000ae4:	f002 fb08 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2170      	movs	r1, #112	; 0x70
 8000aec:	4873      	ldr	r0, [pc, #460]	; (8000cbc <MX_GPIO_Init+0x318>)
 8000aee:	f002 fb03 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CTP_RST0_Pin|TFT_ENT_Pin|TFT_DISP_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f241 0148 	movw	r1, #4168	; 0x1048
 8000af8:	4873      	ldr	r0, [pc, #460]	; (8000cc8 <MX_GPIO_Init+0x324>)
 8000afa:	f002 fafd 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b04:	4870      	ldr	r0, [pc, #448]	; (8000cc8 <MX_GPIO_Init+0x324>)
 8000b06:	f002 faf7 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	486f      	ldr	r0, [pc, #444]	; (8000ccc <MX_GPIO_Init+0x328>)
 8000b10:	f002 faf2 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(beep_GPIO_Port, beep_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	486d      	ldr	r0, [pc, #436]	; (8000cd0 <MX_GPIO_Init+0x32c>)
 8000b1a:	f002 faed 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4861      	ldr	r0, [pc, #388]	; (8000cbc <MX_GPIO_Init+0x318>)
 8000b36:	f002 f92f 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	485b      	ldr	r0, [pc, #364]	; (8000cc0 <MX_GPIO_Init+0x31c>)
 8000b54:	f002 f920 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_EN_Pin;
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b64:	2302      	movs	r3, #2
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BL_EN_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4855      	ldr	r0, [pc, #340]	; (8000cc4 <MX_GPIO_Init+0x320>)
 8000b70:	f002 f912 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b74:	2370      	movs	r3, #112	; 0x70
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b80:	2302      	movs	r3, #2
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	484c      	ldr	r0, [pc, #304]	; (8000cbc <MX_GPIO_Init+0x318>)
 8000b8c:	f002 f904 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(O_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	484b      	ldr	r0, [pc, #300]	; (8000cd4 <MX_GPIO_Init+0x330>)
 8000ba6:	f002 f8f7 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NAND_RB_Pin;
 8000baa:	2340      	movs	r3, #64	; 0x40
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <MX_GPIO_Init+0x334>)
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NAND_RB_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4841      	ldr	r0, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x320>)
 8000bbe:	f002 f8eb 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CTP_RST0_Pin|TFT_ENT_Pin|TFT_DISP_Pin;
 8000bc2:	f241 0348 	movw	r3, #4168	; 0x1048
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	483b      	ldr	r0, [pc, #236]	; (8000cc8 <MX_GPIO_Init+0x324>)
 8000bdc:	f002 f8dc 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000be0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4833      	ldr	r0, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0x324>)
 8000bfa:	f002 f8cd 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OD3_Pin|OD2_Pin;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <MX_GPIO_Init+0x320>)
 8000c12:	f002 f8c1 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c16:	2308      	movs	r3, #8
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4827      	ldr	r0, [pc, #156]	; (8000ccc <MX_GPIO_Init+0x328>)
 8000c2e:	f002 f8b3 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = beep_Pin;
 8000c32:	2340      	movs	r3, #64	; 0x40
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(beep_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <MX_GPIO_Init+0x32c>)
 8000c4a:	f002 f8a5 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CT_Pin;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_GPIO_Init+0x334>)
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CT_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0x31c>)
 8000c62:	f002 f899 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GS_INT1_Pin;
 8000c66:	2301      	movs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_GPIO_Init+0x334>)
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GS_INT1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_GPIO_Init+0x330>)
 8000c7a:	f002 f88d 	bl	8002d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	2006      	movs	r0, #6
 8000c84:	f001 fb78 	bl	8002378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c88:	2006      	movs	r0, #6
 8000c8a:	f001 fb8f 	bl	80023ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	210f      	movs	r1, #15
 8000c92:	2009      	movs	r0, #9
 8000c94:	f001 fb70 	bl	8002378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000c98:	2009      	movs	r0, #9
 8000c9a:	f001 fb87 	bl	80023ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	2017      	movs	r0, #23
 8000ca4:	f001 fb68 	bl	8002378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca8:	2017      	movs	r0, #23
 8000caa:	f001 fb7f 	bl	80023ac <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3738      	adds	r7, #56	; 0x38
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	58024400 	.word	0x58024400
 8000cbc:	58021000 	.word	0x58021000
 8000cc0:	58021800 	.word	0x58021800
 8000cc4:	58020c00 	.word	0x58020c00
 8000cc8:	58020000 	.word	0x58020000
 8000ccc:	58021c00 	.word	0x58021c00
 8000cd0:	58020800 	.word	0x58020800
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	11210000 	.word	0x11210000

08000cdc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
extern SemaphoreHandle_t  lis3dh_sem;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
	BaseType_t temp;

	if(GPIO_Pin == GPIO_PIN_3)
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d108      	bne.n	8000cfe <HAL_GPIO_EXTI_Callback+0x22>
//		LCD_Ft5x06_Int_Hdl();
//		#else
//		LCD_ns2009_Int_Hdl();
//		#endif

		xSemaphoreGiveFromISR(tp_dev.tp_press, &temp);
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	f107 020c 	add.w	r2, r7, #12
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f010 fd34 	bl	8011764 <xQueueGiveFromISR>
	}
	else if(GPIO_Pin == GPIO_PIN_6)
	{
		nandwaitrbdown();
	}
}
 8000cfc:	e01f      	b.n	8000d3e <HAL_GPIO_EXTI_Callback+0x62>
	else if(GPIO_Pin == GPIO_PIN_0)
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d117      	bne.n	8000d34 <HAL_GPIO_EXTI_Callback+0x58>
		if(lis3dh_sem != NULL)
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x70>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d018      	beq.n	8000d3e <HAL_GPIO_EXTI_Callback+0x62>
			xSemaphoreGiveFromISR(lis3dh_sem, &temp);
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_GPIO_EXTI_Callback+0x70>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f107 020c 	add.w	r2, r7, #12
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f010 fd24 	bl	8011764 <xQueueGiveFromISR>
			portYIELD_FROM_ISR(temp);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_EXTI_Callback+0x62>
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	f3bf 8f6f 	isb	sy
}
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_EXTI_Callback+0x62>
	else if(GPIO_Pin == GPIO_PIN_6)
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2b40      	cmp	r3, #64	; 0x40
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_EXTI_Callback+0x62>
		nandwaitrbdown();
 8000d3a:	f00b ff79 	bl	800cc30 <nandwaitrbdown>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000074 	.word	0x20000074
 8000d4c:	20004f18 	.word	0x20004f18
 8000d50:	e000ed04 	.word	0xe000ed04

08000d54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_I2C1_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_I2C1_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d90:	f003 fed8 	bl	8004b44 <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d9a:	f000 fd2f 	bl	80017fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000da2:	f004 fa41 	bl	8005228 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fd26 	bl	80017fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000db4:	f004 fa83 	bl	80052be <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fd1d 	bl	80017fc <Error_Handler>
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20004b98 	.word	0x20004b98
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	307075b1 	.word	0x307075b1

08000dd4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <MX_I2C2_Init+0x78>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <MX_I2C2_Init+0x7c>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000de4:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000e10:	f003 fe98 	bl	8004b44 <HAL_I2C_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e1a:	f000 fcef 	bl	80017fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000e22:	f004 fa01 	bl	8005228 <HAL_I2CEx_ConfigAnalogFilter>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f000 fce6 	bl	80017fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_I2C2_Init+0x74>)
 8000e34:	f004 fa43 	bl	80052be <HAL_I2CEx_ConfigDigitalFilter>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fcdd 	bl	80017fc <Error_Handler>
  }

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20004be4 	.word	0x20004be4
 8000e4c:	40005800 	.word	0x40005800
 8000e50:	307075b1 	.word	0x307075b1

08000e54 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_I2C3_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <MX_I2C3_Init+0x7c>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000e90:	f003 fe58 	bl	8004b44 <HAL_I2C_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e9a:	f000 fcaf 	bl	80017fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000ea2:	f004 f9c1 	bl	8005228 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000eac:	f000 fca6 	bl	80017fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_I2C3_Init+0x74>)
 8000eb4:	f004 fa03 	bl	80052be <HAL_I2CEx_ConfigDigitalFilter>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 fc9d 	bl	80017fc <Error_Handler>
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20004b4c 	.word	0x20004b4c
 8000ecc:	40005c00 	.word	0x40005c00
 8000ed0:	307075b1 	.word	0x307075b1

08000ed4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a5f      	ldr	r2, [pc, #380]	; (8001070 <HAL_I2C_MspInit+0x19c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12f      	bne.n	8000f56 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a5d      	ldr	r2, [pc, #372]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b5b      	ldr	r3, [pc, #364]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LIS_IIC_Pin|LIS_IICB7_Pin;
 8000f14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1a:	2312      	movs	r3, #18
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f26:	2304      	movs	r3, #4
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4851      	ldr	r0, [pc, #324]	; (8001078 <HAL_I2C_MspInit+0x1a4>)
 8000f32:	f001 ff31 	bl	8002d98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f36:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f46:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f54:	e087      	b.n	8001066 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_I2C_MspInit+0x1a8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d12e      	bne.n	8000fbe <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f60:	4b44      	ldr	r3, [pc, #272]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TCP_Pin|TCPH5_Pin;
 8000f7e:	2330      	movs	r3, #48	; 0x30
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f82:	2312      	movs	r3, #18
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4839      	ldr	r0, [pc, #228]	; (8001080 <HAL_I2C_MspInit+0x1ac>)
 8000f9a:	f001 fefd 	bl	8002d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa4:	4a33      	ldr	r2, [pc, #204]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000faa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fae:	4b31      	ldr	r3, [pc, #196]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
}
 8000fbc:	e053      	b.n	8001066 <HAL_I2C_MspInit+0x192>
  else if(i2cHandle->Instance==I2C3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a30      	ldr	r2, [pc, #192]	; (8001084 <HAL_I2C_MspInit+0x1b0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d14e      	bne.n	8001066 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a29      	ldr	r2, [pc, #164]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encryption_Pin;
 8001004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100e:	2301      	movs	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001016:	2304      	movs	r3, #4
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(Encryption_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <HAL_I2C_MspInit+0x1b4>)
 8001022:	f001 feb9 	bl	8002d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EncryptionA8_Pin;
 8001026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001038:	2304      	movs	r3, #4
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(EncryptionA8_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4812      	ldr	r0, [pc, #72]	; (800108c <HAL_I2C_MspInit+0x1b8>)
 8001044:	f001 fea8 	bl	8002d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 800104a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 8001050:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001054:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_I2C_MspInit+0x1a0>)
 800105a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800105e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005400 	.word	0x40005400
 8001074:	58024400 	.word	0x58024400
 8001078:	58020400 	.word	0x58020400
 800107c:	40005800 	.word	0x40005800
 8001080:	58021c00 	.word	0x58021c00
 8001084:	40005c00 	.word	0x40005c00
 8001088:	58020800 	.word	0x58020800
 800108c:	58020000 	.word	0x58020000

08001090 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  hiwdg1.Instance = IWDG1;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_IWDG1_Init+0x34>)
 8001096:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <MX_IWDG1_Init+0x38>)
 8001098:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_IWDG1_Init+0x34>)
 800109c:	2204      	movs	r2, #4
 800109e:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_IWDG1_Init+0x34>)
 80010a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010a6:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_IWDG1_Init+0x34>)
 80010aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010ae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_IWDG1_Init+0x34>)
 80010b2:	f004 f950 	bl	8005356 <HAL_IWDG_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80010bc:	f000 fb9e 	bl	80017fc <Error_Handler>
  }

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20004c30 	.word	0x20004c30
 80010c8:	58004800 	.word	0x58004800

080010cc <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

  hjpeg.Instance = JPEG;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_JPEG_Init+0x20>)
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <MX_JPEG_Init+0x24>)
 80010d4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_JPEG_Init+0x20>)
 80010d8:	f004 f984 	bl	80053e4 <HAL_JPEG_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 80010e2:	f000 fb8b 	bl	80017fc <Error_Handler>
  }

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20004c40 	.word	0x20004c40
 80010f0:	52003000 	.word	0x52003000

080010f4 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_JPEG_MspInit+0x3c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10e      	bne.n	8001124 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_JPEG_MspInit+0x40>)
 8001108:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_JPEG_MspInit+0x40>)
 800110e:	f043 0320 	orr.w	r3, r3, #32
 8001112:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_JPEG_MspInit+0x40>)
 8001118:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	52003000 	.word	0x52003000
 8001134:	58024400 	.word	0x58024400

08001138 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2234      	movs	r2, #52	; 0x34
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f013 fa77 	bl	8014638 <memset>

  hltdc.Instance = LTDC;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <MX_LTDC_Init+0xfc>)
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <MX_LTDC_Init+0x100>)
 800114e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_LTDC_Init+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_LTDC_Init+0xfc>)
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001170:	2209      	movs	r2, #9
 8001172:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001176:	222a      	movs	r2, #42	; 0x2a
 8001178:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_LTDC_Init+0xfc>)
 800117c:	220b      	movs	r2, #11
 800117e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001182:	f240 220a 	movw	r2, #522	; 0x20a
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_LTDC_Init+0xfc>)
 800118a:	f240 121b 	movw	r2, #283	; 0x11b
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 524;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_LTDC_Init+0xfc>)
 8001192:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_LTDC_Init+0xfc>)
 800119a:	f240 121d 	movw	r2, #285	; 0x11d
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_LTDC_Init+0xfc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_LTDC_Init+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_LTDC_Init+0xfc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011b8:	481e      	ldr	r0, [pc, #120]	; (8001234 <MX_LTDC_Init+0xfc>)
 80011ba:	f004 fed7 	bl	8005f6c <HAL_LTDC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80011c4:	f000 fb1a 	bl	80017fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80011cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011d0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80011d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011da:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011dc:	2302      	movs	r3, #2
 80011de:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011ee:	2305      	movs	r3, #5
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80011f2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80011f8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80011fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_LTDC_Init+0xfc>)
 800121e:	f005 f837 	bl	8006290 <HAL_LTDC_ConfigLayer>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001228:	f000 fae8 	bl	80017fc <Error_Handler>
  }

}
 800122c:	bf00      	nop
 800122e:	3738      	adds	r7, #56	; 0x38
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20004c98 	.word	0x20004c98
 8001238:	50001000 	.word	0x50001000

0800123c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_LTDC_MspInit+0x15c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 8097 	bne.w	800138e <HAL_LTDC_MspInit+0x152>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001266:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800127e:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a45      	ldr	r2, [pc, #276]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_LTDC_MspInit+0x160>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800129c:	4b3f      	ldr	r3, [pc, #252]	; (800139c <HAL_LTDC_MspInit+0x160>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	4a3e      	ldr	r2, [pc, #248]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012de:	4a2f      	ldr	r2, [pc, #188]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_LTDC_MspInit+0x160>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> LTDC_DE
    PH11     ------> LTDC_R5
    PH10     ------> LTDC_R4
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_7|GPIO_PIN_6;
 80012f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001308:	230e      	movs	r3, #14
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4823      	ldr	r0, [pc, #140]	; (80013a0 <HAL_LTDC_MspInit+0x164>)
 8001314:	f001 fd40 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_2
 8001318:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800131c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_10
                          |GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800132a:	230e      	movs	r3, #14
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	481b      	ldr	r0, [pc, #108]	; (80013a4 <HAL_LTDC_MspInit+0x168>)
 8001336:	f001 fd2f 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_12
 800133a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800133e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800134c:	230e      	movs	r3, #14
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4814      	ldr	r0, [pc, #80]	; (80013a8 <HAL_LTDC_MspInit+0x16c>)
 8001358:	f001 fd1e 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800136e:	230e      	movs	r3, #14
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <HAL_LTDC_MspInit+0x170>)
 800137a:	f001 fd0d 	bl	8002d98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 15, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	210f      	movs	r1, #15
 8001382:	2058      	movs	r0, #88	; 0x58
 8001384:	f000 fff8 	bl	8002378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001388:	2058      	movs	r0, #88	; 0x58
 800138a:	f001 f80f 	bl	80023ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800138e:	bf00      	nop
 8001390:	3730      	adds	r7, #48	; 0x30
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	50001000 	.word	0x50001000
 800139c:	58024400 	.word	0x58024400
 80013a0:	58021800 	.word	0x58021800
 80013a4:	58022000 	.word	0x58022000
 80013a8:	58021c00 	.word	0x58021c00
 80013ac:	58021400 	.word	0x58021400

080013b0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013b4:	f3bf 8f4f 	dsb	sy
}
 80013b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ba:	f3bf 8f6f 	isb	sy
}
 80013be:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013c0:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <SCB_EnableICache+0x48>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013c8:	f3bf 8f4f 	dsb	sy
}
 80013cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ce:	f3bf 8f6f 	isb	sy
}
 80013d2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SCB_EnableICache+0x48>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <SCB_EnableICache+0x48>)
 80013da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013e0:	f3bf 8f4f 	dsb	sy
}
 80013e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013e6:	f3bf 8f6f 	isb	sy
}
 80013ea:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <SCB_EnableDCache+0x84>)
 8001404:	2200      	movs	r2, #0
 8001406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800140a:	f3bf 8f4f 	dsb	sy
}
 800140e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <SCB_EnableDCache+0x84>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001416:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	0b5b      	lsrs	r3, r3, #13
 800141c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001420:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800142a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	015a      	lsls	r2, r3, #5
 8001430:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001434:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800143a:	4911      	ldr	r1, [pc, #68]	; (8001480 <SCB_EnableDCache+0x84>)
 800143c:	4313      	orrs	r3, r2
 800143e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	60ba      	str	r2, [r7, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ef      	bne.n	800142c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	60fa      	str	r2, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1e5      	bne.n	8001422 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001456:	f3bf 8f4f 	dsb	sy
}
 800145a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <SCB_EnableDCache+0x84>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <SCB_EnableDCache+0x84>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001468:	f3bf 8f4f 	dsb	sy
}
 800146c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001488:	f000 f928 	bl	80016dc <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800148c:	f7ff ff90 	bl	80013b0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001490:	f7ff ffb4 	bl	80013fc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 fe2c 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 f824 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f7ff fa82 	bl	80009a4 <MX_GPIO_Init>
  MX_FMC_Init();
 80014a0:	f7ff f902 	bl	80006a8 <MX_FMC_Init>
  MX_FATFS_Init();
 80014a4:	f00b ff8e 	bl	800d3c4 <MX_FATFS_Init>
  MX_UART5_Init();
 80014a8:	f000 fcac 	bl	8001e04 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80014ac:	f000 fcf6 	bl	8001e9c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80014b0:	f7ff f892 	bl	80005d8 <MX_DMA2D_Init>
  MX_I2C1_Init();
 80014b4:	f7ff fc4e 	bl	8000d54 <MX_I2C1_Init>
  MX_I2C2_Init();
 80014b8:	f7ff fc8c 	bl	8000dd4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80014bc:	f7ff fcca 	bl	8000e54 <MX_I2C3_Init>
  MX_JPEG_Init();
 80014c0:	f7ff fe04 	bl	80010cc <MX_JPEG_Init>
  MX_LTDC_Init();
 80014c4:	f7ff fe38 	bl	8001138 <MX_LTDC_Init>
  MX_RTC_Init();
 80014c8:	f000 f99e 	bl	8001808 <MX_RTC_Init>
  MX_TIM3_Init();
 80014cc:	f000 fbc6 	bl	8001c5c <MX_TIM3_Init>
  MX_IWDG1_Init();
 80014d0:	f7ff fdde 	bl	8001090 <MX_IWDG1_Init>
  //usart_init(g_project->baudrate);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014d4:	f00f fada 	bl	8010a8c <osKernelInitialize>
  MX_FREERTOS_Init();
 80014d8:	f7ff fa48 	bl	800096c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014dc:	f00f fb0a 	bl	8010af4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <main+0x5c>
	...

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0cc      	sub	sp, #304	; 0x130
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014ee:	224c      	movs	r2, #76	; 0x4c
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f013 f8a0 	bl	8014638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014fc:	2220      	movs	r2, #32
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f013 f899 	bl	8014638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	23bc      	movs	r3, #188	; 0xbc
 800150e:	461a      	mov	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f013 f891 	bl	8014638 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001516:	2002      	movs	r0, #2
 8001518:	f005 f968 	bl	80067ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <SystemClock_Config+0x1e8>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a69      	ldr	r2, [pc, #420]	; (80016cc <SystemClock_Config+0x1e8>)
 8001528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <SystemClock_Config+0x1e8>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <SystemClock_Config+0x1ec>)
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	4a64      	ldr	r2, [pc, #400]	; (80016d0 <SystemClock_Config+0x1ec>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001546:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <SystemClock_Config+0x1ec>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	f003 0201 	and.w	r2, r3, #1
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001556:	bf00      	nop
 8001558:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <SystemClock_Config+0x1e8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001564:	d1f8      	bne.n	8001558 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001566:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <SystemClock_Config+0x1f0>)
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	4a59      	ldr	r2, [pc, #356]	; (80016d4 <SystemClock_Config+0x1f0>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001576:	2309      	movs	r3, #9
 8001578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001596:	2305      	movs	r3, #5
 8001598:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 800159c:	23c0      	movs	r3, #192	; 0xc0
 800159e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80015a8:	2314      	movs	r3, #20
 80015aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80015b4:	2308      	movs	r3, #8
 80015b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f958 	bl	8006880 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015d6:	f000 f911 	bl	80017fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	233f      	movs	r3, #63	; 0x3f
 80015dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80015ec:	2308      	movs	r3, #8
 80015ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015f2:	2340      	movs	r3, #64	; 0x40
 80015f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015f8:	2340      	movs	r3, #64	; 0x40
 80015fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800160c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001610:	2104      	movs	r1, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fd44 	bl	80070a0 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x13e>
  {
    Error_Handler();
 800161e:	f000 f8ed 	bl	80017fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LTDC
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <SystemClock_Config+0x1f4>)
 8001628:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2220      	movs	r2, #32
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	22c0      	movs	r2, #192	; 0xc0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2202      	movs	r2, #2
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2202      	movs	r2, #2
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2202      	movs	r2, #2
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800167e:	f107 0308 	add.w	r3, r7, #8
 8001682:	2200      	movs	r2, #0
 8001684:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2200      	movs	r2, #0
 800168c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 f8c5 	bl	800783c <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x1d8>
  {
    Error_Handler();
 80016b8:	f000 f8a0 	bl	80017fc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80016bc:	f005 f8d0 	bl	8006860 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80016c0:	bf00      	nop
 80016c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	58024800 	.word	0x58024800
 80016d0:	58000400 	.word	0x58000400
 80016d4:	58024400 	.word	0x58024400
 80016d8:	2144000b 	.word	0x2144000b

080016dc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80016ee:	f000 fe6b 	bl	80023c8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80016fa:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80016fe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001700:	2312      	movs	r3, #18
 8001702:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001704:	2300      	movs	r3, #0
 8001706:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001708:	2300      	movs	r3, #0
 800170a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800170c:	2300      	movs	r3, #0
 800170e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fe88 	bl	8002438 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001728:	2301      	movs	r3, #1
 800172a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800172c:	2301      	movs	r3, #1
 800172e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001730:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001734:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001736:	2307      	movs	r3, #7
 8001738:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800173a:	2300      	movs	r3, #0
 800173c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800173e:	2300      	movs	r3, #0
 8001740:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001742:	2300      	movs	r3, #0
 8001744:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001756:	463b      	mov	r3, r7
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fe6d 	bl	8002438 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800175e:	2301      	movs	r3, #1
 8001760:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001762:	2302      	movs	r3, #2
 8001764:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x80000000;
 8001766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800176a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800176c:	231b      	movs	r3, #27
 800176e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001770:	2300      	movs	r3, #0
 8001772:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001774:	2300      	movs	r3, #0
 8001776:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001778:	2300      	movs	r3, #0
 800177a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001784:	2301      	movs	r3, #1
 8001786:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fe52 	bl	8002438 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001794:	2301      	movs	r3, #1
 8001796:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001798:	2303      	movs	r3, #3
 800179a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 800179c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80017a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80017a2:	2318      	movs	r3, #24
 80017a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80017ae:	2300      	movs	r3, #0
 80017b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017c2:	463b      	mov	r3, r7
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fe37 	bl	8002438 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017ca:	2004      	movs	r0, #4
 80017cc:	f000 fe14 	bl	80023f8 <HAL_MPU_Enable>

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ea:	f000 fcbd 	bl	8002168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40001000 	.word	0x40001000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001822:	4a26      	ldr	r2, [pc, #152]	; (80018bc <MX_RTC_Init+0xb4>)
 8001824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <MX_RTC_Init+0xb0>)
 800182e:	227f      	movs	r2, #127	; 0x7f
 8001830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_RTC_Init+0xb0>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <MX_RTC_Init+0xb0>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001850:	4819      	ldr	r0, [pc, #100]	; (80018b8 <MX_RTC_Init+0xb0>)
 8001852:	f007 fb45 	bl	8008ee0 <HAL_RTC_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800185c:	f7ff ffce 	bl	80017fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 8;
 8001860:	2308      	movs	r3, #8
 8001862:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <MX_RTC_Init+0xb0>)
 800187c:	f007 fba8 	bl	8008fd0 <HAL_RTC_SetTime>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001886:	f7ff ffb9 	bl	80017fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800188a:	2301      	movs	r3, #1
 800188c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800188e:	2301      	movs	r3, #1
 8001890:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_RTC_Init+0xb0>)
 80018a2:	f007 fc33 	bl	800910c <HAL_RTC_SetDate>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80018ac:	f7ff ffa6 	bl	80017fc <Error_Handler>
  }

}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20004d40 	.word	0x20004d40
 80018bc:	58004000 	.word	0x58004000

080018c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_RTC_MspInit+0x2c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <HAL_RTC_MspInit+0x30>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <HAL_RTC_MspInit+0x30>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	58004000 	.word	0x58004000
 80018f0:	58024400 	.word	0x58024400

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_MspInit+0x38>)
 80018fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_MspInit+0x38>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_MspInit+0x38>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	210f      	movs	r1, #15
 800191c:	f06f 0001 	mvn.w	r0, #1
 8001920:	f000 fd2a 	bl	8002378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400

08001930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b090      	sub	sp, #64	; 0x40
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	d827      	bhi.n	800198e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800193e:	2200      	movs	r2, #0
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	2036      	movs	r0, #54	; 0x36
 8001944:	f000 fd18 	bl	8002378 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001948:	2036      	movs	r0, #54	; 0x36
 800194a:	f000 fd2f 	bl	80023ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800194e:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <HAL_InitTick+0xc4>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_InitTick+0xc8>)
 8001956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_InitTick+0xc8>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_InitTick+0xc8>)
 8001966:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001972:	f107 0210 	add.w	r2, r7, #16
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f005 ff1b 	bl	80077b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <HAL_InitTick+0x6a>
 800198c:	e001      	b.n	8001992 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e02b      	b.n	80019ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001992:	f005 fee5 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8001996:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001998:	e004      	b.n	80019a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800199a:	f005 fee1 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800199e:	4603      	mov	r3, r0
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <HAL_InitTick+0xcc>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	3b01      	subs	r3, #1
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_InitTick+0xd0>)
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_InitTick+0xd4>)
 80019b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_InitTick+0xd0>)
 80019ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019c0:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <HAL_InitTick+0xd0>)
 80019c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_InitTick+0xd0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_InitTick+0xd0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019d2:	480b      	ldr	r0, [pc, #44]	; (8001a00 <HAL_InitTick+0xd0>)
 80019d4:	f007 fd12 	bl	80093fc <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d104      	bne.n	80019e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019de:	4808      	ldr	r0, [pc, #32]	; (8001a00 <HAL_InitTick+0xd0>)
 80019e0:	f007 fd64 	bl	80094ac <HAL_TIM_Base_Start_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	e000      	b.n	80019ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3740      	adds	r7, #64	; 0x40
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000008 	.word	0x20000008
 80019f8:	58024400 	.word	0x58024400
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	20004d64 	.word	0x20004d64
 8001a04:	40001000 	.word	0x40001000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f001 fb76 	bl	800312a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a46:	2008      	movs	r0, #8
 8001a48:	f001 fb6f 	bl	800312a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a54:	2040      	movs	r0, #64	; 0x40
 8001a56:	f001 fb68 	bl	800312a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART1_IRQHandler+0x10>)
 8001a66:	f008 fe5f 	bl	800a728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20004e88 	.word	0x20004e88

08001a74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <UART5_IRQHandler+0x10>)
 8001a7a:	f008 fe55 	bl	800a728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20004dfc 	.word	0x20004dfc

08001a88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM6_DAC_IRQHandler+0x10>)
 8001a8e:	f007 fe77 	bl	8009780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20004d64 	.word	0x20004d64

08001a9c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <OTG_HS_IRQHandler+0x10>)
 8001aa2:	f001 fdeb 	bl	800367c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200057d4 	.word	0x200057d4

08001ab0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <LTDC_IRQHandler+0x10>)
 8001ab6:	f004 fb29 	bl	800610c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20004c98 	.word	0x20004c98

08001ac4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA2D_IRQHandler+0x10>)
 8001aca:	f000 ffa1 	bl	8002a10 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20004a6c 	.word	0x20004a6c

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f012 fd4e 	bl	80145a8 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20020000 	.word	0x20020000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000140 	.word	0x20000140
 8001b40:	20005aa8 	.word	0x20005aa8

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <SystemInit+0xec>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <SystemInit+0xec>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <SystemInit+0xf0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b06      	cmp	r3, #6
 8001b62:	d807      	bhi.n	8001b74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <SystemInit+0xf0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 030f 	bic.w	r3, r3, #15
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <SystemInit+0xf0>)
 8001b6e:	f043 0307 	orr.w	r3, r3, #7
 8001b72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <SystemInit+0xf4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <SystemInit+0xf4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <SystemInit+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b86:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <SystemInit+0xf4>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	492b      	ldr	r1, [pc, #172]	; (8001c38 <SystemInit+0xf4>)
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <SystemInit+0xf8>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <SystemInit+0xf0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <SystemInit+0xf0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 030f 	bic.w	r3, r3, #15
 8001ba6:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <SystemInit+0xf0>)
 8001ba8:	f043 0307 	orr.w	r3, r3, #7
 8001bac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <SystemInit+0xf4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bb4:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <SystemInit+0xf4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <SystemInit+0xf4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <SystemInit+0xf4>)
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <SystemInit+0xfc>)
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <SystemInit+0xf4>)
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <SystemInit+0x100>)
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <SystemInit+0xf4>)
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <SystemInit+0x104>)
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <SystemInit+0xf4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <SystemInit+0xf4>)
 8001bda:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <SystemInit+0x104>)
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <SystemInit+0xf4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <SystemInit+0xf4>)
 8001be6:	4a18      	ldr	r2, [pc, #96]	; (8001c48 <SystemInit+0x104>)
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <SystemInit+0xf4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <SystemInit+0xf4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <SystemInit+0xf4>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <SystemInit+0xf4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <SystemInit+0x108>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <SystemInit+0x10c>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0e:	d202      	bcs.n	8001c16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <SystemInit+0x110>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SystemInit+0x114>)
 8001c18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SystemInit+0xec>)
 8001c20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c24:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	52002000 	.word	0x52002000
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c40:	02020200 	.word	0x02020200
 8001c44:	01ff0000 	.word	0x01ff0000
 8001c48:	01010280 	.word	0x01010280
 8001c4c:	5c001000 	.word	0x5c001000
 8001c50:	ffff0000 	.word	0xffff0000
 8001c54:	51008108 	.word	0x51008108
 8001c58:	52004000 	.word	0x52004000

08001c5c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001c90:	4a2d      	ldr	r2, [pc, #180]	; (8001d48 <MX_TIM3_Init+0xec>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb4:	4823      	ldr	r0, [pc, #140]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001cb6:	f007 fba1 	bl	80093fc <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cc0:	f7ff fd9c 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481c      	ldr	r0, [pc, #112]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001cd2:	f007 feeb 	bl	8009aac <HAL_TIM_ConfigClockSource>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cdc:	f7ff fd8e 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001ce2:	f007 fc19 	bl	8009518 <HAL_TIM_OC_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cec:	f7ff fd86 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4811      	ldr	r0, [pc, #68]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001d00:	f008 fc1c 	bl	800a53c <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d0a:	f7ff fd77 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2204      	movs	r2, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001d26:	f007 fe4b 	bl	80099c0 <HAL_TIM_OC_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d30:	f7ff fd64 	bl	80017fc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM3_Init+0xe8>)
 8001d36:	f000 f82b 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3738      	adds	r7, #56	; 0x38
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20004db0 	.word	0x20004db0
 8001d48:	40000400 	.word	0x40000400

08001d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_TIM_Base_MspInit+0x3c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_TIM_Base_MspInit+0x40>)
 8001d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d64:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_TIM_Base_MspInit+0x40>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_TIM_Base_MspInit+0x40>)
 8001d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_TIM_MspPostInit+0x68>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d11e      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_TIM_MspPostInit+0x6c>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_MspPostInit+0x6c>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_TIM_MspPostInit+0x6c>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_TIM_MspPostInit+0x70>)
 8001dec:	f000 ffd4 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58020800 	.word	0x58020800

08001e04 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <MX_UART5_Init+0x94>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e4c:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e4e:	f008 fc1b 	bl	800a688 <HAL_UART_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e58:	f7ff fcd0 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	480d      	ldr	r0, [pc, #52]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e60:	f009 fd6f 	bl	800b942 <HAL_UARTEx_SetTxFifoThreshold>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001e6a:	f7ff fcc7 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e72:	f009 fda4 	bl	800b9be <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001e7c:	f7ff fcbe 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_UART5_Init+0x90>)
 8001e82:	f009 fd25 	bl	800b8d0 <HAL_UARTEx_DisableFifoMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001e8c:	f7ff fcb6 	bl	80017fc <Error_Handler>
  }

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20004dfc 	.word	0x20004dfc
 8001e98:	40005000 	.word	0x40005000

08001e9c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <MX_USART1_UART_Init+0x94>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee4:	4811      	ldr	r0, [pc, #68]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ee6:	f008 fbcf 	bl	800a688 <HAL_UART_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ef0:	f7ff fc84 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001ef8:	f009 fd23 	bl	800b942 <HAL_UARTEx_SetTxFifoThreshold>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f02:	f7ff fc7b 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f06:	2100      	movs	r1, #0
 8001f08:	4808      	ldr	r0, [pc, #32]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001f0a:	f009 fd58 	bl	800b9be <HAL_UARTEx_SetRxFifoThreshold>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f14:	f7ff fc72 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_USART1_UART_Init+0x90>)
 8001f1a:	f009 fcd9 	bl	800b8d0 <HAL_UARTEx_DisableFifoMode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f24:	f7ff fc6a 	bl	80017fc <Error_Handler>
  }

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20004e88 	.word	0x20004e88
 8001f30:	40011000 	.word	0x40011000

08001f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_UART_MspInit+0x150>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d156      	bne.n	8002004 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f66:	4b48      	ldr	r3, [pc, #288]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b44      	ldr	r3, [pc, #272]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	4a43      	ldr	r2, [pc, #268]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f98:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa2:	4b39      	ldr	r3, [pc, #228]	; (8002088 <HAL_UART_MspInit+0x154>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4830      	ldr	r0, [pc, #192]	; (800208c <HAL_UART_MspInit+0x158>)
 8001fcc:	f000 fee4 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4828      	ldr	r0, [pc, #160]	; (8002090 <HAL_UART_MspInit+0x15c>)
 8001fee:	f000 fed3 	bl	8002d98 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2106      	movs	r1, #6
 8001ff6:	2035      	movs	r0, #53	; 0x35
 8001ff8:	f000 f9be 	bl	8002378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ffc:	2035      	movs	r0, #53	; 0x35
 8001ffe:	f000 f9d5 	bl	80023ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002002:	e03b      	b.n	800207c <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_UART_MspInit+0x160>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d136      	bne.n	800207c <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART1_CLK_ENABLE();
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_UART_MspInit+0x154>)
 8002010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_UART_MspInit+0x154>)
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800201e:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_UART_MspInit+0x154>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_UART_MspInit+0x154>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <HAL_UART_MspInit+0x154>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_MspInit+0x154>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800204a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2302      	movs	r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800205c:	2307      	movs	r3, #7
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	480c      	ldr	r0, [pc, #48]	; (8002098 <HAL_UART_MspInit+0x164>)
 8002068:	f000 fe96 	bl	8002d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2106      	movs	r1, #6
 8002070:	2025      	movs	r0, #37	; 0x25
 8002072:	f000 f981 	bl	8002378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002076:	2025      	movs	r0, #37	; 0x25
 8002078:	f000 f998 	bl	80023ac <HAL_NVIC_EnableIRQ>
}
 800207c:	bf00      	nop
 800207e:	3730      	adds	r7, #48	; 0x30
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40005000 	.word	0x40005000
 8002088:	58024400 	.word	0x58024400
 800208c:	58020400 	.word	0x58020400
 8002090:	58020800 	.word	0x58020800
 8002094:	40011000 	.word	0x40011000
 8002098:	58020000 	.word	0x58020000

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020a0:	f7ff fd50 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020a6:	e003      	b.n	80020b0 <LoopCopyDataInit>

080020a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80020aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020ae:	3104      	adds	r1, #4

080020b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020b0:	480a      	ldr	r0, [pc, #40]	; (80020dc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80020b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020b8:	d3f6      	bcc.n	80020a8 <CopyDataInit>
  ldr  r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80020bc:	e002      	b.n	80020c4 <LoopFillZerobss>

080020be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020c0:	f842 3b04 	str.w	r3, [r2], #4

080020c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80020c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020c8:	d3f9      	bcc.n	80020be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f012 fa73 	bl	80145b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7ff f9d9 	bl	8001484 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020d8:	08014ac4 	.word	0x08014ac4
  ldr  r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020e0:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 80020e4:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 80020e8:	20005aa8 	.word	0x20005aa8

080020ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC3_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f6:	2003      	movs	r0, #3
 80020f8:	f000 f933 	bl	8002362 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020fc:	f005 f986 	bl	800740c <HAL_RCC_GetSysClockFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_Init+0x68>)
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	4913      	ldr	r1, [pc, #76]	; (800215c <HAL_Init+0x6c>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_Init+0x68>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_Init+0x6c>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_Init+0x70>)
 8002132:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_Init+0x74>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fbf8 	bl	8001930 <HAL_InitTick>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e002      	b.n	8002150 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800214a:	f7ff fbd3 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	58024400 	.word	0x58024400
 800215c:	08014858 	.word	0x08014858
 8002160:	20000004 	.word	0x20000004
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000000c 	.word	0x2000000c
 800218c:	20004f14 	.word	0x20004f14

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20004f14 	.word	0x20004f14

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d005      	beq.n	80021ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_Delay+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffde 	bl	8002190 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f7      	bhi.n	80021d0 <HAL_Delay+0x28>
  {
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c

080021f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetREVID+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0c1b      	lsrs	r3, r3, #16
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	5c001000 	.word	0x5c001000

08002208 <__NVIC_SetPriorityGrouping>:
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	4313      	orrs	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	05fa0000 	.word	0x05fa0000

08002250 <__NVIC_GetPriorityGrouping>:
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff4c 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002386:	f7ff ff63 	bl	8002250 <__NVIC_GetPriorityGrouping>
 800238a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	6978      	ldr	r0, [r7, #20]
 8002392:	f7ff ffb3 	bl	80022fc <NVIC_EncodePriority>
 8002396:	4602      	mov	r2, r0
 8002398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff82 	bl	80022a8 <__NVIC_SetPriority>
}
 80023a4:	bf00      	nop
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff56 	bl	800226c <__NVIC_EnableIRQ>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023cc:	f3bf 8f5f 	dmb	sy
}
 80023d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_MPU_Disable+0x28>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <HAL_MPU_Disable+0x28>)
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_MPU_Disable+0x2c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00
 80023f4:	e000ed90 	.word	0xe000ed90

080023f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_MPU_Enable+0x38>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_MPU_Enable+0x3c>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_MPU_Enable+0x3c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002416:	f3bf 8f4f 	dsb	sy
}
 800241a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800241c:	f3bf 8f6f 	isb	sy
}
 8002420:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed90 	.word	0xe000ed90
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	785a      	ldrb	r2, [r3, #1]
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_MPU_ConfigRegion+0x84>)
 8002446:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d029      	beq.n	80024a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_MPU_ConfigRegion+0x84>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7b1b      	ldrb	r3, [r3, #12]
 800245c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7adb      	ldrb	r3, [r3, #11]
 8002462:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002464:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7a9b      	ldrb	r3, [r3, #10]
 800246a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800246c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7b5b      	ldrb	r3, [r3, #13]
 8002472:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002474:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7b9b      	ldrb	r3, [r3, #14]
 800247a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800247c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7bdb      	ldrb	r3, [r3, #15]
 8002482:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002484:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7a5b      	ldrb	r3, [r3, #9]
 800248a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800248c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7a1b      	ldrb	r3, [r3, #8]
 8002492:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002494:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800249e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024a2:	e005      	b.n	80024b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_MPU_ConfigRegion+0x84>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024aa:	4b04      	ldr	r3, [pc, #16]	; (80024bc <HAL_MPU_ConfigRegion+0x84>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed90 	.word	0xe000ed90

080024c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e205      	b.n	80028de <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d004      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e1fa      	b.n	80028de <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a8c      	ldr	r2, [pc, #560]	; (8002720 <HAL_DMA_Abort_IT+0x260>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8b      	ldr	r2, [pc, #556]	; (8002724 <HAL_DMA_Abort_IT+0x264>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d045      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a89      	ldr	r2, [pc, #548]	; (8002728 <HAL_DMA_Abort_IT+0x268>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d040      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a88      	ldr	r2, [pc, #544]	; (800272c <HAL_DMA_Abort_IT+0x26c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d03b      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a86      	ldr	r2, [pc, #536]	; (8002730 <HAL_DMA_Abort_IT+0x270>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d036      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a85      	ldr	r2, [pc, #532]	; (8002734 <HAL_DMA_Abort_IT+0x274>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d031      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_DMA_Abort_IT+0x278>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02c      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a82      	ldr	r2, [pc, #520]	; (800273c <HAL_DMA_Abort_IT+0x27c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d027      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_DMA_Abort_IT+0x280>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7f      	ldr	r2, [pc, #508]	; (8002744 <HAL_DMA_Abort_IT+0x284>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01d      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <HAL_DMA_Abort_IT+0x288>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_DMA_Abort_IT+0x28c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_DMA_Abort_IT+0x290>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a79      	ldr	r2, [pc, #484]	; (8002754 <HAL_DMA_Abort_IT+0x294>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_DMA_Abort_IT+0x298>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Abort_IT+0xc8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a76      	ldr	r2, [pc, #472]	; (800275c <HAL_DMA_Abort_IT+0x29c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_DMA_Abort_IT+0xcc>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_DMA_Abort_IT+0xce>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d065      	beq.n	800265e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a60      	ldr	r2, [pc, #384]	; (8002720 <HAL_DMA_Abort_IT+0x260>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04a      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5e      	ldr	r2, [pc, #376]	; (8002724 <HAL_DMA_Abort_IT+0x264>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d045      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_DMA_Abort_IT+0x268>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d040      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a5b      	ldr	r2, [pc, #364]	; (800272c <HAL_DMA_Abort_IT+0x26c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d03b      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_DMA_Abort_IT+0x270>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d036      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_DMA_Abort_IT+0x274>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a57      	ldr	r2, [pc, #348]	; (8002738 <HAL_DMA_Abort_IT+0x278>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d02c      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_DMA_Abort_IT+0x27c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d027      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_DMA_Abort_IT+0x280>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_DMA_Abort_IT+0x284>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_DMA_Abort_IT+0x288>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a4f      	ldr	r2, [pc, #316]	; (800274c <HAL_DMA_Abort_IT+0x28c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a4e      	ldr	r2, [pc, #312]	; (8002750 <HAL_DMA_Abort_IT+0x290>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_DMA_Abort_IT+0x294>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_DMA_Abort_IT+0x298>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_Abort_IT+0x17a>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a49      	ldr	r2, [pc, #292]	; (800275c <HAL_DMA_Abort_IT+0x29c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d108      	bne.n	800264c <HAL_DMA_Abort_IT+0x18c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e147      	b.n	80028dc <HAL_DMA_Abort_IT+0x41c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e13e      	b.n	80028dc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 020e 	bic.w	r2, r2, #14
 800266c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_DMA_Abort_IT+0x260>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d04a      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a29      	ldr	r2, [pc, #164]	; (8002724 <HAL_DMA_Abort_IT+0x264>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d045      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_DMA_Abort_IT+0x268>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d040      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <HAL_DMA_Abort_IT+0x26c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d03b      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <HAL_DMA_Abort_IT+0x270>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d036      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_DMA_Abort_IT+0x274>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d031      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_DMA_Abort_IT+0x278>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d02c      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a20      	ldr	r2, [pc, #128]	; (800273c <HAL_DMA_Abort_IT+0x27c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d027      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_DMA_Abort_IT+0x280>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_DMA_Abort_IT+0x284>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01d      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_DMA_Abort_IT+0x288>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d018      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_DMA_Abort_IT+0x28c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_DMA_Abort_IT+0x290>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00e      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_DMA_Abort_IT+0x294>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <HAL_DMA_Abort_IT+0x298>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d004      	beq.n	800270e <HAL_DMA_Abort_IT+0x24e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_DMA_Abort_IT+0x29c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d128      	bne.n	8002760 <HAL_DMA_Abort_IT+0x2a0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e027      	b.n	8002770 <HAL_DMA_Abort_IT+0x2b0>
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_DMA_Abort_IT+0x428>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d072      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_DMA_Abort_IT+0x42c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d06d      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a59      	ldr	r2, [pc, #356]	; (80028f0 <HAL_DMA_Abort_IT+0x430>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d068      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_DMA_Abort_IT+0x434>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d063      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_DMA_Abort_IT+0x438>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d05e      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_DMA_Abort_IT+0x43c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d059      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a53      	ldr	r2, [pc, #332]	; (8002900 <HAL_DMA_Abort_IT+0x440>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d054      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_DMA_Abort_IT+0x444>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d04f      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_DMA_Abort_IT+0x448>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_DMA_Abort_IT+0x44c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	; (8002910 <HAL_DMA_Abort_IT+0x450>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_DMA_Abort_IT+0x454>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_DMA_Abort_IT+0x458>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a49      	ldr	r2, [pc, #292]	; (800291c <HAL_DMA_Abort_IT+0x45c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_DMA_Abort_IT+0x460>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a46      	ldr	r2, [pc, #280]	; (8002924 <HAL_DMA_Abort_IT+0x464>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a44      	ldr	r2, [pc, #272]	; (8002928 <HAL_DMA_Abort_IT+0x468>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_DMA_Abort_IT+0x46c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_DMA_Abort_IT+0x470>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_DMA_Abort_IT+0x474>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a3e      	ldr	r2, [pc, #248]	; (8002938 <HAL_DMA_Abort_IT+0x478>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3d      	ldr	r2, [pc, #244]	; (800293c <HAL_DMA_Abort_IT+0x47c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_DMA_Abort_IT+0x480>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Abort_IT+0x3a0>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_DMA_Abort_IT+0x484>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Abort_IT+0x3a4>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_DMA_Abort_IT+0x3a6>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d028      	beq.n	80028bc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002898:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494

08002948 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e04f      	b.n	80029fa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd fe72 	bl	8000658 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_DMA2D_Init+0xbc>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6851      	ldr	r1, [r2, #4]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	69d2      	ldr	r2, [r2, #28]
 800298e:	4311      	orrs	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	430b      	orrs	r3, r1
 8002996:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HAL_DMA2D_Init+0xc0>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6891      	ldr	r1, [r2, #8]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6992      	ldr	r2, [r2, #24]
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_DMA2D_Init+0xc4>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68d1      	ldr	r1, [r2, #12]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	430b      	orrs	r3, r1
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	051a      	lsls	r2, r3, #20
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	055b      	lsls	r3, r3, #21
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	fff8ffbf 	.word	0xfff8ffbf
 8002a08:	fffffef8 	.word	0xfffffef8
 8002a0c:	ffff0000 	.word	0xffff0000

08002a10 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d026      	beq.n	8002a80 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d021      	beq.n	8002a80 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2204      	movs	r2, #4
 8002a64:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d026      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab0:	f043 0202 	orr.w	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d026      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d021      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2208      	movs	r2, #8
 8002b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2204      	movs	r2, #4
 8002b14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferErrorCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f853 	bl	8002c08 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d024      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01f      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if(hdma2d->XferCpltCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01f      	beq.n	8002c00 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01a      	beq.n	8002c00 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f80e 	bl	8002c1c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d104      	bne.n	8002c52 <HAL_DMA2D_ConfigLayer+0x22>
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_DMA2D_ConfigLayer+0x30>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e092      	b.n	8002d86 <HAL_DMA2D_ConfigLayer+0x156>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	3328      	adds	r3, #40	; 0x28
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002c94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002ca0:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_DMA2D_ConfigLayer+0x164>)
 8002ca2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b0a      	cmp	r3, #10
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMA2D_ConfigLayer+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	e005      	b.n	8002cd0 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d120      	bne.n	8002d18 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	ea02 0103 	and.w	r1, r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b0a      	cmp	r3, #10
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA2D_ConfigLayer+0xd8>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d135      	bne.n	8002d74 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
 8002d16:	e02d      	b.n	8002d74 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b0b      	cmp	r3, #11
 8002d1e:	d109      	bne.n	8002d34 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	049b      	lsls	r3, r3, #18
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002d32:	617b      	str	r3, [r7, #20]
    }

     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	ea02 0103 	and.w	r1, r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b0a      	cmp	r3, #10
 8002d5c:	d003      	beq.n	8002d66 <HAL_DMA2D_ConfigLayer+0x136>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b09      	cmp	r3, #9
 8002d64:	d106      	bne.n	8002d74 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002d72:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	ff33000f 	.word	0xff33000f

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_GPIO_Init+0x234>)
 8002da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002daa:	e194      	b.n	80030d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8186 	beq.w	80030d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d00b      	beq.n	8002de4 <HAL_GPIO_Init+0x4c>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d007      	beq.n	8002de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd8:	2b11      	cmp	r3, #17
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b12      	cmp	r3, #18
 8002de2:	d130      	bne.n	8002e46 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 0201 	and.w	r2, r3, #1
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0xee>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b12      	cmp	r3, #18
 8002e84:	d123      	bne.n	8002ece <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	08da      	lsrs	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3208      	adds	r2, #8
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80e0 	beq.w	80030d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f10:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f16:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_GPIO_Init+0x238>)
 8002f22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2e:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <HAL_GPIO_Init+0x23c>)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3302      	adds	r3, #2
 8002f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_GPIO_Init+0x240>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d052      	beq.n	8003000 <HAL_GPIO_Init+0x268>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_GPIO_Init+0x244>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d031      	beq.n	8002fc6 <HAL_GPIO_Init+0x22e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_GPIO_Init+0x248>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d02b      	beq.n	8002fc2 <HAL_GPIO_Init+0x22a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_GPIO_Init+0x24c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d025      	beq.n	8002fbe <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <HAL_GPIO_Init+0x250>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01f      	beq.n	8002fba <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <HAL_GPIO_Init+0x254>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d019      	beq.n	8002fb6 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x258>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	; (8002ff4 <HAL_GPIO_Init+0x25c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00d      	beq.n	8002fae <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a18      	ldr	r2, [pc, #96]	; (8002ff8 <HAL_GPIO_Init+0x260>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_GPIO_Init+0x264>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_GPIO_Init+0x20e>
 8002fa2:	2309      	movs	r3, #9
 8002fa4:	e02d      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	e02b      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e029      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fae:	2307      	movs	r3, #7
 8002fb0:	e027      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e025      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e023      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e021      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e01f      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e01d      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e01b      	b.n	8003002 <HAL_GPIO_Init+0x26a>
 8002fca:	bf00      	nop
 8002fcc:	58000080 	.word	0x58000080
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58000400 	.word	0x58000400
 8002fd8:	58020000 	.word	0x58020000
 8002fdc:	58020400 	.word	0x58020400
 8002fe0:	58020800 	.word	0x58020800
 8002fe4:	58020c00 	.word	0x58020c00
 8002fe8:	58021000 	.word	0x58021000
 8002fec:	58021400 	.word	0x58021400
 8002ff0:	58021800 	.word	0x58021800
 8002ff4:	58021c00 	.word	0x58021c00
 8002ff8:	58022000 	.word	0x58022000
 8002ffc:	58022400 	.word	0x58022400
 8003000:	2300      	movs	r3, #0
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	4093      	lsls	r3, r2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003012:	4938      	ldr	r1, [pc, #224]	; (80030f4 <HAL_GPIO_Init+0x35c>)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800309a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	3301      	adds	r3, #1
 80030d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f ae63 	bne.w	8002dac <HAL_GPIO_Init+0x14>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	3724      	adds	r7, #36	; 0x24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	58000400 	.word	0x58000400

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fdc3 	bl	8000cdc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800315e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003160:	b08f      	sub	sp, #60	; 0x3c
 8003162:	af0a      	add	r7, sp, #40	; 0x28
 8003164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e054      	b.n	800321a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f010 ff32 	bl	8013ff4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 fe4d 	bl	800be4e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	687e      	ldr	r6, [r7, #4]
 80031bc:	466d      	mov	r5, sp
 80031be:	f106 0410 	add.w	r4, r6, #16
 80031c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80031d2:	1d33      	adds	r3, r6, #4
 80031d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	f008 fdc6 	bl	800bd68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f008 fe44 	bl	800be70 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	687e      	ldr	r6, [r7, #4]
 80031f0:	466d      	mov	r5, sp
 80031f2:	f106 0410 	add.w	r4, r6, #16
 80031f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003202:	e885 0003 	stmia.w	r5, {r0, r1}
 8003206:	1d33      	adds	r3, r6, #4
 8003208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f008 ff56 	bl	800c0bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003222 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003222:	b590      	push	{r4, r7, lr}
 8003224:	b089      	sub	sp, #36	; 0x24
 8003226:	af04      	add	r7, sp, #16
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	4608      	mov	r0, r1
 800322c:	4611      	mov	r1, r2
 800322e:	461a      	mov	r2, r3
 8003230:	4603      	mov	r3, r0
 8003232:	70fb      	strb	r3, [r7, #3]
 8003234:	460b      	mov	r3, r1
 8003236:	70bb      	strb	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_HCD_HC_Init+0x28>
 8003246:	2302      	movs	r3, #2
 8003248:	e07f      	b.n	800334a <HAL_HCD_HC_Init+0x128>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	333d      	adds	r3, #61	; 0x3d
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3338      	adds	r3, #56	; 0x38
 8003276:	787a      	ldrb	r2, [r7, #1]
 8003278:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	3340      	adds	r3, #64	; 0x40
 800328a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800328c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3339      	adds	r3, #57	; 0x39
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	440b      	add	r3, r1
 80032b0:	333f      	adds	r3, #63	; 0x3f
 80032b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	78bb      	ldrb	r3, [r7, #2]
 80032bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c0:	b2d8      	uxtb	r0, r3
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	333a      	adds	r3, #58	; 0x3a
 80032d0:	4602      	mov	r2, r0
 80032d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da0a      	bge.n	80032f2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	333b      	adds	r3, #59	; 0x3b
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e009      	b.n	8003306 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	333b      	adds	r3, #59	; 0x3b
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	333c      	adds	r3, #60	; 0x3c
 8003316:	f897 2020 	ldrb.w	r2, [r7, #32]
 800331a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	787c      	ldrb	r4, [r7, #1]
 8003322:	78ba      	ldrb	r2, [r7, #2]
 8003324:	78f9      	ldrb	r1, [r7, #3]
 8003326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4623      	mov	r3, r4
 8003338:	f009 f83c 	bl	800c3b4 <USB_HC_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bd90      	pop	{r4, r7, pc}

08003352 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_HCD_HC_Halt+0x1e>
 800336c:	2302      	movs	r3, #2
 800336e:	e00f      	b.n	8003390 <HAL_HCD_HC_Halt+0x3e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f009 fa74 	bl	800c86e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	70fb      	strb	r3, [r7, #3]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70bb      	strb	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	333b      	adds	r3, #59	; 0x3b
 80033c2:	78ba      	ldrb	r2, [r7, #2]
 80033c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	333f      	adds	r3, #63	; 0x3f
 80033d6:	787a      	ldrb	r2, [r7, #1]
 80033d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033da:	7c3b      	ldrb	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d114      	bne.n	800340a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	3342      	adds	r3, #66	; 0x42
 80033f0:	2203      	movs	r2, #3
 80033f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	333d      	adds	r3, #61	; 0x3d
 8003404:	7f3a      	ldrb	r2, [r7, #28]
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e009      	b.n	800341e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	3342      	adds	r3, #66	; 0x42
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800341e:	787b      	ldrb	r3, [r7, #1]
 8003420:	2b03      	cmp	r3, #3
 8003422:	f200 80d6 	bhi.w	80035d2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	080035bd 	.word	0x080035bd
 8003434:	080034a9 	.word	0x080034a9
 8003438:	08003533 	.word	0x08003533
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800343c:	7c3b      	ldrb	r3, [r7, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	f040 80c9 	bne.w	80035d6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8003444:	78bb      	ldrb	r3, [r7, #2]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 80c5 	bne.w	80035d6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800344c:	8b3b      	ldrh	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	3351      	adds	r3, #81	; 0x51
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3351      	adds	r3, #81	; 0x51
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3342      	adds	r3, #66	; 0x42
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003490:	e0a1      	b.n	80035d6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	440b      	add	r3, r1
 80034a0:	3342      	adds	r3, #66	; 0x42
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
      break;
 80034a6:	e096      	b.n	80035d6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80034a8:	78bb      	ldrb	r3, [r7, #2]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d120      	bne.n	80034f0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	3351      	adds	r3, #81	; 0x51
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	3342      	adds	r3, #66	; 0x42
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034d8:	e07e      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	3342      	adds	r3, #66	; 0x42
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
      break;
 80034ee:	e073      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3350      	adds	r3, #80	; 0x50
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	3342      	adds	r3, #66	; 0x42
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e05d      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	3342      	adds	r3, #66	; 0x42
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
      break;
 8003530:	e052      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003532:	78bb      	ldrb	r3, [r7, #2]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d120      	bne.n	800357a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	440b      	add	r3, r1
 8003546:	3351      	adds	r3, #81	; 0x51
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	440b      	add	r3, r1
 800355c:	3342      	adds	r3, #66	; 0x42
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003562:	e039      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3342      	adds	r3, #66	; 0x42
 8003574:	2202      	movs	r2, #2
 8003576:	701a      	strb	r2, [r3, #0]
      break;
 8003578:	e02e      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	3350      	adds	r3, #80	; 0x50
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	3342      	adds	r3, #66	; 0x42
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
      break;
 80035a4:	e018      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	3342      	adds	r3, #66	; 0x42
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
      break;
 80035ba:	e00d      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	3342      	adds	r3, #66	; 0x42
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
      break;
 80035d0:	e002      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80035d6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	3344      	adds	r3, #68	; 0x44
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	8b39      	ldrh	r1, [r7, #24]
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4403      	add	r3, r0
 80035fc:	3348      	adds	r3, #72	; 0x48
 80035fe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	335c      	adds	r3, #92	; 0x5c
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	334c      	adds	r3, #76	; 0x4c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	3339      	adds	r3, #57	; 0x39
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	335d      	adds	r3, #93	; 0x5d
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	3338      	adds	r3, #56	; 0x38
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	18d1      	adds	r1, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	f008 ffac 	bl	800c5c8 <USB_HC_StartXfer>
 8003670:	4603      	mov	r3, r0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f008 fccf 	bl	800c036 <USB_GetMode>
 8003698:	4603      	mov	r3, r0
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 80ef 	bne.w	800387e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f008 fcb3 	bl	800c010 <USB_ReadInterrupts>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80e5 	beq.w	800387c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f008 fcaa 	bl	800c010 <USB_ReadInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c6:	d104      	bne.n	80036d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80036d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f008 fc9a 	bl	800c010 <USB_ReadInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e6:	d104      	bne.n	80036f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f008 fc8a 	bl	800c010 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003702:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003706:	d104      	bne.n	8003712 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003710:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f008 fc7a 	bl	800c010 <USB_ReadInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d103      	bne.n	800372e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2202      	movs	r2, #2
 800372c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f008 fc6c 	bl	800c010 <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800373e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003742:	d115      	bne.n	8003770 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800374c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f010 fcb6 	bl	80140d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f008 fd5c 	bl	800c228 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f008 fc4b 	bl	800c010 <USB_ReadInterrupts>
 800377a:	4603      	mov	r3, r0
 800377c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003784:	d102      	bne.n	800378c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 f968 	bl	8004a5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f008 fc3d 	bl	800c010 <USB_ReadInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d106      	bne.n	80037ae <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f010 fc79 	bl	8014098 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2208      	movs	r2, #8
 80037ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f008 fc2c 	bl	800c010 <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037c2:	d138      	bne.n	8003836 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f009 f83f 	bl	800c84c <USB_HC_ReadInterrupt>
 80037ce:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e025      	b.n	8003822 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	d106      	bne.n	8003810 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8cf 	bl	80039ac <HCD_HC_IN_IRQHandler>
 800380e:	e005      	b.n	800381c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4619      	mov	r1, r3
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fcfd 	bl	8004216 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	d3d4      	bcc.n	80037d6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f008 fbe8 	bl	800c010 <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b10      	cmp	r3, #16
 8003848:	d101      	bne.n	800384e <HAL_HCD_IRQHandler+0x1d2>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <HAL_HCD_IRQHandler+0x1d4>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d014      	beq.n	800387e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0210 	bic.w	r2, r2, #16
 8003862:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 f84b 	bl	8004900 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0210 	orr.w	r2, r2, #16
 8003878:	619a      	str	r2, [r3, #24]
 800387a:	e000      	b.n	800387e <HAL_HCD_IRQHandler+0x202>
      return;
 800387c:	bf00      	nop
    }
  }
}
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_HCD_Start+0x16>
 8003896:	2302      	movs	r3, #2
 8003898:	e013      	b.n	80038c2 <HAL_HCD_Start+0x3e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f008 fac0 	bl	800be2c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f008 fd1c 	bl	800c2f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_HCD_Stop+0x16>
 80038dc:	2302      	movs	r3, #2
 80038de:	e00d      	b.n	80038fc <HAL_HCD_Stop+0x32>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f009 f8f9 	bl	800cae4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f008 fcc3 	bl	800c29c <USB_ResetPort>
 8003916:	4603      	mov	r3, r0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335c      	adds	r3, #92	; 0x5c
 800393c:	781b      	ldrb	r3, [r3, #0]
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	334c      	adds	r3, #76	; 0x4c
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f008 fd05 	bl	800c390 <USB_GetCurrentFrame>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f008 fce0 	bl	800c362 <USB_GetHostSpeed>
 80039a2:	4603      	mov	r3, r0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d119      	bne.n	8003a10 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	2304      	movs	r3, #4
 80039ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	0151      	lsls	r1, r2, #5
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	440a      	add	r2, r1
 8003a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	60d3      	str	r3, [r2, #12]
 8003a0e:	e0ce      	b.n	8003bae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d12c      	bne.n	8003a82 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a34:	461a      	mov	r2, r3
 8003a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	335d      	adds	r3, #93	; 0x5d
 8003a4c:	2207      	movs	r2, #7
 8003a4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 fef7 	bl	800c86e <USB_HC_Halt>
 8003a80:	e095      	b.n	8003bae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d109      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	6093      	str	r3, [r2, #8]
 8003aaa:	e080      	b.n	8003bae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d134      	bne.n	8003b2c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	335d      	adds	r3, #93	; 0x5d
 8003af2:	2205      	movs	r2, #5
 8003af4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b02:	461a      	mov	r2, r3
 8003b04:	2310      	movs	r3, #16
 8003b06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2308      	movs	r3, #8
 8003b18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f008 fea2 	bl	800c86e <USB_HC_Halt>
 8003b2a:	e040      	b.n	8003bae <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d134      	bne.n	8003bae <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f008 fe7d 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	461a      	mov	r2, r3
 8003b82:	2310      	movs	r3, #16
 8003b84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	335d      	adds	r3, #93	; 0x5d
 8003b96:	2208      	movs	r2, #8
 8003b98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bac:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc4:	d122      	bne.n	8003c0c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f008 fe3c 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c02:	461a      	mov	r2, r3
 8003c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c08:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c0a:	e300      	b.n	800420e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f040 80fd 	bne.w	8003e1e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	440b      	add	r3, r1
 8003c3a:	3348      	adds	r3, #72	; 0x48
 8003c3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	0159      	lsls	r1, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	440b      	add	r3, r1
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c50:	1ad1      	subs	r1, r2, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4403      	add	r3, r0
 8003c60:	334c      	adds	r3, #76	; 0x4c
 8003c62:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	335d      	adds	r3, #93	; 0x5d
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	3358      	adds	r3, #88	; 0x58
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	333f      	adds	r3, #63	; 0x3f
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	440b      	add	r3, r1
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d121      	bne.n	8003d0e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f008 fdba 	bl	800c86e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	461a      	mov	r2, r3
 8003d08:	2310      	movs	r3, #16
 8003d0a:	6093      	str	r3, [r2, #8]
 8003d0c:	e070      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	333f      	adds	r3, #63	; 0x3f
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d12a      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	b2d8      	uxtb	r0, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	440b      	add	r3, r1
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4601      	mov	r1, r0
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f010 f9ba 	bl	80140ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d78:	e03a      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	333f      	adds	r3, #63	; 0x3f
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d12f      	bne.n	8003df0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	335c      	adds	r3, #92	; 0x5c
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3350      	adds	r3, #80	; 0x50
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2d8      	uxtb	r0, r3
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	4602      	mov	r2, r0
 8003dce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	b2d8      	uxtb	r0, r3
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4601      	mov	r1, r0
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f010 f97e 	bl	80140ec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3350      	adds	r3, #80	; 0x50
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2d8      	uxtb	r0, r3
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	440b      	add	r3, r1
 8003e16:	3350      	adds	r3, #80	; 0x50
 8003e18:	4602      	mov	r2, r0
 8003e1a:	701a      	strb	r2, [r3, #0]
}
 8003e1c:	e1f7      	b.n	800420e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	f040 811a 	bne.w	800406a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	335d      	adds	r3, #93	; 0x5d
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10a      	bne.n	8003e82 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	335c      	adds	r3, #92	; 0x5c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e0d9      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	440b      	add	r3, r1
 8003e90:	335d      	adds	r3, #93	; 0x5d
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10a      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	440b      	add	r3, r1
 8003ea6:	335c      	adds	r3, #92	; 0x5c
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e0c3      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	440b      	add	r3, r1
 8003ebc:	335d      	adds	r3, #93	; 0x5d
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d00a      	beq.n	8003eda <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	335d      	adds	r3, #93	; 0x5d
 8003ed4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d156      	bne.n	8003f88 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3358      	adds	r3, #88	; 0x58
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	1c59      	adds	r1, r3, #1
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4403      	add	r3, r0
 8003efc:	3358      	adds	r3, #88	; 0x58
 8003efe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3358      	adds	r3, #88	; 0x58
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d914      	bls.n	8003f40 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	3358      	adds	r3, #88	; 0x58
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	335c      	adds	r3, #92	; 0x5c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e009      	b.n	8003f54 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	335c      	adds	r3, #92	; 0x5c
 8003f50:	2202      	movs	r2, #2
 8003f52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e056      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	335d      	adds	r3, #93	; 0x5d
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d123      	bne.n	8003fe6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	335c      	adds	r3, #92	; 0x5c
 8003fae:	2202      	movs	r2, #2
 8003fb0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fc8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e027      	b.n	8004036 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	440b      	add	r3, r1
 8003ff4:	335d      	adds	r3, #93	; 0x5d
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b07      	cmp	r3, #7
 8003ffa:	d11c      	bne.n	8004036 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	440b      	add	r3, r1
 800400a:	3358      	adds	r3, #88	; 0x58
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4403      	add	r3, r0
 800401e:	3358      	adds	r3, #88	; 0x58
 8004020:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	335c      	adds	r3, #92	; 0x5c
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	461a      	mov	r2, r3
 8004044:	2302      	movs	r3, #2
 8004046:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	b2d8      	uxtb	r0, r3
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	335c      	adds	r3, #92	; 0x5c
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	4601      	mov	r1, r0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f010 f842 	bl	80140ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004068:	e0d1      	b.n	800420e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d13e      	bne.n	80040fe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	440a      	add	r2, r1
 8004096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	3358      	adds	r3, #88	; 0x58
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1c59      	adds	r1, r3, #1
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4403      	add	r3, r0
 80040c2:	3358      	adds	r3, #88	; 0x58
 80040c4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	335d      	adds	r3, #93	; 0x5d
 80040d6:	2206      	movs	r2, #6
 80040d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f008 fbc2 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f6:	461a      	mov	r2, r3
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	6093      	str	r3, [r2, #8]
}
 80040fc:	e087      	b.n	800420e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b10      	cmp	r3, #16
 8004112:	d17c      	bne.n	800420e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	333f      	adds	r3, #63	; 0x3f
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d122      	bne.n	8004170 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	3358      	adds	r3, #88	; 0x58
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	440a      	add	r2, r1
 8004154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	4611      	mov	r1, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f008 fb80 	bl	800c86e <USB_HC_Halt>
 800416e:	e045      	b.n	80041fc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	333f      	adds	r3, #63	; 0x3f
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	440b      	add	r3, r1
 8004194:	333f      	adds	r3, #63	; 0x3f
 8004196:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004198:	2b02      	cmp	r3, #2
 800419a:	d12f      	bne.n	80041fc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	440b      	add	r3, r1
 80041aa:	3358      	adds	r3, #88	; 0x58
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d121      	bne.n	80041fc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	335d      	adds	r3, #93	; 0x5d
 80041c8:	2203      	movs	r2, #3
 80041ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f008 fb39 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	2310      	movs	r3, #16
 800420c:	6093      	str	r3, [r2, #8]
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	460b      	mov	r3, r1
 8004220:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4413      	add	r3, r2
 8004238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b04      	cmp	r3, #4
 8004244:	d119      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004252:	461a      	mov	r2, r3
 8004254:	2304      	movs	r3, #4
 8004256:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	440a      	add	r2, r1
 800426e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004278:	e33e      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b20      	cmp	r3, #32
 800428e:	d141      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429c:	461a      	mov	r2, r3
 800429e:	2320      	movs	r3, #32
 80042a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	333d      	adds	r3, #61	; 0x3d
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	f040 831f 	bne.w	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	333d      	adds	r3, #61	; 0x3d
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	335c      	adds	r3, #92	; 0x5c
 80042de:	2202      	movs	r2, #2
 80042e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f008 faae 	bl	800c86e <USB_HC_Halt>
}
 8004312:	e2f1      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004326:	2b40      	cmp	r3, #64	; 0x40
 8004328:	d13f      	bne.n	80043aa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	335d      	adds	r3, #93	; 0x5d
 800433a:	2204      	movs	r2, #4
 800433c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	333d      	adds	r3, #61	; 0x3d
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	3358      	adds	r3, #88	; 0x58
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	440a      	add	r2, r1
 800437c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f008 fa6c 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	461a      	mov	r2, r3
 80043a4:	2340      	movs	r3, #64	; 0x40
 80043a6:	6093      	str	r3, [r2, #8]
}
 80043a8:	e2a6      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d122      	bne.n	8004408 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	0151      	lsls	r1, r2, #5
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	440a      	add	r2, r1
 80043d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f008 fa3e 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fe:	461a      	mov	r2, r3
 8004400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004404:	6093      	str	r3, [r2, #8]
}
 8004406:	e277      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d135      	bne.n	800448a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	440b      	add	r3, r1
 800442c:	3358      	adds	r3, #88	; 0x58
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f008 fa06 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	461a      	mov	r2, r3
 8004470:	2301      	movs	r3, #1
 8004472:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	440b      	add	r3, r1
 8004482:	335d      	adds	r3, #93	; 0x5d
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
}
 8004488:	e236      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d12b      	bne.n	80044f8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ac:	461a      	mov	r2, r3
 80044ae:	2308      	movs	r3, #8
 80044b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	0151      	lsls	r1, r2, #5
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	440a      	add	r2, r1
 80044c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044cc:	f043 0302 	orr.w	r3, r3, #2
 80044d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f008 f9c6 	bl	800c86e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	440b      	add	r3, r1
 80044f0:	335d      	adds	r3, #93	; 0x5d
 80044f2:	2205      	movs	r2, #5
 80044f4:	701a      	strb	r2, [r3, #0]
}
 80044f6:	e1ff      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d155      	bne.n	80045ba <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	3358      	adds	r3, #88	; 0x58
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	335d      	adds	r3, #93	; 0x5d
 8004532:	2203      	movs	r2, #3
 8004534:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	333d      	adds	r3, #61	; 0x3d
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d114      	bne.n	8004576 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	440b      	add	r3, r1
 800455a:	333c      	adds	r3, #60	; 0x3c
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	440b      	add	r3, r1
 8004570:	333d      	adds	r3, #61	; 0x3d
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	0151      	lsls	r1, r2, #5
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	440a      	add	r2, r1
 800458c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004590:	f043 0302 	orr.w	r3, r3, #2
 8004594:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f008 f964 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	2310      	movs	r3, #16
 80045b6:	6093      	str	r3, [r2, #8]
}
 80045b8:	e19e      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d12b      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	0151      	lsls	r1, r2, #5
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	440a      	add	r2, r1
 80045e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f008 f937 	bl	800c86e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	335d      	adds	r3, #93	; 0x5d
 8004610:	2206      	movs	r2, #6
 8004612:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004620:	461a      	mov	r2, r3
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	6093      	str	r3, [r2, #8]
}
 8004626:	e167      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d135      	bne.n	80046ac <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f008 f8ff 	bl	800c86e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	461a      	mov	r2, r3
 800467e:	2310      	movs	r3, #16
 8004680:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	461a      	mov	r2, r3
 8004690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004694:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	440b      	add	r3, r1
 80046a4:	335d      	adds	r3, #93	; 0x5d
 80046a6:	2208      	movs	r2, #8
 80046a8:	701a      	strb	r2, [r3, #0]
}
 80046aa:	e125      	b.n	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	f040 811a 	bne.w	80048f8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046de:	f023 0302 	bic.w	r3, r3, #2
 80046e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	335d      	adds	r3, #93	; 0x5d
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d137      	bne.n	800476a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	335c      	adds	r3, #92	; 0x5c
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	333f      	adds	r3, #63	; 0x3f
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d00b      	beq.n	800473c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	333f      	adds	r3, #63	; 0x3f
 8004734:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004736:	2b03      	cmp	r3, #3
 8004738:	f040 80c5 	bne.w	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	3351      	adds	r3, #81	; 0x51
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f083 0301 	eor.w	r3, r3, #1
 8004752:	b2d8      	uxtb	r0, r3
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	440b      	add	r3, r1
 8004762:	3351      	adds	r3, #81	; 0x51
 8004764:	4602      	mov	r2, r0
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	e0ad      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	440b      	add	r3, r1
 8004778:	335d      	adds	r3, #93	; 0x5d
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d10a      	bne.n	8004796 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	440b      	add	r3, r1
 800478e:	335c      	adds	r3, #92	; 0x5c
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e097      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	335d      	adds	r3, #93	; 0x5d
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d10a      	bne.n	80047c2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	335c      	adds	r3, #92	; 0x5c
 80047bc:	2202      	movs	r2, #2
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e081      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	335d      	adds	r3, #93	; 0x5d
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d10a      	bne.n	80047ee <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	335c      	adds	r3, #92	; 0x5c
 80047e8:	2205      	movs	r2, #5
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e06b      	b.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	440b      	add	r3, r1
 80047fc:	335d      	adds	r3, #93	; 0x5d
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d00a      	beq.n	800481a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	440b      	add	r3, r1
 8004812:	335d      	adds	r3, #93	; 0x5d
 8004814:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004816:	2b08      	cmp	r3, #8
 8004818:	d155      	bne.n	80048c6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	3358      	adds	r3, #88	; 0x58
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4403      	add	r3, r0
 800483c:	3358      	adds	r3, #88	; 0x58
 800483e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	3358      	adds	r3, #88	; 0x58
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d914      	bls.n	8004880 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	3358      	adds	r3, #88	; 0x58
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	335c      	adds	r3, #92	; 0x5c
 800487a:	2204      	movs	r2, #4
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e009      	b.n	8004894 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	335c      	adds	r3, #92	; 0x5c
 8004890:	2202      	movs	r2, #2
 8004892:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	2302      	movs	r3, #2
 80048d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	b2d8      	uxtb	r0, r3
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	335c      	adds	r3, #92	; 0x5c
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	4601      	mov	r1, r0
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f00f fbfa 	bl	80140ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048f8:	bf00      	nop
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	; 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0c5b      	lsrs	r3, r3, #17
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004934:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d004      	beq.n	8004946 <HCD_RXQLVL_IRQHandler+0x46>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b05      	cmp	r3, #5
 8004940:	f000 8082 	beq.w	8004a48 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004944:	e083      	b.n	8004a4e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d07f      	beq.n	8004a4c <HCD_RXQLVL_IRQHandler+0x14c>
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	440b      	add	r3, r1
 800495a:	3344      	adds	r3, #68	; 0x44
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d074      	beq.n	8004a4c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	3344      	adds	r3, #68	; 0x44
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	b292      	uxth	r2, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f007 fb1e 	bl	800bfbe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	3344      	adds	r3, #68	; 0x44
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	18d1      	adds	r1, r2, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4403      	add	r3, r0
 80049a6:	3344      	adds	r3, #68	; 0x44
 80049a8:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	334c      	adds	r3, #76	; 0x4c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4403      	add	r3, r0
 80049ce:	334c      	adds	r3, #76	; 0x4c
 80049d0:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <HCD_RXQLVL_IRQHandler+0x158>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d031      	beq.n	8004a4c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	461a      	mov	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	440b      	add	r3, r1
 8004a28:	3350      	adds	r3, #80	; 0x50
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	f083 0301 	eor.w	r3, r3, #1
 8004a30:	b2d8      	uxtb	r0, r3
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	3350      	adds	r3, #80	; 0x50
 8004a42:	4602      	mov	r2, r0
 8004a44:	701a      	strb	r2, [r3, #0]
      break;
 8004a46:	e001      	b.n	8004a4c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8004a4c:	bf00      	nop
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	1ff80000 	.word	0x1ff80000

08004a5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d10b      	bne.n	8004aac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d102      	bne.n	8004aa4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f00f fb08 	bl	80140b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f043 0302 	orr.w	r3, r3, #2
 8004aaa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d132      	bne.n	8004b1c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d126      	bne.n	8004b16 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d113      	bne.n	8004af8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ada:	d106      	bne.n	8004aea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f007 fba0 	bl	800c228 <USB_InitFSLSPClkSel>
 8004ae8:	e011      	b.n	8004b0e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f007 fb99 	bl	800c228 <USB_InitFSLSPClkSel>
 8004af6:	e00a      	b.n	8004b0e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b06:	461a      	mov	r2, r3
 8004b08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b0c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f00f fafe 	bl	8014110 <HAL_HCD_PortEnabled_Callback>
 8004b14:	e002      	b.n	8004b1c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f00f fb08 	bl	801412c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d103      	bne.n	8004b2e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f043 0320 	orr.w	r3, r3, #32
 8004b2c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6013      	str	r3, [r2, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e07f      	b.n	8004c56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f9b2 	bl	8000ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e006      	b.n	8004bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d104      	bne.n	8004bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6859      	ldr	r1, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <HAL_I2C_Init+0x11c>)
 8004bea:	430b      	orrs	r3, r1
 8004bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	ea42 0103 	orr.w	r1, r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	02008000 	.word	0x02008000

08004c64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 80fd 	bne.w	8004e86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x34>
 8004c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0f1      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Read+0x4e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0ea      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cba:	f7fd fa69 	bl	8002190 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f95b 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0d5      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2222      	movs	r2, #34	; 0x22
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d04:	88f8      	ldrh	r0, [r7, #6]
 8004d06:	893a      	ldrh	r2, [r7, #8]
 8004d08:	8979      	ldrh	r1, [r7, #10]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4603      	mov	r3, r0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f8bf 	bl	8004e98 <I2C_RequestMemoryRead>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0ad      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2bff      	cmp	r3, #255	; 0xff
 8004d34:	d90e      	bls.n	8004d54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	4b52      	ldr	r3, [pc, #328]	; (8004e90 <HAL_I2C_Mem_Read+0x22c>)
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fa3d 	bl	80051cc <I2C_TransferConfig>
 8004d52:	e00f      	b.n	8004d74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <HAL_I2C_Mem_Read+0x22c>)
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fa2c 	bl	80051cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2104      	movs	r1, #4
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f902 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07c      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d034      	beq.n	8004e34 <HAL_I2C_Mem_Read+0x1d0>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d130      	bne.n	8004e34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f8d3 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e04d      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2bff      	cmp	r3, #255	; 0xff
 8004df4:	d90e      	bls.n	8004e14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	8979      	ldrh	r1, [r7, #10]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f9dd 	bl	80051cc <I2C_TransferConfig>
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	8979      	ldrh	r1, [r7, #10]
 8004e26:	2300      	movs	r3, #0
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f9cc 	bl	80051cc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d19a      	bne.n	8004d74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f920 	bl	8005088 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e01a      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2220      	movs	r2, #32
 8004e58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6859      	ldr	r1, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_I2C_Mem_Read+0x230>)
 8004e66:	400b      	ands	r3, r1
 8004e68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	80002400 	.word	0x80002400
 8004e94:	fe00e800 	.word	0xfe00e800

08004e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	8979      	ldrh	r1, [r7, #10]
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <I2C_RequestMemoryRead+0xa4>)
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f984 	bl	80051cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f89d 	bl	8005008 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e02c      	b.n	8004f32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee8:	e015      	b.n	8004f16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eea:	893b      	ldrh	r3, [r7, #8]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	69b9      	ldr	r1, [r7, #24]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f883 	bl	8005008 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e012      	b.n	8004f32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2140      	movs	r1, #64	; 0x40
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f831 	bl	8004f88 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	80002000 	.word	0x80002000

08004f40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d103      	bne.n	8004f5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d007      	beq.n	8004f7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	619a      	str	r2, [r3, #24]
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f98:	e022      	b.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d01e      	beq.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fd f8f5 	bl	8002190 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d113      	bne.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e00f      	b.n	8005000 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d0cd      	beq.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005014:	e02c      	b.n	8005070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f870 	bl	8005100 <I2C_IsAcknowledgeFailed>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e02a      	b.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d01e      	beq.n	8005070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fd f8ad 	bl	8002190 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d113      	bne.n	8005070 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e007      	b.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b02      	cmp	r3, #2
 800507c:	d1cb      	bne.n	8005016 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005094:	e028      	b.n	80050e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f830 	bl	8005100 <I2C_IsAcknowledgeFailed>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e026      	b.n	80050f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050aa:	f7fd f871 	bl	8002190 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d302      	bcc.n	80050c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d113      	bne.n	80050e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e007      	b.n	80050f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d1cf      	bne.n	8005096 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d151      	bne.n	80051be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511a:	e022      	b.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d01e      	beq.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005124:	f7fd f834 	bl	8002190 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	d302      	bcc.n	800513a <I2C_IsAcknowledgeFailed+0x3a>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e02e      	b.n	80051c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d1d5      	bne.n	800511c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2220      	movs	r2, #32
 800517e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fedd 	bl	8004f40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8005192:	400b      	ands	r3, r1
 8005194:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	fe00e800 	.word	0xfe00e800

080051cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	4613      	mov	r3, r2
 80051dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	0d5b      	lsrs	r3, r3, #21
 80051e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <I2C_TransferConfig+0x58>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	43db      	mvns	r3, r3
 80051f2:	ea02 0103 	and.w	r1, r2, r3
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051fc:	7a7b      	ldrb	r3, [r7, #9]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	431a      	orrs	r2, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	03ff63ff 	.word	0x03ff63ff

08005228 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d138      	bne.n	80052b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005248:	2302      	movs	r3, #2
 800524a:	e032      	b.n	80052b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800527a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d139      	bne.n	8005348 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052de:	2302      	movs	r3, #2
 80052e0:	e033      	b.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2224      	movs	r2, #36	; 0x24
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005310:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e038      	b.n	80053da <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005370:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f245 5255 	movw	r2, #21845	; 0x5555
 800537a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6852      	ldr	r2, [r2, #4]
 8005384:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6892      	ldr	r2, [r2, #8]
 800538e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005390:	f7fc fefe 	bl	8002190 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8005396:	e008      	b.n	80053aa <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005398:	f7fc fefa 	bl	8002190 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d901      	bls.n	80053aa <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e017      	b.n	80053da <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f1      	bne.n	8005398 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d005      	beq.n	80053ce <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	611a      	str	r2, [r3, #16]
 80053cc:	e004      	b.n	80053d8 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e070      	b.n	80054d8 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fb fe72 	bl	80010f4 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005446:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005466:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005476:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_JPEG_Init+0xfc>)
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_JPEG_Init+0x100>)
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fae9 	bl	8005a68 <JPEG_Set_HuffEnc_Mem>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d004      	beq.n	80054a6 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e018      	b.n	80054d8 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b4:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08014a08 	.word	0x08014a08
 80054e4:	08014a48 	.word	0x08014a48

080054e8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimmension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b08b      	sub	sp, #44	; 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e020      	b.n	8005542 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	4413      	add	r3, r2
 8005510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005514:	d90f      	bls.n	8005536 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e055      	b.n	80055c6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	440b      	add	r3, r1
 8005524:	3201      	adds	r2, #1
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
      p++;
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	3301      	adds	r3, #1
 800552e:	623b      	str	r3, [r7, #32]
      i--;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	3b01      	subs	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ee      	bne.n	800551a <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	3301      	adds	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d9db      	bls.n	8005500 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	4413      	add	r3, r2
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	617b      	str	r3, [r7, #20]
  p = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005566:	e027      	b.n	80055b8 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	4413      	add	r3, r2
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	601a      	str	r2, [r3, #0]
      p++;
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	3301      	adds	r3, #1
 8005578:	623b      	str	r3, [r7, #32]
      code++;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3301      	adds	r3, #1
 800557e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4293      	cmp	r3, r2
 800558e:	d0eb      	beq.n	8005568 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b1f      	cmp	r3, #31
 8005594:	d901      	bls.n	800559a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e015      	b.n	80055c6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800559a:	2201      	movs	r2, #1
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d301      	bcc.n	80055ac <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e00c      	b.n	80055c6 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
    si++;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	3301      	adds	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	4413      	add	r3, r2
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1dd      	bne.n	8005580 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	372c      	adds	r7, #44	; 0x2c
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80055d8:	af00      	add	r7, sp, #0
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	6018      	str	r0, [r3, #0]
 80055de:	463b      	mov	r3, r7
 80055e0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f107 0308 	add.w	r3, r7, #8
 80055ea:	f107 020c 	add.w	r2, r7, #12
 80055ee:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80055f2:	f7ff ff79 	bl	80054e8 <JPEG_Bits_To_SizeCodes>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80055fc:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8005604:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005608:	e066      	b.n	80056d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8005610:	e05a      	b.n	80056c8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xf6>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800561a:	4413      	add	r3, r2
 800561c:	3310      	adds	r3, #16
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8005624:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x62>
    {
      l = 160; /*l = 0x00 EOB code*/
 800562c:	23a0      	movs	r3, #160	; 0xa0
 800562e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8005632:	e021      	b.n	8005678 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8005634:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005638:	2bf0      	cmp	r3, #240	; 0xf0
 800563a:	d103      	bne.n	8005644 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x72>
    {
      l = 161;
 800563c:	23a1      	movs	r3, #161	; 0xa1
 800563e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8005642:	e019      	b.n	8005678 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xa6>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8005644:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8005652:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800565e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	461a      	mov	r2, r3
 800566c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005670:	4413      	add	r3, r2
 8005672:	3b01      	subs	r3, #1
 8005674:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005678:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800567c:	2ba1      	cmp	r3, #161	; 0xa1
 800567e:	d901      	bls.n	8005684 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xb2>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005680:	2301      	movs	r3, #1
 8005682:	e029      	b.n	80056d8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x106>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800568c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005690:	463b      	mov	r3, r7
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005698:	3328      	adds	r3, #40	; 0x28
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80056a0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80056a4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80056a8:	4413      	add	r3, r2
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b2d9      	uxtb	r1, r3
 80056b0:	463b      	mov	r3, r7
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80056b8:	4413      	add	r3, r2
 80056ba:	460a      	mov	r2, r1
 80056bc:	701a      	strb	r2, [r3, #0]
      k++;
 80056be:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80056c2:	3301      	adds	r3, #1
 80056c4:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d39d      	bcc.n	8005612 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	1d3b      	adds	r3, r7, #4
 80056ec:	6018      	str	r0, [r3, #0]
 80056ee:	463b      	mov	r3, r7
 80056f0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80056fa:	f107 0208 	add.w	r2, r7, #8
 80056fe:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8005702:	f7ff fef1 	bl	80054e8 <JPEG_Bits_To_SizeCodes>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 800570c:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x38>
  {
    return  error;
 8005714:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8005718:	e03b      	b.n	8005792 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8005720:	e030      	b.n	8005784 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xa2>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800572a:	4413      	add	r3, r2
 800572c:	3310      	adds	r3, #16
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8005734:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005738:	2b0b      	cmp	r3, #11
 800573a:	d901      	bls.n	8005740 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x5e>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800573c:	2301      	movs	r3, #1
 800573e:	e028      	b.n	8005792 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xb0>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8005740:	f107 0308 	add.w	r3, r7, #8
 8005744:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005748:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800574c:	463b      	mov	r3, r7
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005754:	3302      	adds	r3, #2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800575c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8005760:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005764:	4413      	add	r3, r2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	3b01      	subs	r3, #1
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	463b      	mov	r3, r7
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005774:	4413      	add	r3, r2
 8005776:	460a      	mov	r2, r1
 8005778:	701a      	strb	r2, [r3, #0]
      k++;
 800577a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800577e:	3301      	adds	r3, #1
 8005780:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8005784:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005788:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800578c:	429a      	cmp	r2, r3
 800578e:	d3c8      	bcc.n	8005722 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x40>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b09a      	sub	sp, #104	; 0x68
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d106      	bne.n	80057c4 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80057be:	3318      	adds	r3, #24
 80057c0:	663b      	str	r3, [r7, #96]	; 0x60
 80057c2:	e00f      	b.n	80057e4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d106      	bne.n	80057e0 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80057da:	3318      	adds	r3, #24
 80057dc:	663b      	str	r3, [r7, #96]	; 0x60
 80057de:	e001      	b.n	80057e4 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e05b      	b.n	800589c <JPEG_Set_HuffDC_Mem+0x100>
  }

  if (HuffTableDC != NULL)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d057      	beq.n	800589a <JPEG_Set_HuffDC_Mem+0xfe>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80057ea:	f107 0314 	add.w	r3, r7, #20
 80057ee:	4619      	mov	r1, r3
 80057f0:	68b8      	ldr	r0, [r7, #8]
 80057f2:	f7ff ff76 	bl	80056e2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80057fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8005804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005808:	e048      	b.n	800589c <JPEG_Set_HuffDC_Mem+0x100>
    }
    addressDef = address;
 800580a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800580c:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800580e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005810:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005814:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005818:	3304      	adds	r3, #4
 800581a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800581c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800581e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005822:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8005824:	230c      	movs	r3, #12
 8005826:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8005828:	e034      	b.n	8005894 <JPEG_Set_HuffDC_Mem+0xf8>
    {
      i--;
 800582a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582c:	3b01      	subs	r3, #1
 800582e:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8005830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005832:	3b04      	subs	r3, #4
 8005834:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005836:	f107 0214 	add.w	r2, r7, #20
 800583a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800583c:	4413      	add	r3, r2
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005848:	3302      	adds	r3, #2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005850:	440b      	add	r3, r1
 8005852:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	4313      	orrs	r3, r2
 800585a:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 800585c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585e:	3b01      	subs	r3, #1
 8005860:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005862:	f107 0214 	add.w	r2, r7, #20
 8005866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005872:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005874:	3302      	adds	r3, #2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800587c:	440b      	add	r3, r1
 800587e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588a:	041a      	lsls	r2, r3, #16
 800588c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588e:	431a      	orrs	r2, r3
 8005890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005892:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	2b01      	cmp	r3, #1
 8005898:	d8c7      	bhi.n	800582a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3768      	adds	r7, #104	; 0x68
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	6018      	str	r0, [r3, #0]
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	6019      	str	r1, [r3, #0]
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80058bc:	f107 030c 	add.w	r3, r7, #12
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	1d3a      	adds	r2, r7, #4
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d10a      	bne.n	80058e6 <JPEG_Set_HuffAC_Mem+0x42>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80058e0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80058e4:	e016      	b.n	8005914 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80058e6:	f107 030c 	add.w	r3, r7, #12
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d10a      	bne.n	8005910 <JPEG_Set_HuffAC_Mem+0x6c>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80058fa:	f107 030c 	add.w	r3, r7, #12
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8005906:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800590a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800590e:	e001      	b.n	8005914 <JPEG_Set_HuffAC_Mem+0x70>
  }
  else
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e09c      	b.n	8005a4e <JPEG_Set_HuffAC_Mem+0x1aa>
  }

  if (HuffTableAC != NULL)
 8005914:	f107 0308 	add.w	r3, r7, #8
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8096 	beq.w	8005a4c <JPEG_Set_HuffAC_Mem+0x1a8>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8005920:	f107 0214 	add.w	r2, r7, #20
 8005924:	f107 0308 	add.w	r3, r7, #8
 8005928:	4611      	mov	r1, r2
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	f7ff fe51 	bl	80055d2 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005936:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <JPEG_Set_HuffAC_Mem+0xa0>
    {
      return  error;
 800593e:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005942:	e084      	b.n	8005a4e <JPEG_Set_HuffAC_Mem+0x1aa>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005944:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005948:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005952:	e00e      	b.n	8005972 <JPEG_Set_HuffAC_Mem+0xce>
    {
      *addressDef = 0x0FFF0FFF;
 8005954:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005958:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800595c:	601a      	str	r2, [r3, #0]
      addressDef++;
 800595e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005962:	3304      	adds	r3, #4
 8005964:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005968:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800596c:	3301      	adds	r3, #1
 800596e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005972:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005976:	2b02      	cmp	r3, #2
 8005978:	d9ec      	bls.n	8005954 <JPEG_Set_HuffAC_Mem+0xb0>
    }
    *addressDef = 0x0FD10FD0;
 800597a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800597e:	4a36      	ldr	r2, [pc, #216]	; (8005a58 <JPEG_Set_HuffAC_Mem+0x1b4>)
 8005980:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005982:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005986:	3304      	adds	r3, #4
 8005988:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 800598c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005990:	4a32      	ldr	r2, [pc, #200]	; (8005a5c <JPEG_Set_HuffAC_Mem+0x1b8>)
 8005992:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005994:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005998:	3304      	adds	r3, #4
 800599a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 800599e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80059a2:	4a2f      	ldr	r2, [pc, #188]	; (8005a60 <JPEG_Set_HuffAC_Mem+0x1bc>)
 80059a4:	601a      	str	r2, [r3, #0]
    addressDef++;
 80059a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80059aa:	3304      	adds	r3, #4
 80059ac:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 80059b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80059b4:	4a2b      	ldr	r2, [pc, #172]	; (8005a64 <JPEG_Set_HuffAC_Mem+0x1c0>)
 80059b6:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80059b8:	23a2      	movs	r3, #162	; 0xa2
 80059ba:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 80059be:	e041      	b.n	8005a44 <JPEG_Set_HuffAC_Mem+0x1a0>
    {
      i--;
 80059c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80059c4:	3b01      	subs	r3, #1
 80059c6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 80059ca:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80059ce:	3b04      	subs	r3, #4
 80059d0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80059d4:	f107 0214 	add.w	r2, r7, #20
 80059d8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80059dc:	4413      	add	r3, r2
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80059e6:	f107 0114 	add.w	r1, r7, #20
 80059ea:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80059ee:	3328      	adds	r3, #40	; 0x28
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 80059fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005a08:	f107 0214 	add.w	r2, r7, #20
 8005a0c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a10:	4413      	add	r3, r2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005a1a:	f107 0114 	add.w	r1, r7, #20
 8005a1e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a22:	3328      	adds	r3, #40	; 0x28
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005a32:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005a36:	041a      	lsls	r2, r3, #16
 8005a38:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005a42:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005a44:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d8b9      	bhi.n	80059c0 <JPEG_Set_HuffAC_Mem+0x11c>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0fd10fd0 	.word	0x0fd10fd0
 8005a5c:	0fd30fd2 	.word	0x0fd30fd2
 8005a60:	0fd50fd4 	.word	0x0fd50fd4
 8005a64:	0fd70fd6 	.word	0x0fd70fd6

08005a68 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f84d 	bl	8005b10 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8005a7e:	461a      	mov	r2, r3
 8005a80:	491f      	ldr	r1, [pc, #124]	; (8005b00 <JPEG_Set_HuffEnc_Mem+0x98>)
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff ff0e 	bl	80058a4 <JPEG_Set_HuffAC_Mem>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	e030      	b.n	8005af8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4918      	ldr	r1, [pc, #96]	; (8005b04 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fefe 	bl	80058a4 <JPEG_Set_HuffAC_Mem>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	e020      	b.n	8005af8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4911      	ldr	r1, [pc, #68]	; (8005b08 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fe6a 	bl	800579c <JPEG_Set_HuffDC_Mem>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	e010      	b.n	8005af8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8005ade:	461a      	mov	r2, r3
 8005ae0:	490a      	ldr	r1, [pc, #40]	; (8005b0c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff fe5a 	bl	800579c <JPEG_Set_HuffDC_Mem>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	e000      	b.n	8005af8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	080148a0 	.word	0x080148a0
 8005b04:	08014954 	.word	0x08014954
 8005b08:	08014868 	.word	0x08014868
 8005b0c:	08014884 	.word	0x08014884

08005b10 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b08b      	sub	sp, #44	; 0x2c
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005b18:	4b80      	ldr	r3, [pc, #512]	; (8005d1c <JPEG_Set_Huff_DHTMem+0x20c>)
 8005b1a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8005b1c:	4b80      	ldr	r3, [pc, #512]	; (8005d20 <JPEG_Set_Huff_DHTMem+0x210>)
 8005b1e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005b20:	4b80      	ldr	r3, [pc, #512]	; (8005d24 <JPEG_Set_Huff_DHTMem+0x214>)
 8005b22:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005b24:	4b80      	ldr	r3, [pc, #512]	; (8005d28 <JPEG_Set_Huff_DHTMem+0x218>)
 8005b26:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005b30:	330c      	adds	r3, #12
 8005b32:	623b      	str	r3, [r7, #32]
  index = 16;
 8005b34:	2310      	movs	r3, #16
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b38:	e01d      	b.n	8005b76 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	5cd3      	ldrb	r3, [r2, r3]
 8005b42:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	3b02      	subs	r3, #2
 8005b48:	6979      	ldr	r1, [r7, #20]
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b4e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	3b03      	subs	r3, #3
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005b5a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	3a04      	subs	r2, #4
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005b64:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	601a      	str	r2, [r3, #0]
    address--;
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	3b04      	subs	r3, #4
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d8de      	bhi.n	8005b3a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005b84:	3318      	adds	r3, #24
 8005b86:	623b      	str	r3, [r7, #32]
  index = 12;
 8005b88:	230c      	movs	r3, #12
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005b8c:	e021      	b.n	8005bd2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	3b01      	subs	r3, #1
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	7c1b      	ldrb	r3, [r3, #16]
 8005b98:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	3b02      	subs	r3, #2
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	440b      	add	r3, r1
 8005ba2:	7c1b      	ldrb	r3, [r3, #16]
 8005ba4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005ba6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	3b03      	subs	r3, #3
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	440b      	add	r3, r1
 8005bb0:	7c1b      	ldrb	r3, [r3, #16]
 8005bb2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005bb4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8005bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb8:	3a04      	subs	r2, #4
 8005bba:	6979      	ldr	r1, [r7, #20]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005bc0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	601a      	str	r2, [r3, #0]
    address--;
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	3b04      	subs	r3, #4
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d8da      	bhi.n	8005b8e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005be0:	3328      	adds	r3, #40	; 0x28
 8005be2:	623b      	str	r3, [r7, #32]
  index = 16;
 8005be4:	2310      	movs	r3, #16
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005be8:	e01d      	b.n	8005c26 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	3b01      	subs	r3, #1
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	5cd3      	ldrb	r3, [r2, r3]
 8005bf2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	3b02      	subs	r3, #2
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005bfe:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3b03      	subs	r3, #3
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005c0a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	3a04      	subs	r2, #4
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005c14:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	601a      	str	r2, [r3, #0]
    address--;
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	3b04      	subs	r3, #4
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d8de      	bhi.n	8005bea <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005c34:	33cc      	adds	r3, #204	; 0xcc
 8005c36:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	; (8005d2c <JPEG_Set_Huff_DHTMem+0x21c>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c48:	021a      	lsls	r2, r3, #8
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	623b      	str	r3, [r7, #32]
  index = 160;
 8005c64:	23a0      	movs	r3, #160	; 0xa0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005c68:	e021      	b.n	8005cae <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	3b02      	subs	r3, #2
 8005c7a:	69f9      	ldr	r1, [r7, #28]
 8005c7c:	440b      	add	r3, r1
 8005c7e:	7c1b      	ldrb	r3, [r3, #16]
 8005c80:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005c82:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	3b03      	subs	r3, #3
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	440b      	add	r3, r1
 8005c8c:	7c1b      	ldrb	r3, [r3, #16]
 8005c8e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8005c90:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	3a04      	subs	r2, #4
 8005c96:	69f9      	ldr	r1, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005c9c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	601a      	str	r2, [r3, #0]
    address--;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	3b04      	subs	r3, #4
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d8da      	bhi.n	8005c6a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005cbc:	33cc      	adds	r3, #204	; 0xcc
 8005cbe:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	061a      	lsls	r2, r3, #24
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005cea:	33dc      	adds	r3, #220	; 0xdc
 8005cec:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <JPEG_Set_Huff_DHTMem+0x21c>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	7bdb      	ldrb	r3, [r3, #15]
 8005cfc:	021a      	lsls	r2, r3, #8
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	7b92      	ldrb	r2, [r2, #14]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	3b04      	subs	r3, #4
 8005d14:	623b      	str	r3, [r7, #32]
  index = 12;
 8005d16:	230c      	movs	r3, #12
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d1a:	e027      	b.n	8005d6c <JPEG_Set_Huff_DHTMem+0x25c>
 8005d1c:	080148a0 	.word	0x080148a0
 8005d20:	08014954 	.word	0x08014954
 8005d24:	08014868 	.word	0x08014868
 8005d28:	08014884 	.word	0x08014884
 8005d2c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	3301      	adds	r3, #1
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005d3a:	6939      	ldr	r1, [r7, #16]
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	440b      	add	r3, r1
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005d44:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	6939      	ldr	r1, [r7, #16]
 8005d4c:	5ccb      	ldrb	r3, [r1, r3]
 8005d4e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005d50:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	3a02      	subs	r2, #2
 8005d56:	6939      	ldr	r1, [r7, #16]
 8005d58:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005d5a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	601a      	str	r2, [r3, #0]
    address--;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	3b04      	subs	r3, #4
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d8de      	bhi.n	8005d30 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005d7a:	33dc      	adds	r3, #220	; 0xdc
 8005d7c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	7c5b      	ldrb	r3, [r3, #17]
 8005d8a:	061a      	lsls	r2, r3, #24
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	7c1b      	ldrb	r3, [r3, #16]
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005da8:	33e8      	adds	r3, #232	; 0xe8
 8005daa:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b6d      	ldr	r3, [pc, #436]	; (8005f68 <JPEG_Set_Huff_DHTMem+0x458>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	7edb      	ldrb	r3, [r3, #27]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	7e92      	ldrb	r2, [r2, #26]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	623b      	str	r3, [r7, #32]
  index = 8;
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005dd8:	e021      	b.n	8005e1e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	3301      	adds	r3, #1
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	7c1b      	ldrb	r3, [r3, #16]
 8005de4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005de6:	6939      	ldr	r1, [r7, #16]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	440b      	add	r3, r1
 8005dec:	3310      	adds	r3, #16
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005df2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6939      	ldr	r1, [r7, #16]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	7c1b      	ldrb	r3, [r3, #16]
 8005dfe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005e00:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	3a02      	subs	r2, #2
 8005e06:	6939      	ldr	r1, [r7, #16]
 8005e08:	440a      	add	r2, r1
 8005e0a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005e0c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	601a      	str	r2, [r3, #0]
    address--;
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	3b04      	subs	r3, #4
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d8da      	bhi.n	8005dda <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e2c:	33e8      	adds	r3, #232	; 0xe8
 8005e2e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	061a      	lsls	r2, r3, #24
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005e5a:	33f8      	adds	r3, #248	; 0xf8
 8005e5c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <JPEG_Set_Huff_DHTMem+0x458>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	7bdb      	ldrb	r3, [r3, #15]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	7b92      	ldrb	r2, [r2, #14]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	3b04      	subs	r3, #4
 8005e84:	623b      	str	r3, [r7, #32]
  index = 12;
 8005e86:	230c      	movs	r3, #12
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005e8a:	e01d      	b.n	8005ec8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	3301      	adds	r3, #1
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	440b      	add	r3, r1
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005ea0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	5ccb      	ldrb	r3, [r1, r3]
 8005eaa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005eac:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	3a02      	subs	r2, #2
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005eb6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	601a      	str	r2, [r3, #0]
    address--;
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	3b04      	subs	r3, #4
 8005ec0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d8de      	bhi.n	8005e8c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005ed6:	33f8      	adds	r3, #248	; 0xf8
 8005ed8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	7c5b      	ldrb	r3, [r3, #17]
 8005ee6:	061a      	lsls	r2, r3, #24
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	7c1b      	ldrb	r3, [r3, #16]
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005f04:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005f08:	623b      	str	r3, [r7, #32]
  index = 160;
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f0e:	e021      	b.n	8005f54 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	3301      	adds	r3, #1
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4413      	add	r3, r2
 8005f18:	7c1b      	ldrb	r3, [r3, #16]
 8005f1a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005f1c:	69b9      	ldr	r1, [r7, #24]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	440b      	add	r3, r1
 8005f22:	3310      	adds	r3, #16
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f28:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	440b      	add	r3, r1
 8005f32:	7c1b      	ldrb	r3, [r3, #16]
 8005f34:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005f36:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	3a02      	subs	r2, #2
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	440a      	add	r2, r1
 8005f40:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005f42:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	601a      	str	r2, [r3, #0]
    address--;
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	3b04      	subs	r3, #4
 8005f4c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	3b04      	subs	r3, #4
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d8da      	bhi.n	8005f10 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	372c      	adds	r7, #44	; 0x2c
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	ffff0000 	.word	0xffff0000

08005f6c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e0bf      	b.n	80060fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb f952 	bl	800123c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005fae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fc4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6899      	ldr	r1, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b4a      	ldr	r3, [pc, #296]	; (8006108 <HAL_LTDC_Init+0x19c>)
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	041b      	lsls	r3, r3, #16
 8005fea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6899      	ldr	r1, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68d9      	ldr	r1, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <HAL_LTDC_Init+0x19c>)
 800600e:	400b      	ands	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68d9      	ldr	r1, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b33      	ldr	r3, [pc, #204]	; (8006108 <HAL_LTDC_Init+0x19c>)
 800603c:	400b      	ands	r3, r1
 800603e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6919      	ldr	r1, [r3, #16]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6959      	ldr	r1, [r3, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b27      	ldr	r3, [pc, #156]	; (8006108 <HAL_LTDC_Init+0x19c>)
 800606a:	400b      	ands	r3, r1
 800606c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6959      	ldr	r1, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800609c:	041b      	lsls	r3, r3, #16
 800609e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0206 	orr.w	r2, r2, #6
 80060da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	f000f800 	.word	0xf000f800

0800610c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006122:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d023      	beq.n	8006176 <HAL_LTDC_IRQHandler+0x6a>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01e      	beq.n	8006176 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0204 	bic.w	r2, r2, #4
 8006146:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2204      	movs	r2, #4
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006156:	f043 0201 	orr.w	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2204      	movs	r2, #4
 8006164:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f86f 	bl	8006254 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d023      	beq.n	80061c8 <HAL_LTDC_IRQHandler+0xbc>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01e      	beq.n	80061c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0202 	bic.w	r2, r2, #2
 8006198:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2202      	movs	r2, #2
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061a8:	f043 0202 	orr.w	r2, r3, #2
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f846 	bl	8006254 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01b      	beq.n	800620a <HAL_LTDC_IRQHandler+0xfe>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d016      	beq.n	800620a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2201      	movs	r2, #1
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f82f 	bl	8006268 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01b      	beq.n	800624c <HAL_LTDC_IRQHandler+0x140>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0208 	bic.w	r2, r2, #8
 800622c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2208      	movs	r2, #8
 8006234:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f818 	bl	800627c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_LTDC_ConfigLayer+0x1a>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e02c      	b.n	8006304 <HAL_LTDC_ConfigLayer+0x74>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2134      	movs	r1, #52	; 0x34
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4614      	mov	r4, r2
 80062ce:	461d      	mov	r5, r3
 80062d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f89d 	bl	8006424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bdb0      	pop	{r4, r5, r7, pc}

0800630c <HAL_LTDC_SetWindowSize>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowSize(LTDC_HandleTypeDef *hltdc, uint32_t XSize, uint32_t YSize, uint32_t LayerIdx)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(XSize));
  assert_param(IS_LTDC_CFBLNBR(YSize));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_LTDC_SetWindowSize+0x1c>
 8006324:	2302      	movs	r3, #2
 8006326:	e033      	b.n	8006390 <HAL_LTDC_SetWindowSize+0x84>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2234      	movs	r2, #52	; 0x34
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	3338      	adds	r3, #56	; 0x38
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  /* update horizontal stop */
  pLayerCfg->WindowX1 = XSize + pLayerCfg->WindowX0;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	441a      	add	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	605a      	str	r2, [r3, #4]

  /* update vertical stop */
  pLayerCfg->WindowY1 = YSize + pLayerCfg->WindowY0;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	441a      	add	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	60da      	str	r2, [r3, #12]

  /* Reconfigures the color frame buffer pitch in byte */
  pLayerCfg->ImageWidth = XSize;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reconfigures the frame buffer line number */
  pLayerCfg->ImageHeight = YSize;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f857 	bl	8006424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2201      	movs	r2, #1
 800637c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_LTDC_SetWindowPosition+0x1c>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e033      	b.n	800641c <HAL_LTDC_SetWindowPosition+0x84>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2234      	movs	r2, #52	; 0x34
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
 80063cc:	3338      	adds	r3, #56	; 0x38
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	441a      	add	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	441a      	add	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f811 	bl	8006424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2201      	movs	r2, #1
 8006408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006440:	4413      	add	r3, r2
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	4413      	add	r3, r2
 8006452:	3384      	adds	r3, #132	; 0x84
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	4611      	mov	r1, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	01d2      	lsls	r2, r2, #7
 8006460:	440a      	add	r2, r1
 8006462:	3284      	adds	r2, #132	; 0x84
 8006464:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006468:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647a:	4413      	add	r3, r2
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	01db      	lsls	r3, r3, #7
 8006488:	440b      	add	r3, r1
 800648a:	3384      	adds	r3, #132	; 0x84
 800648c:	4619      	mov	r1, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064a2:	4413      	add	r3, r2
 80064a4:	041b      	lsls	r3, r3, #16
 80064a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	01db      	lsls	r3, r3, #7
 80064b2:	4413      	add	r3, r2
 80064b4:	3384      	adds	r3, #132	; 0x84
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	4611      	mov	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	01d2      	lsls	r2, r2, #7
 80064c2:	440a      	add	r2, r1
 80064c4:	3284      	adds	r2, #132	; 0x84
 80064c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064da:	4413      	add	r3, r2
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	01db      	lsls	r3, r3, #7
 80064e8:	440b      	add	r3, r1
 80064ea:	3384      	adds	r3, #132	; 0x84
 80064ec:	4619      	mov	r1, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	01db      	lsls	r3, r3, #7
 80064fe:	4413      	add	r3, r2
 8006500:	3384      	adds	r3, #132	; 0x84
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	4611      	mov	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	01d2      	lsls	r2, r2, #7
 800650e:	440a      	add	r2, r1
 8006510:	3284      	adds	r2, #132	; 0x84
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	461a      	mov	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	01db      	lsls	r3, r3, #7
 8006522:	4413      	add	r3, r2
 8006524:	3384      	adds	r3, #132	; 0x84
 8006526:	461a      	mov	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	01db      	lsls	r3, r3, #7
 8006554:	4413      	add	r3, r2
 8006556:	3384      	adds	r3, #132	; 0x84
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	01db      	lsls	r3, r3, #7
 8006564:	4413      	add	r3, r2
 8006566:	3384      	adds	r3, #132	; 0x84
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006574:	461a      	mov	r2, r3
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	431a      	orrs	r2, r3
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	431a      	orrs	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4619      	mov	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	01db      	lsls	r3, r3, #7
 8006588:	440b      	add	r3, r1
 800658a:	3384      	adds	r3, #132	; 0x84
 800658c:	4619      	mov	r1, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	01db      	lsls	r3, r3, #7
 800659e:	4413      	add	r3, r2
 80065a0:	3384      	adds	r3, #132	; 0x84
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	4611      	mov	r1, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	01d2      	lsls	r2, r2, #7
 80065ae:	440a      	add	r2, r1
 80065b0:	3284      	adds	r2, #132	; 0x84
 80065b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	01db      	lsls	r3, r3, #7
 80065c2:	4413      	add	r3, r2
 80065c4:	3384      	adds	r3, #132	; 0x84
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	4413      	add	r3, r2
 80065da:	3384      	adds	r3, #132	; 0x84
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	440b      	add	r3, r1
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	4619      	mov	r1, r3
 80065ee:	4b58      	ldr	r3, [pc, #352]	; (8006750 <LTDC_SetConfig+0x32c>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	68f9      	ldr	r1, [r7, #12]
 80065fe:	6809      	ldr	r1, [r1, #0]
 8006600:	4608      	mov	r0, r1
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	01c9      	lsls	r1, r1, #7
 8006606:	4401      	add	r1, r0
 8006608:	3184      	adds	r1, #132	; 0x84
 800660a:	4313      	orrs	r3, r2
 800660c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	01db      	lsls	r3, r3, #7
 8006618:	4413      	add	r3, r2
 800661a:	3384      	adds	r3, #132	; 0x84
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	01db      	lsls	r3, r3, #7
 8006628:	4413      	add	r3, r2
 800662a:	3384      	adds	r3, #132	; 0x84
 800662c:	461a      	mov	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	01db      	lsls	r3, r3, #7
 800663c:	4413      	add	r3, r2
 800663e:	3384      	adds	r3, #132	; 0x84
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006650:	2304      	movs	r3, #4
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e01b      	b.n	800668e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d102      	bne.n	8006664 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800665e:	2303      	movs	r3, #3
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	e014      	b.n	800668e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d00b      	beq.n	8006684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006670:	2b02      	cmp	r3, #2
 8006672:	d007      	beq.n	8006684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006678:	2b03      	cmp	r3, #3
 800667a:	d003      	beq.n	8006684 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006680:	2b07      	cmp	r3, #7
 8006682:	d102      	bne.n	800668a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006684:	2302      	movs	r3, #2
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e001      	b.n	800668e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800668a:	2301      	movs	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	01db      	lsls	r3, r3, #7
 8006698:	4413      	add	r3, r2
 800669a:	3384      	adds	r3, #132	; 0x84
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	4611      	mov	r1, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	01d2      	lsls	r2, r2, #7
 80066a8:	440a      	add	r2, r1
 80066aa:	3284      	adds	r2, #132	; 0x84
 80066ac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80066b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	041a      	lsls	r2, r3, #16
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	1acb      	subs	r3, r1, r3
 80066c8:	69f9      	ldr	r1, [r7, #28]
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	3307      	adds	r3, #7
 80066d0:	68f9      	ldr	r1, [r7, #12]
 80066d2:	6809      	ldr	r1, [r1, #0]
 80066d4:	4608      	mov	r0, r1
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	01c9      	lsls	r1, r1, #7
 80066da:	4401      	add	r1, r0
 80066dc:	3184      	adds	r1, #132	; 0x84
 80066de:	4313      	orrs	r3, r2
 80066e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	01db      	lsls	r3, r3, #7
 80066ec:	4413      	add	r3, r2
 80066ee:	3384      	adds	r3, #132	; 0x84
 80066f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	440b      	add	r3, r1
 80066fe:	3384      	adds	r3, #132	; 0x84
 8006700:	4619      	mov	r1, r3
 8006702:	4b14      	ldr	r3, [pc, #80]	; (8006754 <LTDC_SetConfig+0x330>)
 8006704:	4013      	ands	r3, r2
 8006706:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	01db      	lsls	r3, r3, #7
 8006712:	4413      	add	r3, r2
 8006714:	3384      	adds	r3, #132	; 0x84
 8006716:	461a      	mov	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	4413      	add	r3, r2
 800672a:	3384      	adds	r3, #132	; 0x84
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	4611      	mov	r1, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	01d2      	lsls	r2, r2, #7
 8006738:	440a      	add	r2, r1
 800673a:	3284      	adds	r2, #132	; 0x84
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	6013      	str	r3, [r2, #0]
}
 8006742:	bf00      	nop
 8006744:	3724      	adds	r7, #36	; 0x24
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	fffff8f8 	.word	0xfffff8f8
 8006754:	fffff800 	.word	0xfffff800

08006758 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e037      	b.n	80067de <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7fa f8de 	bl	8000944 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f005 f9ba 	bl	800bb0c <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	f005 f9dc 	bl	800bb60 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	f005 f9f3 	bl	800bb9e <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0204 	orr.w	r2, r2, #4
 80067c6:	601a      	str	r2, [r3, #0]
  
  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_NAND_Init+0x90>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a06      	ldr	r2, [pc, #24]	; (80067e8 <HAL_NAND_Init+0x90>)
 80067ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d2:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	52004000 	.word	0x52004000

080067ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80067f4:	4b19      	ldr	r3, [pc, #100]	; (800685c <HAL_PWREx_ConfigSupply+0x70>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d00a      	beq.n	8006816 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006800:	4b16      	ldr	r3, [pc, #88]	; (800685c <HAL_PWREx_ConfigSupply+0x70>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d001      	beq.n	8006812 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e01f      	b.n	8006852 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	e01d      	b.n	8006852 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <HAL_PWREx_ConfigSupply+0x70>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f023 0207 	bic.w	r2, r3, #7
 800681e:	490f      	ldr	r1, [pc, #60]	; (800685c <HAL_PWREx_ConfigSupply+0x70>)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4313      	orrs	r3, r2
 8006824:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006826:	f7fb fcb3 	bl	8002190 <HAL_GetTick>
 800682a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800682c:	e009      	b.n	8006842 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800682e:	f7fb fcaf 	bl	8002190 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800683c:	d901      	bls.n	8006842 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e007      	b.n	8006852 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006842:	4b06      	ldr	r3, [pc, #24]	; (800685c <HAL_PWREx_ConfigSupply+0x70>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684e:	d1ee      	bne.n	800682e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	58024800 	.word	0x58024800

08006860 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006864:	4b05      	ldr	r3, [pc, #20]	; (800687c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800686a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800686e:	60d3      	str	r3, [r2, #12]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	58024800 	.word	0x58024800

08006880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08c      	sub	sp, #48	; 0x30
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e3ff      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8087 	beq.w	80069ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a0:	4b99      	ldr	r3, [pc, #612]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068aa:	4b97      	ldr	r3, [pc, #604]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d007      	beq.n	80068c6 <HAL_RCC_OscConfig+0x46>
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2b18      	cmp	r3, #24
 80068ba:	d110      	bne.n	80068de <HAL_RCC_OscConfig+0x5e>
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d10b      	bne.n	80068de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c6:	4b90      	ldr	r3, [pc, #576]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d06c      	beq.n	80069ac <HAL_RCC_OscConfig+0x12c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d168      	bne.n	80069ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e3d9      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e6:	d106      	bne.n	80068f6 <HAL_RCC_OscConfig+0x76>
 80068e8:	4b87      	ldr	r3, [pc, #540]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a86      	ldr	r2, [pc, #536]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80068ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e02e      	b.n	8006954 <HAL_RCC_OscConfig+0xd4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0x98>
 80068fe:	4b82      	ldr	r3, [pc, #520]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a81      	ldr	r2, [pc, #516]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	4b7f      	ldr	r3, [pc, #508]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7e      	ldr	r2, [pc, #504]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e01d      	b.n	8006954 <HAL_RCC_OscConfig+0xd4>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006920:	d10c      	bne.n	800693c <HAL_RCC_OscConfig+0xbc>
 8006922:	4b79      	ldr	r3, [pc, #484]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a78      	ldr	r2, [pc, #480]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a75      	ldr	r2, [pc, #468]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	e00b      	b.n	8006954 <HAL_RCC_OscConfig+0xd4>
 800693c:	4b72      	ldr	r3, [pc, #456]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a71      	ldr	r2, [pc, #452]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	4b6f      	ldr	r3, [pc, #444]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6e      	ldr	r2, [pc, #440]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 800694e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d013      	beq.n	8006984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fb fc18 	bl	8002190 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006964:	f7fb fc14 	bl	8002190 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b64      	cmp	r3, #100	; 0x64
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e38d      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006976:	4b64      	ldr	r3, [pc, #400]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0xe4>
 8006982:	e014      	b.n	80069ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fb fc04 	bl	8002190 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800698c:	f7fb fc00 	bl	8002190 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b64      	cmp	r3, #100	; 0x64
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e379      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800699e:	4b5a      	ldr	r3, [pc, #360]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f0      	bne.n	800698c <HAL_RCC_OscConfig+0x10c>
 80069aa:	e000      	b.n	80069ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80ae 	beq.w	8006b18 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069bc:	4b52      	ldr	r3, [pc, #328]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80069c6:	4b50      	ldr	r3, [pc, #320]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <HAL_RCC_OscConfig+0x162>
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2b18      	cmp	r3, #24
 80069d6:	d13a      	bne.n	8006a4e <HAL_RCC_OscConfig+0x1ce>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d135      	bne.n	8006a4e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069e2:	4b49      	ldr	r3, [pc, #292]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_RCC_OscConfig+0x17a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e34b      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fa:	f7fb fbf9 	bl	80021f0 <HAL_GetREVID>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d817      	bhi.n	8006a38 <HAL_RCC_OscConfig+0x1b8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d108      	bne.n	8006a22 <HAL_RCC_OscConfig+0x1a2>
 8006a10:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a18:	4a3b      	ldr	r2, [pc, #236]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a1e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a20:	e07a      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a22:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	031b      	lsls	r3, r3, #12
 8006a30:	4935      	ldr	r1, [pc, #212]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a36:	e06f      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a38:	4b33      	ldr	r3, [pc, #204]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	4930      	ldr	r1, [pc, #192]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a4c:	e064      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d045      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a56:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f023 0219 	bic.w	r2, r3, #25
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4929      	ldr	r1, [pc, #164]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a68:	f7fb fb92 	bl	8002190 <HAL_GetTick>
 8006a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a70:	f7fb fb8e 	bl	8002190 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e307      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a82:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8e:	f7fb fbaf 	bl	80021f0 <HAL_GetREVID>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d817      	bhi.n	8006acc <HAL_RCC_OscConfig+0x24c>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d108      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x236>
 8006aa4:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab2:	6053      	str	r3, [r2, #4]
 8006ab4:	e030      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	4910      	ldr	r1, [pc, #64]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
 8006aca:	e025      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	490b      	ldr	r1, [pc, #44]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	604b      	str	r3, [r1, #4]
 8006ae0:	e01a      	b.n	8006b18 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fb fb4f 	bl	8002190 <HAL_GetTick>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af4:	e00a      	b.n	8006b0c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af6:	f7fb fb4b 	bl	8002190 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d903      	bls.n	8006b0c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e2c4      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
 8006b08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b0c:	4ba4      	ldr	r3, [pc, #656]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ee      	bne.n	8006af6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80a9 	beq.w	8006c78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b26:	4b9e      	ldr	r3, [pc, #632]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b30:	4b9b      	ldr	r3, [pc, #620]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d007      	beq.n	8006b4c <HAL_RCC_OscConfig+0x2cc>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b18      	cmp	r3, #24
 8006b40:	d13a      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x338>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d135      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b4c:	4b94      	ldr	r3, [pc, #592]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_OscConfig+0x2e4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	2b80      	cmp	r3, #128	; 0x80
 8006b5e:	d001      	beq.n	8006b64 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e296      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b64:	f7fb fb44 	bl	80021f0 <HAL_GetREVID>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d817      	bhi.n	8006ba2 <HAL_RCC_OscConfig+0x322>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d108      	bne.n	8006b8c <HAL_RCC_OscConfig+0x30c>
 8006b7a:	4b89      	ldr	r3, [pc, #548]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b82:	4a87      	ldr	r2, [pc, #540]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b8a:	e075      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b8c:	4b84      	ldr	r3, [pc, #528]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	069b      	lsls	r3, r3, #26
 8006b9a:	4981      	ldr	r1, [pc, #516]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ba0:	e06a      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ba2:	4b7f      	ldr	r3, [pc, #508]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	061b      	lsls	r3, r3, #24
 8006bb0:	497b      	ldr	r1, [pc, #492]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bb6:	e05f      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d042      	beq.n	8006c46 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006bc0:	4b77      	ldr	r3, [pc, #476]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a76      	ldr	r2, [pc, #472]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bcc:	f7fb fae0 	bl	8002190 <HAL_GetTick>
 8006bd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006bd4:	f7fb fadc 	bl	8002190 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e255      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006be6:	4b6e      	ldr	r3, [pc, #440]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf2:	f7fb fafd 	bl	80021f0 <HAL_GetREVID>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d817      	bhi.n	8006c30 <HAL_RCC_OscConfig+0x3b0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d108      	bne.n	8006c1a <HAL_RCC_OscConfig+0x39a>
 8006c08:	4b65      	ldr	r3, [pc, #404]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c10:	4a63      	ldr	r2, [pc, #396]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c16:	6053      	str	r3, [r2, #4]
 8006c18:	e02e      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
 8006c1a:	4b61      	ldr	r3, [pc, #388]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	069b      	lsls	r3, r3, #26
 8006c28:	495d      	ldr	r1, [pc, #372]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
 8006c2e:	e023      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
 8006c30:	4b5b      	ldr	r3, [pc, #364]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	061b      	lsls	r3, r3, #24
 8006c3e:	4958      	ldr	r1, [pc, #352]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60cb      	str	r3, [r1, #12]
 8006c44:	e018      	b.n	8006c78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c46:	4b56      	ldr	r3, [pc, #344]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a55      	ldr	r2, [pc, #340]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fb fa9d 	bl	8002190 <HAL_GetTick>
 8006c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c5a:	f7fb fa99 	bl	8002190 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e212      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006c6c:	4b4c      	ldr	r3, [pc, #304]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d036      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d019      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8c:	4b44      	ldr	r3, [pc, #272]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c90:	4a43      	ldr	r2, [pc, #268]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c98:	f7fb fa7a 	bl	8002190 <HAL_GetTick>
 8006c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fb fa76 	bl	8002190 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e1ef      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006cb2:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x420>
 8006cbe:	e018      	b.n	8006cf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc0:	4b37      	ldr	r3, [pc, #220]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc4:	4a36      	ldr	r2, [pc, #216]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ccc:	f7fb fa60 	bl	8002190 <HAL_GetTick>
 8006cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd4:	f7fb fa5c 	bl	8002190 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e1d5      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ce6:	4b2e      	ldr	r3, [pc, #184]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d036      	beq.n	8006d6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d019      	beq.n	8006d3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d06:	4b26      	ldr	r3, [pc, #152]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a25      	ldr	r2, [pc, #148]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d12:	f7fb fa3d 	bl	8002190 <HAL_GetTick>
 8006d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d1a:	f7fb fa39 	bl	8002190 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e1b2      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d2c:	4b1c      	ldr	r3, [pc, #112]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x49a>
 8006d38:	e018      	b.n	8006d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d3a:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d46:	f7fb fa23 	bl	8002190 <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006d4e:	f7fb fa1f 	bl	8002190 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e198      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006d60:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <HAL_RCC_OscConfig+0x520>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8085 	beq.w	8006e84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <HAL_RCC_OscConfig+0x524>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a09      	ldr	r2, [pc, #36]	; (8006da4 <HAL_RCC_OscConfig+0x524>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d86:	f7fb fa03 	bl	8002190 <HAL_GetTick>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d8c:	e00c      	b.n	8006da8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d8e:	f7fb f9ff 	bl	8002190 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b64      	cmp	r3, #100	; 0x64
 8006d9a:	d905      	bls.n	8006da8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e178      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
 8006da0:	58024400 	.word	0x58024400
 8006da4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006da8:	4b96      	ldr	r3, [pc, #600]	; (8007004 <HAL_RCC_OscConfig+0x784>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ec      	beq.n	8006d8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d106      	bne.n	8006dca <HAL_RCC_OscConfig+0x54a>
 8006dbc:	4b92      	ldr	r3, [pc, #584]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc0:	4a91      	ldr	r2, [pc, #580]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc8:	e02d      	b.n	8006e26 <HAL_RCC_OscConfig+0x5a6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10c      	bne.n	8006dec <HAL_RCC_OscConfig+0x56c>
 8006dd2:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	4a8c      	ldr	r2, [pc, #560]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dde:	4b8a      	ldr	r3, [pc, #552]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	4a89      	ldr	r2, [pc, #548]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006de4:	f023 0304 	bic.w	r3, r3, #4
 8006de8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dea:	e01c      	b.n	8006e26 <HAL_RCC_OscConfig+0x5a6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d10c      	bne.n	8006e0e <HAL_RCC_OscConfig+0x58e>
 8006df4:	4b84      	ldr	r3, [pc, #528]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	4a83      	ldr	r2, [pc, #524]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006dfa:	f043 0304 	orr.w	r3, r3, #4
 8006dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006e00:	4b81      	ldr	r3, [pc, #516]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	4a80      	ldr	r2, [pc, #512]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0c:	e00b      	b.n	8006e26 <HAL_RCC_OscConfig+0x5a6>
 8006e0e:	4b7e      	ldr	r3, [pc, #504]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a7d      	ldr	r2, [pc, #500]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	4b7b      	ldr	r3, [pc, #492]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a7a      	ldr	r2, [pc, #488]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d015      	beq.n	8006e5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2e:	f7fb f9af 	bl	8002190 <HAL_GetTick>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fb f9ab 	bl	8002190 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e122      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e4c:	4b6e      	ldr	r3, [pc, #440]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ee      	beq.n	8006e36 <HAL_RCC_OscConfig+0x5b6>
 8006e58:	e014      	b.n	8006e84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5a:	f7fb f999 	bl	8002190 <HAL_GetTick>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e60:	e00a      	b.n	8006e78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f7fb f995 	bl	8002190 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e10c      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e78:	4b63      	ldr	r3, [pc, #396]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ee      	bne.n	8006e62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8101 	beq.w	8007090 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e8e:	4b5e      	ldr	r3, [pc, #376]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e96:	2b18      	cmp	r3, #24
 8006e98:	f000 80bc 	beq.w	8007014 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f040 8095 	bne.w	8006fd0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ea6:	4b58      	ldr	r3, [pc, #352]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a57      	ldr	r2, [pc, #348]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb2:	f7fb f96d 	bl	8002190 <HAL_GetTick>
 8006eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eba:	f7fb f969 	bl	8002190 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0e2      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ecc:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1f0      	bne.n	8006eba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006edc:	4b4b      	ldr	r3, [pc, #300]	; (800700c <HAL_RCC_OscConfig+0x78c>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ee8:	0112      	lsls	r2, r2, #4
 8006eea:	430a      	orrs	r2, r1
 8006eec:	4946      	ldr	r1, [pc, #280]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	628b      	str	r3, [r1, #40]	; 0x28
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	3b01      	subs	r3, #1
 8006f02:	025b      	lsls	r3, r3, #9
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f22:	4939      	ldr	r1, [pc, #228]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006f28:	4b37      	ldr	r3, [pc, #220]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a36      	ldr	r2, [pc, #216]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f34:	4b34      	ldr	r3, [pc, #208]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f38:	4b35      	ldr	r3, [pc, #212]	; (8007010 <HAL_RCC_OscConfig+0x790>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006f40:	00d2      	lsls	r2, r2, #3
 8006f42:	4931      	ldr	r1, [pc, #196]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006f48:	4b2f      	ldr	r3, [pc, #188]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	f023 020c 	bic.w	r2, r3, #12
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	492c      	ldr	r1, [pc, #176]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006f5a:	4b2b      	ldr	r3, [pc, #172]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f023 0202 	bic.w	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	4928      	ldr	r1, [pc, #160]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f6c:	4b26      	ldr	r3, [pc, #152]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a25      	ldr	r2, [pc, #148]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f84:	4b20      	ldr	r3, [pc, #128]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f90:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a19      	ldr	r2, [pc, #100]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa8:	f7fb f8f2 	bl	8002190 <HAL_GetTick>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb0:	f7fb f8ee 	bl	8002190 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e067      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x730>
 8006fce:	e05f      	b.n	8007090 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a0c      	ldr	r2, [pc, #48]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fb f8d8 	bl	8002190 <HAL_GetTick>
 8006fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fb f8d4 	bl	8002190 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e04d      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ff6:	4b04      	ldr	r3, [pc, #16]	; (8007008 <HAL_RCC_OscConfig+0x788>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x764>
 8007002:	e045      	b.n	8007090 <HAL_RCC_OscConfig+0x810>
 8007004:	58024800 	.word	0x58024800
 8007008:	58024400 	.word	0x58024400
 800700c:	fffffc0c 	.word	0xfffffc0c
 8007010:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007014:	4b21      	ldr	r3, [pc, #132]	; (800709c <HAL_RCC_OscConfig+0x81c>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800701a:	4b20      	ldr	r3, [pc, #128]	; (800709c <HAL_RCC_OscConfig+0x81c>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2b01      	cmp	r3, #1
 8007026:	d031      	beq.n	800708c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f003 0203 	and.w	r2, r3, #3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d12a      	bne.n	800708c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d122      	bne.n	800708c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007052:	429a      	cmp	r2, r3
 8007054:	d11a      	bne.n	800708c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	0a5b      	lsrs	r3, r3, #9
 800705a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007064:	429a      	cmp	r2, r3
 8007066:	d111      	bne.n	800708c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007076:	429a      	cmp	r2, r3
 8007078:	d108      	bne.n	800708c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	0e1b      	lsrs	r3, r3, #24
 800707e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007088:	429a      	cmp	r2, r3
 800708a:	d001      	beq.n	8007090 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	; 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	58024400 	.word	0x58024400

080070a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e19c      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070b4:	4b8a      	ldr	r3, [pc, #552]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d910      	bls.n	80070e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c2:	4b87      	ldr	r3, [pc, #540]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f023 020f 	bic.w	r2, r3, #15
 80070ca:	4985      	ldr	r1, [pc, #532]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	4b83      	ldr	r3, [pc, #524]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e184      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	4b7b      	ldr	r3, [pc, #492]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d908      	bls.n	8007112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007100:	4b78      	ldr	r3, [pc, #480]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	4975      	ldr	r1, [pc, #468]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800710e:	4313      	orrs	r3, r2
 8007110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d010      	beq.n	8007140 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695a      	ldr	r2, [r3, #20]
 8007122:	4b70      	ldr	r3, [pc, #448]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800712a:	429a      	cmp	r2, r3
 800712c:	d908      	bls.n	8007140 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800712e:	4b6d      	ldr	r3, [pc, #436]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	496a      	ldr	r1, [pc, #424]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800713c:	4313      	orrs	r3, r2
 800713e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0310 	and.w	r3, r3, #16
 8007148:	2b00      	cmp	r3, #0
 800714a:	d010      	beq.n	800716e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	4b64      	ldr	r3, [pc, #400]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007158:	429a      	cmp	r2, r3
 800715a:	d908      	bls.n	800716e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800715c:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	495e      	ldr	r1, [pc, #376]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800716a:	4313      	orrs	r3, r2
 800716c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d010      	beq.n	800719c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69da      	ldr	r2, [r3, #28]
 800717e:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007186:	429a      	cmp	r2, r3
 8007188:	d908      	bls.n	800719c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800718a:	4b56      	ldr	r3, [pc, #344]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	4953      	ldr	r1, [pc, #332]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007198:	4313      	orrs	r3, r2
 800719a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d010      	beq.n	80071ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d908      	bls.n	80071ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071b8:	4b4a      	ldr	r3, [pc, #296]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f023 020f 	bic.w	r2, r3, #15
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4947      	ldr	r1, [pc, #284]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d055      	beq.n	8007282 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80071d6:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	4940      	ldr	r1, [pc, #256]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d107      	bne.n	8007200 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071f0:	4b3c      	ldr	r3, [pc, #240]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d121      	bne.n	8007240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0f6      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b03      	cmp	r3, #3
 8007206:	d107      	bne.n	8007218 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007208:	4b36      	ldr	r3, [pc, #216]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d115      	bne.n	8007240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e0ea      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d107      	bne.n	8007230 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007220:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d109      	bne.n	8007240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e0de      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007230:	4b2c      	ldr	r3, [pc, #176]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e0d6      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007240:	4b28      	ldr	r3, [pc, #160]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f023 0207 	bic.w	r2, r3, #7
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	4925      	ldr	r1, [pc, #148]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 800724e:	4313      	orrs	r3, r2
 8007250:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007252:	f7fa ff9d 	bl	8002190 <HAL_GetTick>
 8007256:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007258:	e00a      	b.n	8007270 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800725a:	f7fa ff99 	bl	8002190 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	f241 3288 	movw	r2, #5000	; 0x1388
 8007268:	4293      	cmp	r3, r2
 800726a:	d901      	bls.n	8007270 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0be      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007270:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	429a      	cmp	r2, r3
 8007280:	d1eb      	bne.n	800725a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d010      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	4b14      	ldr	r3, [pc, #80]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	429a      	cmp	r2, r3
 800729c:	d208      	bcs.n	80072b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800729e:	4b11      	ldr	r3, [pc, #68]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f023 020f 	bic.w	r2, r3, #15
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	490e      	ldr	r1, [pc, #56]	; (80072e4 <HAL_RCC_ClockConfig+0x244>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d214      	bcs.n	80072e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b08      	ldr	r3, [pc, #32]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f023 020f 	bic.w	r2, r3, #15
 80072c6:	4906      	ldr	r1, [pc, #24]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_RCC_ClockConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d005      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e086      	b.n	80073ee <HAL_RCC_ClockConfig+0x34e>
 80072e0:	52002000 	.word	0x52002000
 80072e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	4b3f      	ldr	r3, [pc, #252]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007300:	429a      	cmp	r2, r3
 8007302:	d208      	bcs.n	8007316 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007304:	4b3c      	ldr	r3, [pc, #240]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	4939      	ldr	r1, [pc, #228]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007312:	4313      	orrs	r3, r2
 8007314:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d010      	beq.n	8007344 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	4b34      	ldr	r3, [pc, #208]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800732e:	429a      	cmp	r2, r3
 8007330:	d208      	bcs.n	8007344 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007332:	4b31      	ldr	r3, [pc, #196]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	492e      	ldr	r1, [pc, #184]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007340:	4313      	orrs	r3, r2
 8007342:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800735c:	429a      	cmp	r2, r3
 800735e:	d208      	bcs.n	8007372 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	4922      	ldr	r1, [pc, #136]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 800736e:	4313      	orrs	r3, r2
 8007370:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800738a:	429a      	cmp	r2, r3
 800738c:	d208      	bcs.n	80073a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	4917      	ldr	r1, [pc, #92]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 800739c:	4313      	orrs	r3, r2
 800739e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073a0:	f000 f834 	bl	800740c <HAL_RCC_GetSysClockFreq>
 80073a4:	4602      	mov	r2, r0
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	0a1b      	lsrs	r3, r3, #8
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	4912      	ldr	r1, [pc, #72]	; (80073fc <HAL_RCC_ClockConfig+0x35c>)
 80073b2:	5ccb      	ldrb	r3, [r1, r3]
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
 80073bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073be:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <HAL_RCC_ClockConfig+0x358>)
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <HAL_RCC_ClockConfig+0x35c>)
 80073c8:	5cd3      	ldrb	r3, [r2, r3]
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
 80073d4:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <HAL_RCC_ClockConfig+0x360>)
 80073d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073d8:	4a0a      	ldr	r2, [pc, #40]	; (8007404 <HAL_RCC_ClockConfig+0x364>)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <HAL_RCC_ClockConfig+0x368>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fa faa4 	bl	8001930 <HAL_InitTick>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	58024400 	.word	0x58024400
 80073fc:	08014858 	.word	0x08014858
 8007400:	20000004 	.word	0x20000004
 8007404:	20000000 	.word	0x20000000
 8007408:	20000008 	.word	0x20000008

0800740c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007412:	4bb3      	ldr	r3, [pc, #716]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800741a:	2b18      	cmp	r3, #24
 800741c:	f200 8155 	bhi.w	80076ca <HAL_RCC_GetSysClockFreq+0x2be>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800748d 	.word	0x0800748d
 800742c:	080076cb 	.word	0x080076cb
 8007430:	080076cb 	.word	0x080076cb
 8007434:	080076cb 	.word	0x080076cb
 8007438:	080076cb 	.word	0x080076cb
 800743c:	080076cb 	.word	0x080076cb
 8007440:	080076cb 	.word	0x080076cb
 8007444:	080076cb 	.word	0x080076cb
 8007448:	080074b3 	.word	0x080074b3
 800744c:	080076cb 	.word	0x080076cb
 8007450:	080076cb 	.word	0x080076cb
 8007454:	080076cb 	.word	0x080076cb
 8007458:	080076cb 	.word	0x080076cb
 800745c:	080076cb 	.word	0x080076cb
 8007460:	080076cb 	.word	0x080076cb
 8007464:	080076cb 	.word	0x080076cb
 8007468:	080074b9 	.word	0x080074b9
 800746c:	080076cb 	.word	0x080076cb
 8007470:	080076cb 	.word	0x080076cb
 8007474:	080076cb 	.word	0x080076cb
 8007478:	080076cb 	.word	0x080076cb
 800747c:	080076cb 	.word	0x080076cb
 8007480:	080076cb 	.word	0x080076cb
 8007484:	080076cb 	.word	0x080076cb
 8007488:	080074bf 	.word	0x080074bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800748c:	4b94      	ldr	r3, [pc, #592]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007498:	4b91      	ldr	r3, [pc, #580]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	4a90      	ldr	r2, [pc, #576]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80074aa:	e111      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80074ac:	4b8d      	ldr	r3, [pc, #564]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074ae:	61bb      	str	r3, [r7, #24]
    break;
 80074b0:	e10e      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80074b2:	4b8d      	ldr	r3, [pc, #564]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80074b4:	61bb      	str	r3, [r7, #24]
    break;
 80074b6:	e10b      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80074b8:	4b8c      	ldr	r3, [pc, #560]	; (80076ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074ba:	61bb      	str	r3, [r7, #24]
    break;
 80074bc:	e108      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074be:	4b88      	ldr	r3, [pc, #544]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074c8:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	091b      	lsrs	r3, r3, #4
 80074ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074d4:	4b82      	ldr	r3, [pc, #520]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074de:	4b80      	ldr	r3, [pc, #512]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80e1 	beq.w	80076c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b02      	cmp	r3, #2
 8007506:	f000 8083 	beq.w	8007610 <HAL_RCC_GetSysClockFreq+0x204>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b02      	cmp	r3, #2
 800750e:	f200 80a1 	bhi.w	8007654 <HAL_RCC_GetSysClockFreq+0x248>
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_RCC_GetSysClockFreq+0x114>
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d056      	beq.n	80075cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800751e:	e099      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007520:	4b6f      	ldr	r3, [pc, #444]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02d      	beq.n	8007588 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800752c:	4b6c      	ldr	r3, [pc, #432]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	08db      	lsrs	r3, r3, #3
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	4a6b      	ldr	r2, [pc, #428]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007538:	fa22 f303 	lsr.w	r3, r2, r3
 800753c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b62      	ldr	r3, [pc, #392]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a02 	vldr	s12, [r7, #8]
 800756a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80076f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007586:	e087      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a58 	vldr	s13, [pc, #352]	; 80076f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b51      	ldr	r3, [pc, #324]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80076f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	e065      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80076f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b40      	ldr	r3, [pc, #256]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80076f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760e:	e043      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80076fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b2f      	ldr	r3, [pc, #188]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a02 	vldr	s12, [r7, #8]
 8007636:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80076f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007652:	e021      	b.n	8007698 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80076f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a02 	vldr	s12, [r7, #8]
 800767a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80076f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007696:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769c:	0a5b      	lsrs	r3, r3, #9
 800769e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a2:	3301      	adds	r3, #1
 80076a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076bc:	ee17 3a90 	vmov	r3, s15
 80076c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80076c2:	e005      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61bb      	str	r3, [r7, #24]
    break;
 80076c8:	e002      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80076ca:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076cc:	61bb      	str	r3, [r7, #24]
    break;
 80076ce:	bf00      	nop
  }

  return sysclockfreq;
 80076d0:	69bb      	ldr	r3, [r7, #24]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3724      	adds	r7, #36	; 0x24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	58024400 	.word	0x58024400
 80076e4:	03d09000 	.word	0x03d09000
 80076e8:	003d0900 	.word	0x003d0900
 80076ec:	017d7840 	.word	0x017d7840
 80076f0:	46000000 	.word	0x46000000
 80076f4:	4c742400 	.word	0x4c742400
 80076f8:	4a742400 	.word	0x4a742400
 80076fc:	4bbebc20 	.word	0x4bbebc20

08007700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007706:	f7ff fe81 	bl	800740c <HAL_RCC_GetSysClockFreq>
 800770a:	4602      	mov	r2, r0
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <HAL_RCC_GetHCLKFreq+0x50>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	f003 030f 	and.w	r3, r3, #15
 8007716:	490f      	ldr	r1, [pc, #60]	; (8007754 <HAL_RCC_GetHCLKFreq+0x54>)
 8007718:	5ccb      	ldrb	r3, [r1, r3]
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <HAL_RCC_GetHCLKFreq+0x50>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <HAL_RCC_GetHCLKFreq+0x54>)
 800772e:	5cd3      	ldrb	r3, [r2, r3]
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	4a07      	ldr	r2, [pc, #28]	; (8007758 <HAL_RCC_GetHCLKFreq+0x58>)
 800773c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800773e:	4a07      	ldr	r2, [pc, #28]	; (800775c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <HAL_RCC_GetHCLKFreq+0x58>)
 8007746:	681b      	ldr	r3, [r3, #0]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	58024400 	.word	0x58024400
 8007754:	08014858 	.word	0x08014858
 8007758:	20000004 	.word	0x20000004
 800775c:	20000000 	.word	0x20000000

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007764:	f7ff ffcc 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	58024400 	.word	0x58024400
 8007788:	08014858 	.word	0x08014858

0800778c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007790:	f7ff ffb6 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	4904      	ldr	r1, [pc, #16]	; (80077b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58024400 	.word	0x58024400
 80077b4:	08014858 	.word	0x08014858

080077b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	223f      	movs	r2, #63	; 0x3f
 80077c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0207 	and.w	r2, r3, #7
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80077e0:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80077ec:	4b11      	ldr	r3, [pc, #68]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007804:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007810:	4b08      	ldr	r3, [pc, #32]	; (8007834 <HAL_RCC_GetClockConfig+0x7c>)
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_RCC_GetClockConfig+0x80>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	601a      	str	r2, [r3, #0]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	58024400 	.word	0x58024400
 8007838:	52002000 	.word	0x52002000

0800783c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007844:	2300      	movs	r3, #0
 8007846:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007848:	2300      	movs	r3, #0
 800784a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03f      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007860:	d02a      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007866:	d824      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800786c:	d018      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800786e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007872:	d81e      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800787c:	d007      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800787e:	e018      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007880:	4bab      	ldr	r3, [pc, #684]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	4aaa      	ldr	r2, [pc, #680]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800788c:	e015      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	2102      	movs	r1, #2
 8007894:	4618      	mov	r0, r3
 8007896:	f001 f9bf 	bl	8008c18 <RCCEx_PLL2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800789e:	e00c      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	2102      	movs	r1, #2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f001 fa68 	bl	8008d7c <RCCEx_PLL3_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078b0:	e003      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
      break;
 80078b6:	e000      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80078b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ba:	7dfb      	ldrb	r3, [r7, #23]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d109      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078c0:	4b9b      	ldr	r3, [pc, #620]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078cc:	4998      	ldr	r1, [pc, #608]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	650b      	str	r3, [r1, #80]	; 0x50
 80078d2:	e001      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
 80078d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d03d      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d826      	bhi.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078ec:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007909 	.word	0x08007909
 80078f8:	08007917 	.word	0x08007917
 80078fc:	08007929 	.word	0x08007929
 8007900:	08007941 	.word	0x08007941
 8007904:	08007941 	.word	0x08007941
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007908:	4b89      	ldr	r3, [pc, #548]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800790a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790c:	4a88      	ldr	r2, [pc, #544]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800790e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007914:	e015      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	2100      	movs	r1, #0
 800791c:	4618      	mov	r0, r3
 800791e:	f001 f97b 	bl	8008c18 <RCCEx_PLL2_Config>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007926:	e00c      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3324      	adds	r3, #36	; 0x24
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f001 fa24 	bl	8008d7c <RCCEx_PLL3_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007938:	e003      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	75fb      	strb	r3, [r7, #23]
      break;
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d109      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007948:	4b79      	ldr	r3, [pc, #484]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794c:	f023 0207 	bic.w	r2, r3, #7
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	4976      	ldr	r1, [pc, #472]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007956:	4313      	orrs	r3, r2
 8007958:	650b      	str	r3, [r1, #80]	; 0x50
 800795a:	e001      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007968:	2b00      	cmp	r3, #0
 800796a:	d042      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007974:	d02b      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	d825      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800797c:	2bc0      	cmp	r3, #192	; 0xc0
 800797e:	d028      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007980:	2bc0      	cmp	r3, #192	; 0xc0
 8007982:	d821      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007984:	2b80      	cmp	r3, #128	; 0x80
 8007986:	d016      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d81d      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007990:	2b40      	cmp	r3, #64	; 0x40
 8007992:	d007      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007994:	e018      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007996:	4b66      	ldr	r3, [pc, #408]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4a65      	ldr	r2, [pc, #404]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800799c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079a2:	e017      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f934 	bl	8008c18 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079b4:	e00e      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 f9dd 	bl	8008d7c <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079c6:	e005      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e002      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079ce:	bf00      	nop
 80079d0:	e000      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079da:	4b55      	ldr	r3, [pc, #340]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	4952      	ldr	r1, [pc, #328]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	650b      	str	r3, [r1, #80]	; 0x50
 80079ec:	e001      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d049      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a08:	d030      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a0e:	d82a      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a14:	d02c      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a1a:	d824      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a20:	d018      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a26:	d81e      	bhi.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a30:	d007      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007a32:	e018      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a34:	4b3e      	ldr	r3, [pc, #248]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a3d      	ldr	r2, [pc, #244]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a40:	e017      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3304      	adds	r3, #4
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f8e5 	bl	8008c18 <RCCEx_PLL2_Config>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a52:	e00e      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3324      	adds	r3, #36	; 0x24
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 f98e 	bl	8008d7c <RCCEx_PLL3_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a64:	e005      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6a:	e002      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e000      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a78:	4b2d      	ldr	r3, [pc, #180]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a86:	492a      	ldr	r1, [pc, #168]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a8c:	e001      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d04c      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aa8:	d030      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aae:	d82a      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ab0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ab4:	d02c      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007ab6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007aba:	d824      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac0:	d018      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac6:	d81e      	bhi.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ad0:	d007      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007ad2:	e018      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad4:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ae0:	e017      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f001 f895 	bl	8008c18 <RCCEx_PLL2_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007af2:	e00e      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3324      	adds	r3, #36	; 0x24
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 f93e 	bl	8008d7c <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b04:	e005      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	e002      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10d      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b26:	4902      	ldr	r1, [pc, #8]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007b2c:	e004      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007b2e:	bf00      	nop
 8007b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d032      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d01c      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d817      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d00c      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d813      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d016      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d10f      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b60:	4baf      	ldr	r3, [pc, #700]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	4aae      	ldr	r2, [pc, #696]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b6c:	e00e      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3304      	adds	r3, #4
 8007b72:	2102      	movs	r1, #2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 f84f 	bl	8008c18 <RCCEx_PLL2_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b7e:	e005      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
      break;
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b92:	4ba3      	ldr	r3, [pc, #652]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9e:	49a0      	ldr	r1, [pc, #640]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ba4:	e001      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d047      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bbe:	d030      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc4:	d82a      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007bc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bca:	d02c      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007bcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bd0:	d824      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd6:	d018      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bdc:	d81e      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d007      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007be8:	e018      	b.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bea:	4b8d      	ldr	r3, [pc, #564]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	4a8c      	ldr	r2, [pc, #560]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007bf6:	e017      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 f80a 	bl	8008c18 <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c08:	e00e      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3324      	adds	r3, #36	; 0x24
 8007c0e:	2100      	movs	r1, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f001 f8b3 	bl	8008d7c <RCCEx_PLL3_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c1a:	e005      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e002      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c2e:	4b7c      	ldr	r3, [pc, #496]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3a:	4979      	ldr	r1, [pc, #484]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c40:	e001      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d049      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c5a:	d02e      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c60:	d828      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c66:	d02a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c6c:	d822      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c72:	d026      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007c74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c78:	d81c      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c7e:	d010      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c84:	d816      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01d      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d111      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3304      	adds	r3, #4
 8007c94:	2101      	movs	r1, #1
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 ffbe 	bl	8008c18 <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ca0:	e012      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f867 	bl	8008d7c <RCCEx_PLL3_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007cb2:	e009      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	e006      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e004      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cce:	4b54      	ldr	r3, [pc, #336]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cda:	4951      	ldr	r1, [pc, #324]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	650b      	str	r3, [r1, #80]	; 0x50
 8007ce0:	e001      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d04b      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cfc:	d02e      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d02:	d828      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d08:	d02a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0e:	d822      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d14:	d026      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d1a:	d81c      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d20:	d010      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d816      	bhi.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01d      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d30:	d111      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3304      	adds	r3, #4
 8007d36:	2101      	movs	r1, #1
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 ff6d 	bl	8008c18 <RCCEx_PLL2_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d42:	e012      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3324      	adds	r3, #36	; 0x24
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f816 	bl	8008d7c <RCCEx_PLL3_Config>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d54:	e009      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5a:	e006      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e004      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d60:	bf00      	nop
 8007d62:	e002      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d64:	bf00      	nop
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d70:	4b2b      	ldr	r3, [pc, #172]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d74:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d7e:	4928      	ldr	r1, [pc, #160]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	658b      	str	r3, [r1, #88]	; 0x58
 8007d84:	e001      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d02f      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9e:	d00e      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da4:	d814      	bhi.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d015      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dae:	d10f      	bne.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db0:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a1a      	ldr	r2, [pc, #104]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007dbc:	e00c      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 ff27 	bl	8008c18 <RCCEx_PLL2_Config>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007dce:	e003      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dea:	490d      	ldr	r1, [pc, #52]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	650b      	str	r3, [r1, #80]	; 0x50
 8007df0:	e001      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d033      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d81c      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007e0a:	a201      	add	r2, pc, #4	; (adr r2, 8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e4b 	.word	0x08007e4b
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e33 	.word	0x08007e33
 8007e1c:	08007e4b 	.word	0x08007e4b
 8007e20:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e24:	4bb8      	ldr	r3, [pc, #736]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	4ab7      	ldr	r2, [pc, #732]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e30:	e00c      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	2102      	movs	r1, #2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 feed 	bl	8008c18 <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e42:	e003      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]
      break;
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e52:	4bad      	ldr	r3, [pc, #692]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e56:	f023 0203 	bic.w	r2, r3, #3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	49aa      	ldr	r1, [pc, #680]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e64:	e001      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8086 	beq.w	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e78:	4ba4      	ldr	r3, [pc, #656]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4aa3      	ldr	r2, [pc, #652]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e84:	f7fa f984 	bl	8002190 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e8a:	e009      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e8c:	f7fa f980 	bl	8002190 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b64      	cmp	r3, #100	; 0x64
 8007e98:	d902      	bls.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	75fb      	strb	r3, [r7, #23]
        break;
 8007e9e:	e005      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ea0:	4b9a      	ldr	r3, [pc, #616]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0ef      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d166      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007eb2:	4b95      	ldr	r3, [pc, #596]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ebc:	4053      	eors	r3, r2
 8007ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d013      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ec6:	4b90      	ldr	r3, [pc, #576]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ece:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ed0:	4b8d      	ldr	r3, [pc, #564]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	4a8c      	ldr	r2, [pc, #560]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eda:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007edc:	4b8a      	ldr	r3, [pc, #552]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	4a89      	ldr	r2, [pc, #548]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ee8:	4a87      	ldr	r2, [pc, #540]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef8:	d115      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efa:	f7fa f949 	bl	8002190 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f00:	e00b      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f02:	f7fa f945 	bl	8002190 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d902      	bls.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	75fb      	strb	r3, [r7, #23]
            break;
 8007f18:	e005      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f1a:	4b7b      	ldr	r3, [pc, #492]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0ed      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d126      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3a:	d10d      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007f3c:	4b72      	ldr	r3, [pc, #456]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f4a:	0919      	lsrs	r1, r3, #4
 8007f4c:	4b70      	ldr	r3, [pc, #448]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007f4e:	400b      	ands	r3, r1
 8007f50:	496d      	ldr	r1, [pc, #436]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	610b      	str	r3, [r1, #16]
 8007f56:	e005      	b.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007f58:	4b6b      	ldr	r3, [pc, #428]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	4a6a      	ldr	r2, [pc, #424]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f62:	6113      	str	r3, [r2, #16]
 8007f64:	4b68      	ldr	r3, [pc, #416]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f72:	4965      	ldr	r1, [pc, #404]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	670b      	str	r3, [r1, #112]	; 0x70
 8007f78:	e004      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	75bb      	strb	r3, [r7, #22]
 8007f7e:	e001      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d07e      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f94:	2b28      	cmp	r3, #40	; 0x28
 8007f96:	d867      	bhi.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	0800806f 	.word	0x0800806f
 8007fa4:	08008069 	.word	0x08008069
 8007fa8:	08008069 	.word	0x08008069
 8007fac:	08008069 	.word	0x08008069
 8007fb0:	08008069 	.word	0x08008069
 8007fb4:	08008069 	.word	0x08008069
 8007fb8:	08008069 	.word	0x08008069
 8007fbc:	08008069 	.word	0x08008069
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	08008069 	.word	0x08008069
 8007fc8:	08008069 	.word	0x08008069
 8007fcc:	08008069 	.word	0x08008069
 8007fd0:	08008069 	.word	0x08008069
 8007fd4:	08008069 	.word	0x08008069
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008069 	.word	0x08008069
 8007fe0:	08008057 	.word	0x08008057
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	08008069 	.word	0x08008069
 8007fec:	08008069 	.word	0x08008069
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008069 	.word	0x08008069
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008069 	.word	0x08008069
 8008000:	0800806f 	.word	0x0800806f
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008069 	.word	0x08008069
 8008010:	08008069 	.word	0x08008069
 8008014:	08008069 	.word	0x08008069
 8008018:	08008069 	.word	0x08008069
 800801c:	08008069 	.word	0x08008069
 8008020:	0800806f 	.word	0x0800806f
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
 8008034:	08008069 	.word	0x08008069
 8008038:	08008069 	.word	0x08008069
 800803c:	08008069 	.word	0x08008069
 8008040:	0800806f 	.word	0x0800806f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fde4 	bl	8008c18 <RCCEx_PLL2_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008054:	e00c      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3324      	adds	r3, #36	; 0x24
 800805a:	2101      	movs	r1, #1
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fe8d 	bl	8008d7c <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008066:	e003      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
      break;
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800806e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008076:	4b24      	ldr	r3, [pc, #144]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008082:	4921      	ldr	r1, [pc, #132]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008084:	4313      	orrs	r3, r2
 8008086:	654b      	str	r3, [r1, #84]	; 0x54
 8008088:	e001      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d03e      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809e:	2b05      	cmp	r3, #5
 80080a0:	d820      	bhi.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080eb 	.word	0x080080eb
 80080ac:	080080c1 	.word	0x080080c1
 80080b0:	080080d3 	.word	0x080080d3
 80080b4:	080080eb 	.word	0x080080eb
 80080b8:	080080eb 	.word	0x080080eb
 80080bc:	080080eb 	.word	0x080080eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	2101      	movs	r1, #1
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fda6 	bl	8008c18 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080d0:	e00c      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	2101      	movs	r1, #1
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fe4f 	bl	8008d7c <RCCEx_PLL3_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080e2:	e003      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
      break;
 80080e8:	e000      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80080ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d110      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80080f2:	4b05      	ldr	r3, [pc, #20]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f6:	f023 0207 	bic.w	r2, r3, #7
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fe:	4902      	ldr	r1, [pc, #8]	; (8008108 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008100:	4313      	orrs	r3, r2
 8008102:	654b      	str	r3, [r1, #84]	; 0x54
 8008104:	e008      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008106:	bf00      	nop
 8008108:	58024400 	.word	0x58024400
 800810c:	58024800 	.word	0x58024800
 8008110:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d039      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800812a:	2b05      	cmp	r3, #5
 800812c:	d820      	bhi.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008177 	.word	0x08008177
 8008138:	0800814d 	.word	0x0800814d
 800813c:	0800815f 	.word	0x0800815f
 8008140:	08008177 	.word	0x08008177
 8008144:	08008177 	.word	0x08008177
 8008148:	08008177 	.word	0x08008177
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	2101      	movs	r1, #1
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fd60 	bl	8008c18 <RCCEx_PLL2_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800815c:	e00c      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3324      	adds	r3, #36	; 0x24
 8008162:	2101      	movs	r1, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fe09 	bl	8008d7c <RCCEx_PLL3_Config>
 800816a:	4603      	mov	r3, r0
 800816c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800816e:	e003      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
      break;
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800817e:	4bb7      	ldr	r3, [pc, #732]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	f023 0207 	bic.w	r2, r3, #7
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818c:	49b3      	ldr	r1, [pc, #716]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800818e:	4313      	orrs	r3, r2
 8008190:	658b      	str	r3, [r1, #88]	; 0x58
 8008192:	e001      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d04b      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ae:	d02e      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80081b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b4:	d828      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ba:	d02a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c0:	d822      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081c6:	d026      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80081c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081cc:	d81c      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d2:	d010      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80081d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d8:	d816      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01d      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80081de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e2:	d111      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	2100      	movs	r1, #0
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fd14 	bl	8008c18 <RCCEx_PLL2_Config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80081f4:	e012      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3324      	adds	r3, #36	; 0x24
 80081fa:	2102      	movs	r1, #2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 fdbd 	bl	8008d7c <RCCEx_PLL3_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008206:	e009      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	75fb      	strb	r3, [r7, #23]
      break;
 800820c:	e006      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800820e:	bf00      	nop
 8008210:	e004      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008212:	bf00      	nop
 8008214:	e002      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008216:	bf00      	nop
 8008218:	e000      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800821a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008222:	4b8e      	ldr	r3, [pc, #568]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008230:	498a      	ldr	r1, [pc, #552]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008232:	4313      	orrs	r3, r2
 8008234:	654b      	str	r3, [r1, #84]	; 0x54
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d04b      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800824e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008252:	d02e      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008258:	d828      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825e:	d02a      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008264:	d822      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008266:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800826a:	d026      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800826c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008270:	d81c      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008276:	d010      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827c:	d816      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01d      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008286:	d111      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3304      	adds	r3, #4
 800828c:	2100      	movs	r1, #0
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fcc2 	bl	8008c18 <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008298:	e012      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	2102      	movs	r1, #2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd6b 	bl	8008d7c <RCCEx_PLL3_Config>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082aa:	e009      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
      break;
 80082b0:	e006      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082b2:	bf00      	nop
 80082b4:	e004      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082b6:	bf00      	nop
 80082b8:	e002      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082ba:	bf00      	nop
 80082bc:	e000      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80082be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082c6:	4b65      	ldr	r3, [pc, #404]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082d4:	4961      	ldr	r1, [pc, #388]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	658b      	str	r3, [r1, #88]	; 0x58
 80082da:	e001      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d04b      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80082f6:	d02e      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80082f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80082fc:	d828      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008302:	d02a      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008308:	d822      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800830a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800830e:	d026      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008310:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008314:	d81c      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831a:	d010      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800831c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008320:	d816      	bhi.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01d      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800832a:	d111      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3304      	adds	r3, #4
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc70 	bl	8008c18 <RCCEx_PLL2_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800833c:	e012      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3324      	adds	r3, #36	; 0x24
 8008342:	2102      	movs	r1, #2
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fd19 	bl	8008d7c <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800834e:	e009      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
      break;
 8008354:	e006      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800836a:	4b3c      	ldr	r3, [pc, #240]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800836c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008378:	4938      	ldr	r1, [pc, #224]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800837a:	4313      	orrs	r3, r2
 800837c:	658b      	str	r3, [r1, #88]	; 0x58
 800837e:	e001      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0308 	and.w	r3, r3, #8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01a      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839a:	d10a      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3324      	adds	r3, #36	; 0x24
 80083a0:	2102      	movs	r1, #2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fcea 	bl	8008d7c <RCCEx_PLL3_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80083b2:	4b2a      	ldr	r3, [pc, #168]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083c0:	4926      	ldr	r1, [pc, #152]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0310 	and.w	r3, r3, #16
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01a      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083dc:	d10a      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	2102      	movs	r1, #2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fcc9 	bl	8008d7c <RCCEx_PLL3_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083f4:	4b19      	ldr	r3, [pc, #100]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008402:	4916      	ldr	r1, [pc, #88]	; (800845c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008404:	4313      	orrs	r3, r2
 8008406:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d036      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800841a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800841e:	d01f      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008424:	d817      	bhi.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d009      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008430:	e011      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	2100      	movs	r1, #0
 8008438:	4618      	mov	r0, r3
 800843a:	f000 fbed 	bl	8008c18 <RCCEx_PLL2_Config>
 800843e:	4603      	mov	r3, r0
 8008440:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008442:	e00e      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3324      	adds	r3, #36	; 0x24
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fc96 	bl	8008d7c <RCCEx_PLL3_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008454:	e005      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
      break;
 800845a:	e002      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800845c:	58024400 	.word	0x58024400
      break;
 8008460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008468:	4b8b      	ldr	r3, [pc, #556]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800846a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008476:	4988      	ldr	r1, [pc, #544]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008478:	4313      	orrs	r3, r2
 800847a:	658b      	str	r3, [r1, #88]	; 0x58
 800847c:	e001      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d033      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008498:	d01c      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800849a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800849e:	d816      	bhi.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80084a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a4:	d003      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80084a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084aa:	d007      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80084ac:	e00f      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ae:	4b7a      	ldr	r3, [pc, #488]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	4a79      	ldr	r2, [pc, #484]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80084ba:	e00c      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	2101      	movs	r1, #1
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fc5a 	bl	8008d7c <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80084cc:	e003      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
      break;
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80084d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084dc:	4b6e      	ldr	r3, [pc, #440]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ea:	496b      	ldr	r1, [pc, #428]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	654b      	str	r3, [r1, #84]	; 0x54
 80084f0:	e001      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d029      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800850a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850e:	d007      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008510:	e00f      	b.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008512:	4b61      	ldr	r3, [pc, #388]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	4a60      	ldr	r2, [pc, #384]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800851c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800851e:	e00b      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	2102      	movs	r1, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fb76 	bl	8008c18 <RCCEx_PLL2_Config>
 800852c:	4603      	mov	r3, r0
 800852e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	75fb      	strb	r3, [r7, #23]
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800853e:	4b56      	ldr	r3, [pc, #344]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008542:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	4953      	ldr	r1, [pc, #332]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800854c:	4313      	orrs	r3, r2
 800854e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008550:	e001      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3324      	adds	r3, #36	; 0x24
 8008566:	2102      	movs	r1, #2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fc07 	bl	8008d7c <RCCEx_PLL3_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d030      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800858c:	d017      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800858e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008592:	d811      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008598:	d013      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800859a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859e:	d80b      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d010      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80085a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a8:	d106      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085aa:	4b3b      	ldr	r3, [pc, #236]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	4a3a      	ldr	r2, [pc, #232]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80085b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80085b6:	e007      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	e004      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085be:	bf00      	nop
 80085c0:	e002      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085c2:	bf00      	nop
 80085c4:	e000      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80085c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ce:	4b32      	ldr	r3, [pc, #200]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085da:	492f      	ldr	r1, [pc, #188]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	654b      	str	r3, [r1, #84]	; 0x54
 80085e0:	e001      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085f2:	4b29      	ldr	r3, [pc, #164]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80085f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	4926      	ldr	r1, [pc, #152]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008600:	4313      	orrs	r3, r2
 8008602:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008610:	4b21      	ldr	r3, [pc, #132]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800861e:	491e      	ldr	r1, [pc, #120]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008620:	4313      	orrs	r3, r2
 8008622:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008630:	4b19      	ldr	r3, [pc, #100]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008634:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800863c:	4916      	ldr	r1, [pc, #88]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800863e:	4313      	orrs	r3, r2
 8008640:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00d      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800864e:	4b12      	ldr	r3, [pc, #72]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	4a11      	ldr	r2, [pc, #68]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008654:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008658:	6113      	str	r3, [r2, #16]
 800865a:	4b0f      	ldr	r3, [pc, #60]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800865c:	691a      	ldr	r2, [r3, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008664:	490c      	ldr	r1, [pc, #48]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008666:	4313      	orrs	r3, r2
 8008668:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	da08      	bge.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867e:	4906      	ldr	r1, [pc, #24]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008680:	4313      	orrs	r3, r2
 8008682:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8008684:	7dbb      	ldrb	r3, [r7, #22]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	58024400 	.word	0x58024400

0800869c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086a0:	f7ff f82e 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 80086a4:	4602      	mov	r2, r0
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	091b      	lsrs	r3, r3, #4
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	4904      	ldr	r1, [pc, #16]	; (80086c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086b2:	5ccb      	ldrb	r3, [r1, r3]
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086bc:	4618      	mov	r0, r3
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	58024400 	.word	0x58024400
 80086c4:	08014858 	.word	0x08014858

080086c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b089      	sub	sp, #36	; 0x24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086d0:	4ba1      	ldr	r3, [pc, #644]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80086da:	4b9f      	ldr	r3, [pc, #636]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	0b1b      	lsrs	r3, r3, #12
 80086e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086e6:	4b9c      	ldr	r3, [pc, #624]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	091b      	lsrs	r3, r3, #4
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80086f2:	4b99      	ldr	r3, [pc, #612]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 8111 	beq.w	8008938 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b02      	cmp	r3, #2
 800871a:	f000 8083 	beq.w	8008824 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	2b02      	cmp	r3, #2
 8008722:	f200 80a1 	bhi.w	8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d056      	beq.n	80087e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008732:	e099      	b.n	8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008734:	4b88      	ldr	r3, [pc, #544]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0320 	and.w	r3, r3, #32
 800873c:	2b00      	cmp	r3, #0
 800873e:	d02d      	beq.n	800879c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008740:	4b85      	ldr	r3, [pc, #532]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	08db      	lsrs	r3, r3, #3
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	4a84      	ldr	r2, [pc, #528]	; (800895c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800874c:	fa22 f303 	lsr.w	r3, r2, r3
 8008750:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876a:	4b7b      	ldr	r3, [pc, #492]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	ed97 6a03 	vldr	s12, [r7, #12]
 800877e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800878e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008796:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800879a:	e087      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008964 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ae:	4b6a      	ldr	r3, [pc, #424]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087de:	e065      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f2:	4b59      	ldr	r3, [pc, #356]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008802:	ed97 6a03 	vldr	s12, [r7, #12]
 8008806:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800880a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800880e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008822:	e043      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800896c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008836:	4b48      	ldr	r3, [pc, #288]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008846:	ed97 6a03 	vldr	s12, [r7, #12]
 800884a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800884e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008866:	e021      	b.n	80088ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008872:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887a:	4b37      	ldr	r3, [pc, #220]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888a:	ed97 6a03 	vldr	s12, [r7, #12]
 800888e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008960 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800889e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80088ac:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	0a5b      	lsrs	r3, r3, #9
 80088b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d2:	ee17 2a90 	vmov	r2, s15
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008900:	ee17 2a90 	vmov	r2, s15
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008908:	4b13      	ldr	r3, [pc, #76]	; (8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	0e1b      	lsrs	r3, r3, #24
 800890e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800891e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008922:	edd7 6a07 	vldr	s13, [r7, #28]
 8008926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892e:	ee17 2a90 	vmov	r2, s15
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008936:	e008      	b.n	800894a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	609a      	str	r2, [r3, #8]
}
 800894a:	bf00      	nop
 800894c:	3724      	adds	r7, #36	; 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
 800895c:	03d09000 	.word	0x03d09000
 8008960:	46000000 	.word	0x46000000
 8008964:	4c742400 	.word	0x4c742400
 8008968:	4a742400 	.word	0x4a742400
 800896c:	4bbebc20 	.word	0x4bbebc20

08008970 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008970:	b480      	push	{r7}
 8008972:	b089      	sub	sp, #36	; 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008978:	4ba1      	ldr	r3, [pc, #644]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008982:	4b9f      	ldr	r3, [pc, #636]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	0d1b      	lsrs	r3, r3, #20
 8008988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800898c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800898e:	4b9c      	ldr	r3, [pc, #624]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800899a:	4b99      	ldr	r3, [pc, #612]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899e:	08db      	lsrs	r3, r3, #3
 80089a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	fb02 f303 	mul.w	r3, r2, r3
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8111 	beq.w	8008be0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f000 8083 	beq.w	8008acc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	f200 80a1 	bhi.w	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d056      	beq.n	8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089da:	e099      	b.n	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089dc:	4b88      	ldr	r3, [pc, #544]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02d      	beq.n	8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e8:	4b85      	ldr	r3, [pc, #532]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	4a84      	ldr	r2, [pc, #528]	; (8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
 80089f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	4b7b      	ldr	r3, [pc, #492]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a42:	e087      	b.n	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a56:	4b6a      	ldr	r3, [pc, #424]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a86:	e065      	b.n	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9a:	4b59      	ldr	r3, [pc, #356]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008aca:	e043      	b.n	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b48      	ldr	r3, [pc, #288]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8008af2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b0e:	e021      	b.n	8008b54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b22:	4b37      	ldr	r3, [pc, #220]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b54:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	0a5b      	lsrs	r3, r3, #9
 8008b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7a:	ee17 2a90 	vmov	r2, s15
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008b82:	4b1f      	ldr	r3, [pc, #124]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	0c1b      	lsrs	r3, r3, #16
 8008b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8c:	ee07 3a90 	vmov	s15, r3
 8008b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba8:	ee17 2a90 	vmov	r2, s15
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008bb0:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	0e1b      	lsrs	r3, r3, #24
 8008bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bd6:	ee17 2a90 	vmov	r2, s15
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bde:	e008      	b.n	8008bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	609a      	str	r2, [r3, #8]
}
 8008bf2:	bf00      	nop
 8008bf4:	3724      	adds	r7, #36	; 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	58024400 	.word	0x58024400
 8008c04:	03d09000 	.word	0x03d09000
 8008c08:	46000000 	.word	0x46000000
 8008c0c:	4c742400 	.word	0x4c742400
 8008c10:	4a742400 	.word	0x4a742400
 8008c14:	4bbebc20 	.word	0x4bbebc20

08008c18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c26:	4b53      	ldr	r3, [pc, #332]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d101      	bne.n	8008c36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e099      	b.n	8008d6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c36:	4b4f      	ldr	r3, [pc, #316]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a4e      	ldr	r2, [pc, #312]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c42:	f7f9 faa5 	bl	8002190 <HAL_GetTick>
 8008c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c48:	e008      	b.n	8008c5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c4a:	f7f9 faa1 	bl	8002190 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d901      	bls.n	8008c5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e086      	b.n	8008d6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c5c:	4b45      	ldr	r3, [pc, #276]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f0      	bne.n	8008c4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c68:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	031b      	lsls	r3, r3, #12
 8008c76:	493f      	ldr	r1, [pc, #252]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	628b      	str	r3, [r1, #40]	; 0x28
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	025b      	lsls	r3, r3, #9
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	431a      	orrs	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	3b01      	subs	r3, #1
 8008c98:	041b      	lsls	r3, r3, #16
 8008c9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	061b      	lsls	r3, r3, #24
 8008ca8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cac:	4931      	ldr	r1, [pc, #196]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cb2:	4b30      	ldr	r3, [pc, #192]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	492d      	ldr	r1, [pc, #180]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cc4:	4b2b      	ldr	r3, [pc, #172]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	f023 0220 	bic.w	r2, r3, #32
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	4928      	ldr	r1, [pc, #160]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008cd6:	4b27      	ldr	r3, [pc, #156]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cdc:	f023 0310 	bic.w	r3, r3, #16
 8008ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ce2:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ce6:	4b24      	ldr	r3, [pc, #144]	; (8008d78 <RCCEx_PLL2_Config+0x160>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	69d2      	ldr	r2, [r2, #28]
 8008cee:	00d2      	lsls	r2, r2, #3
 8008cf0:	4920      	ldr	r1, [pc, #128]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008cf6:	4b1f      	ldr	r3, [pc, #124]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008cfc:	f043 0310 	orr.w	r3, r3, #16
 8008d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d106      	bne.n	8008d16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d08:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d14:	e00f      	b.n	8008d36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d106      	bne.n	8008d2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d1c:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a14      	ldr	r2, [pc, #80]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d28:	e005      	b.n	8008d36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a0e      	ldr	r2, [pc, #56]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d42:	f7f9 fa25 	bl	8002190 <HAL_GetTick>
 8008d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d48:	e008      	b.n	8008d5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d4a:	f7f9 fa21 	bl	8002190 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e006      	b.n	8008d6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <RCCEx_PLL2_Config+0x15c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0f0      	beq.n	8008d4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	58024400 	.word	0x58024400
 8008d78:	ffff0007 	.word	0xffff0007

08008d7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d8a:	4b53      	ldr	r3, [pc, #332]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d101      	bne.n	8008d9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e099      	b.n	8008ece <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008d9a:	4b4f      	ldr	r3, [pc, #316]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a4e      	ldr	r2, [pc, #312]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008da6:	f7f9 f9f3 	bl	8002190 <HAL_GetTick>
 8008daa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dac:	e008      	b.n	8008dc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dae:	f7f9 f9ef 	bl	8002190 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e086      	b.n	8008ece <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dc0:	4b45      	ldr	r3, [pc, #276]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1f0      	bne.n	8008dae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dcc:	4b42      	ldr	r3, [pc, #264]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	051b      	lsls	r3, r3, #20
 8008dda:	493f      	ldr	r1, [pc, #252]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	628b      	str	r3, [r1, #40]	; 0x28
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	025b      	lsls	r3, r3, #9
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	041b      	lsls	r3, r3, #16
 8008dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	061b      	lsls	r3, r3, #24
 8008e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e10:	4931      	ldr	r1, [pc, #196]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e16:	4b30      	ldr	r3, [pc, #192]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	492d      	ldr	r1, [pc, #180]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e28:	4b2b      	ldr	r3, [pc, #172]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	4928      	ldr	r1, [pc, #160]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e3a:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a26      	ldr	r2, [pc, #152]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e46:	4b24      	ldr	r3, [pc, #144]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e4a:	4b24      	ldr	r3, [pc, #144]	; (8008edc <RCCEx_PLL3_Config+0x160>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	69d2      	ldr	r2, [r2, #28]
 8008e52:	00d2      	lsls	r2, r2, #3
 8008e54:	4920      	ldr	r1, [pc, #128]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e5a:	4b1f      	ldr	r3, [pc, #124]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	4a19      	ldr	r2, [pc, #100]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e78:	e00f      	b.n	8008e9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d106      	bne.n	8008e8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008e80:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a14      	ldr	r2, [pc, #80]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e8c:	e005      	b.n	8008e9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008e8e:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a11      	ldr	r2, [pc, #68]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a0e      	ldr	r2, [pc, #56]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea6:	f7f9 f973 	bl	8002190 <HAL_GetTick>
 8008eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008eac:	e008      	b.n	8008ec0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008eae:	f7f9 f96f 	bl	8002190 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d901      	bls.n	8008ec0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e006      	b.n	8008ece <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <RCCEx_PLL3_Config+0x15c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0f0      	beq.n	8008eae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	ffff0007 	.word	0xffff0007

08008ee0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d067      	beq.n	8008fc2 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d106      	bne.n	8008f0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7f8 fcda 	bl	80018c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	22ca      	movs	r2, #202	; 0xca
 8008f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2253      	movs	r2, #83	; 0x53
 8008f22:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f99f 	bl	8009268 <RTC_EnterInitMode>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d13b      	bne.n	8008fac <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6899      	ldr	r1, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b23      	ldr	r3, [pc, #140]	; (8008fcc <HAL_RTC_Init+0xec>)
 8008f40:	400b      	ands	r3, r1
 8008f42:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6899      	ldr	r1, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	0419      	lsls	r1, r3, #16
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68da      	ldr	r2, [r3, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f9a7 	bl	80092c8 <RTC_ExitInitMode>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d113      	bne.n	8008fac <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0203 	bic.w	r2, r2, #3
 8008f92:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69da      	ldr	r2, [r3, #28]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	22ff      	movs	r2, #255	; 0xff
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	ff8fffbf 	.word	0xff8fffbf

08008fd0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fd0:	b590      	push	{r4, r7, lr}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_RTC_SetTime+0x1a>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e089      	b.n	80090fe <HAL_RTC_SetTime+0x12e>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	22ca      	movs	r2, #202	; 0xca
 8009000:	625a      	str	r2, [r3, #36]	; 0x24
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2253      	movs	r2, #83	; 0x53
 8009008:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f92c 	bl	8009268 <RTC_EnterInitMode>
 8009010:	4603      	mov	r3, r0
 8009012:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009014:	7cfb      	ldrb	r3, [r7, #19]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d161      	bne.n	80090de <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d126      	bne.n	800906e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2200      	movs	r2, #0
 8009032:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f983 	bl	8009344 <RTC_ByteToBcd2>
 800903e:	4603      	mov	r3, r0
 8009040:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f97c 	bl	8009344 <RTC_ByteToBcd2>
 800904c:	4603      	mov	r3, r0
 800904e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009050:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	789b      	ldrb	r3, [r3, #2]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f974 	bl	8009344 <RTC_ByteToBcd2>
 800905c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800905e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	78db      	ldrb	r3, [r3, #3]
 8009066:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e018      	b.n	80090a0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800908e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009094:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	78db      	ldrb	r3, [r3, #3]
 800909a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6979      	ldr	r1, [r7, #20]
 80090a6:	4b18      	ldr	r3, [pc, #96]	; (8009108 <HAL_RTC_SetTime+0x138>)
 80090a8:	400b      	ands	r3, r1
 80090aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 f8f7 	bl	80092c8 <RTC_ExitInitMode>
 80090da:	4603      	mov	r3, r0
 80090dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	22ff      	movs	r2, #255	; 0xff
 80090e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80090e6:	7cfb      	ldrb	r3, [r7, #19]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80090fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	bd90      	pop	{r4, r7, pc}
 8009106:	bf00      	nop
 8009108:	007f7f7f 	.word	0x007f7f7f

0800910c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_RTC_SetDate+0x1a>
 8009122:	2302      	movs	r3, #2
 8009124:	e073      	b.n	800920e <HAL_RTC_SetDate+0x102>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10e      	bne.n	800915a <HAL_RTC_SetDate+0x4e>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	f023 0310 	bic.w	r3, r3, #16
 8009150:	b2db      	uxtb	r3, r3
 8009152:	330a      	adds	r3, #10
 8009154:	b2da      	uxtb	r2, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11c      	bne.n	800919a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	78db      	ldrb	r3, [r3, #3]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f8ed 	bl	8009344 <RTC_ByteToBcd2>
 800916a:	4603      	mov	r3, r0
 800916c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	785b      	ldrb	r3, [r3, #1]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f8e6 	bl	8009344 <RTC_ByteToBcd2>
 8009178:	4603      	mov	r3, r0
 800917a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800917c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	789b      	ldrb	r3, [r3, #2]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f8de 	bl	8009344 <RTC_ByteToBcd2>
 8009188:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800918a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e00e      	b.n	80091b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	78db      	ldrb	r3, [r3, #3]
 800919e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	785b      	ldrb	r3, [r3, #1]
 80091a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	22ca      	movs	r2, #202	; 0xca
 80091be:	625a      	str	r2, [r3, #36]	; 0x24
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2253      	movs	r2, #83	; 0x53
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f84d 	bl	8009268 <RTC_EnterInitMode>
 80091ce:	4603      	mov	r3, r0
 80091d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80091d2:	7cfb      	ldrb	r3, [r7, #19]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	6979      	ldr	r1, [r7, #20]
 80091de:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <HAL_RTC_SetDate+0x10c>)
 80091e0:	400b      	ands	r3, r1
 80091e2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 f86f 	bl	80092c8 <RTC_ExitInitMode>
 80091ea:	4603      	mov	r3, r0
 80091ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	22ff      	movs	r2, #255	; 0xff
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80091f6:	7cfb      	ldrb	r3, [r7, #19]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d103      	bne.n	8009204 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800920c:	7cfb      	ldrb	r3, [r7, #19]


}
 800920e:	4618      	mov	r0, r3
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd90      	pop	{r4, r7, pc}
 8009216:	bf00      	nop
 8009218:	00ffff3f 	.word	0x00ffff3f

0800921c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68da      	ldr	r2, [r3, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009232:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8009234:	f7f8 ffac 	bl	8002190 <HAL_GetTick>
 8009238:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800923a:	e009      	b.n	8009250 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800923c:	f7f8 ffa8 	bl	8002190 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800924a:	d901      	bls.n	8009250 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800924c:	2303      	movs	r3, #3
 800924e:	e007      	b.n	8009260 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0ee      	beq.n	800923c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927e:	2b00      	cmp	r3, #0
 8009280:	d11d      	bne.n	80092be <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f04f 32ff 	mov.w	r2, #4294967295
 800928a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800928c:	f7f8 ff80 	bl	8002190 <HAL_GetTick>
 8009290:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009292:	e00d      	b.n	80092b0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009294:	f7f8 ff7c 	bl	8002190 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a2:	d905      	bls.n	80092b0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2203      	movs	r2, #3
 80092ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0ea      	beq.n	8009294 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80092d4:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <RTC_ExitInitMode+0x78>)
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	4a19      	ldr	r2, [pc, #100]	; (8009340 <RTC_ExitInitMode+0x78>)
 80092da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092de:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80092e0:	4b17      	ldr	r3, [pc, #92]	; (8009340 <RTC_ExitInitMode+0x78>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10c      	bne.n	8009306 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff ff95 	bl	800921c <HAL_RTC_WaitForSynchro>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01e      	beq.n	8009336 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	e017      	b.n	8009336 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009306:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <RTC_ExitInitMode+0x78>)
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	4a0d      	ldr	r2, [pc, #52]	; (8009340 <RTC_ExitInitMode+0x78>)
 800930c:	f023 0320 	bic.w	r3, r3, #32
 8009310:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff ff82 	bl	800921c <HAL_RTC_WaitForSynchro>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d005      	beq.n	800932a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2203      	movs	r2, #3
 8009322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <RTC_ExitInitMode+0x78>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	4a04      	ldr	r2, [pc, #16]	; (8009340 <RTC_ExitInitMode+0x78>)
 8009330:	f043 0320 	orr.w	r3, r3, #32
 8009334:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	58004000 	.word	0x58004000

08009344 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009356:	e005      	b.n	8009364 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3301      	adds	r3, #1
 800935c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	3b0a      	subs	r3, #10
 8009362:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	2b09      	cmp	r3, #9
 8009368:	d8f6      	bhi.n	8009358 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	b2da      	uxtb	r2, r3
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	4313      	orrs	r3, r2
 8009376:	b2db      	uxtb	r3, r3
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e02b      	b.n	80093f0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7f7 fad3 	bl	8000958 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f002 fc09 	bl	800bbdc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	f002 fc5d 	bl	800bc94 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80093da:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <HAL_SDRAM_Init+0x74>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a06      	ldr	r2, [pc, #24]	; (80093f8 <HAL_SDRAM_Init+0x74>)
 80093e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	52004000 	.word	0x52004000

080093fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e049      	b.n	80094a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7f8 fc92 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2202      	movs	r2, #2
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	4610      	mov	r0, r2
 800943c:	f000 fc52 	bl	8009ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d001      	beq.n	80094c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e021      	b.n	8009508 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689a      	ldr	r2, [r3, #8]
 80094e2:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <HAL_TIM_Base_Start_IT+0x68>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b06      	cmp	r3, #6
 80094ec:	d00b      	beq.n	8009506 <HAL_TIM_Base_Start_IT+0x5a>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f4:	d007      	beq.n	8009506 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0201 	orr.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	00010007 	.word	0x00010007

08009518 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e049      	b.n	80095be <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d106      	bne.n	8009544 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f841 	bl	80095c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f000 fbc4 	bl	8009ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d109      	bne.n	8009600 <HAL_TIM_PWM_Start+0x24>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	bf14      	ite	ne
 80095f8:	2301      	movne	r3, #1
 80095fa:	2300      	moveq	r3, #0
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	e03c      	b.n	800967a <HAL_TIM_PWM_Start+0x9e>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2b04      	cmp	r3, #4
 8009604:	d109      	bne.n	800961a <HAL_TIM_PWM_Start+0x3e>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b01      	cmp	r3, #1
 8009610:	bf14      	ite	ne
 8009612:	2301      	movne	r3, #1
 8009614:	2300      	moveq	r3, #0
 8009616:	b2db      	uxtb	r3, r3
 8009618:	e02f      	b.n	800967a <HAL_TIM_PWM_Start+0x9e>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b08      	cmp	r3, #8
 800961e:	d109      	bne.n	8009634 <HAL_TIM_PWM_Start+0x58>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b01      	cmp	r3, #1
 800962a:	bf14      	ite	ne
 800962c:	2301      	movne	r3, #1
 800962e:	2300      	moveq	r3, #0
 8009630:	b2db      	uxtb	r3, r3
 8009632:	e022      	b.n	800967a <HAL_TIM_PWM_Start+0x9e>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b0c      	cmp	r3, #12
 8009638:	d109      	bne.n	800964e <HAL_TIM_PWM_Start+0x72>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b01      	cmp	r3, #1
 8009644:	bf14      	ite	ne
 8009646:	2301      	movne	r3, #1
 8009648:	2300      	moveq	r3, #0
 800964a:	b2db      	uxtb	r3, r3
 800964c:	e015      	b.n	800967a <HAL_TIM_PWM_Start+0x9e>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b10      	cmp	r3, #16
 8009652:	d109      	bne.n	8009668 <HAL_TIM_PWM_Start+0x8c>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b01      	cmp	r3, #1
 800965e:	bf14      	ite	ne
 8009660:	2301      	movne	r3, #1
 8009662:	2300      	moveq	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	e008      	b.n	800967a <HAL_TIM_PWM_Start+0x9e>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b01      	cmp	r3, #1
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e06e      	b.n	8009760 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <HAL_TIM_PWM_Start+0xb6>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009690:	e023      	b.n	80096da <HAL_TIM_PWM_Start+0xfe>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b04      	cmp	r3, #4
 8009696:	d104      	bne.n	80096a2 <HAL_TIM_PWM_Start+0xc6>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096a0:	e01b      	b.n	80096da <HAL_TIM_PWM_Start+0xfe>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d104      	bne.n	80096b2 <HAL_TIM_PWM_Start+0xd6>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2202      	movs	r2, #2
 80096ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096b0:	e013      	b.n	80096da <HAL_TIM_PWM_Start+0xfe>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b0c      	cmp	r3, #12
 80096b6:	d104      	bne.n	80096c2 <HAL_TIM_PWM_Start+0xe6>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096c0:	e00b      	b.n	80096da <HAL_TIM_PWM_Start+0xfe>
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d104      	bne.n	80096d2 <HAL_TIM_PWM_Start+0xf6>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096d0:	e003      	b.n	80096da <HAL_TIM_PWM_Start+0xfe>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2202      	movs	r2, #2
 80096d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2201      	movs	r2, #1
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 ff04 	bl	800a4f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1e      	ldr	r2, [pc, #120]	; (8009768 <HAL_TIM_PWM_Start+0x18c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d013      	beq.n	800971a <HAL_TIM_PWM_Start+0x13e>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a1d      	ldr	r2, [pc, #116]	; (800976c <HAL_TIM_PWM_Start+0x190>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d00e      	beq.n	800971a <HAL_TIM_PWM_Start+0x13e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1b      	ldr	r2, [pc, #108]	; (8009770 <HAL_TIM_PWM_Start+0x194>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d009      	beq.n	800971a <HAL_TIM_PWM_Start+0x13e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a1a      	ldr	r2, [pc, #104]	; (8009774 <HAL_TIM_PWM_Start+0x198>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <HAL_TIM_PWM_Start+0x13e>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a18      	ldr	r2, [pc, #96]	; (8009778 <HAL_TIM_PWM_Start+0x19c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d101      	bne.n	800971e <HAL_TIM_PWM_Start+0x142>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <HAL_TIM_PWM_Start+0x144>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d007      	beq.n	8009734 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009732:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	4b10      	ldr	r3, [pc, #64]	; (800977c <HAL_TIM_PWM_Start+0x1a0>)
 800973c:	4013      	ands	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b06      	cmp	r3, #6
 8009744:	d00b      	beq.n	800975e <HAL_TIM_PWM_Start+0x182>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800974c:	d007      	beq.n	800975e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	40010000 	.word	0x40010000
 800976c:	40010400 	.word	0x40010400
 8009770:	40014000 	.word	0x40014000
 8009774:	40014400 	.word	0x40014400
 8009778:	40014800 	.word	0x40014800
 800977c:	00010007 	.word	0x00010007

08009780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b02      	cmp	r3, #2
 8009794:	d122      	bne.n	80097dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d11b      	bne.n	80097dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f06f 0202 	mvn.w	r2, #2
 80097ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	699b      	ldr	r3, [r3, #24]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa70 	bl	8009ca8 <HAL_TIM_IC_CaptureCallback>
 80097c8:	e005      	b.n	80097d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa62 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa73 	bl	8009cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0304 	and.w	r3, r3, #4
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d122      	bne.n	8009830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0304 	and.w	r3, r3, #4
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d11b      	bne.n	8009830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0204 	mvn.w	r2, #4
 8009800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2202      	movs	r2, #2
 8009806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa46 	bl	8009ca8 <HAL_TIM_IC_CaptureCallback>
 800981c:	e005      	b.n	800982a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa38 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa49 	bl	8009cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	f003 0308 	and.w	r3, r3, #8
 800983a:	2b08      	cmp	r3, #8
 800983c:	d122      	bne.n	8009884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f003 0308 	and.w	r3, r3, #8
 8009848:	2b08      	cmp	r3, #8
 800984a:	d11b      	bne.n	8009884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f06f 0208 	mvn.w	r2, #8
 8009854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2204      	movs	r2, #4
 800985a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa1c 	bl	8009ca8 <HAL_TIM_IC_CaptureCallback>
 8009870:	e005      	b.n	800987e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa0e 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fa1f 	bl	8009cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	2b10      	cmp	r3, #16
 8009890:	d122      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b10      	cmp	r3, #16
 800989e:	d11b      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0210 	mvn.w	r2, #16
 80098a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2208      	movs	r2, #8
 80098ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f9f2 	bl	8009ca8 <HAL_TIM_IC_CaptureCallback>
 80098c4:	e005      	b.n	80098d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f9e4 	bl	8009c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f9f5 	bl	8009cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d10e      	bne.n	8009904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d107      	bne.n	8009904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0201 	mvn.w	r2, #1
 80098fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7f7 ff6a 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990e:	2b80      	cmp	r3, #128	; 0x80
 8009910:	d10e      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991c:	2b80      	cmp	r3, #128	; 0x80
 800991e:	d107      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fe98 	bl	800a660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800993a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800993e:	d10e      	bne.n	800995e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d107      	bne.n	800995e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fe8b 	bl	800a674 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b40      	cmp	r3, #64	; 0x40
 800996a:	d10e      	bne.n	800998a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d107      	bne.n	800998a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9a3 	bl	8009cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b20      	cmp	r3, #32
 8009996:	d10e      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d107      	bne.n	80099b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0220 	mvn.w	r2, #32
 80099ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fe4b 	bl	800a64c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_TIM_OC_ConfigChannel+0x1a>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e064      	b.n	8009aa4 <HAL_TIM_OC_ConfigChannel+0xe4>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b14      	cmp	r3, #20
 80099e6:	d857      	bhi.n	8009a98 <HAL_TIM_OC_ConfigChannel+0xd8>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a45 	.word	0x08009a45
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009a99 	.word	0x08009a99
 80099fc:	08009a99 	.word	0x08009a99
 8009a00:	08009a53 	.word	0x08009a53
 8009a04:	08009a99 	.word	0x08009a99
 8009a08:	08009a99 	.word	0x08009a99
 8009a0c:	08009a99 	.word	0x08009a99
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a99 	.word	0x08009a99
 8009a18:	08009a99 	.word	0x08009a99
 8009a1c:	08009a99 	.word	0x08009a99
 8009a20:	08009a6f 	.word	0x08009a6f
 8009a24:	08009a99 	.word	0x08009a99
 8009a28:	08009a99 	.word	0x08009a99
 8009a2c:	08009a99 	.word	0x08009a99
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a99 	.word	0x08009a99
 8009a38:	08009a99 	.word	0x08009a99
 8009a3c:	08009a99 	.word	0x08009a99
 8009a40:	08009a8b 	.word	0x08009a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f9e4 	bl	8009e18 <TIM_OC1_SetConfig>
      break;
 8009a50:	e023      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fa6d 	bl	8009f38 <TIM_OC2_SetConfig>
      break;
 8009a5e:	e01c      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 faf0 	bl	800a04c <TIM_OC3_SetConfig>
      break;
 8009a6c:	e015      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fb6f 	bl	800a158 <TIM_OC4_SetConfig>
      break;
 8009a7a:	e00e      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fbd0 	bl	800a228 <TIM_OC5_SetConfig>
      break;
 8009a88:	e007      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fc2b 	bl	800a2ec <TIM_OC6_SetConfig>
      break;
 8009a96:	e000      	b.n	8009a9a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8009a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d101      	bne.n	8009ac4 <HAL_TIM_ConfigClockSource+0x18>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e0db      	b.n	8009c7c <HAL_TIM_ConfigClockSource+0x1d0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4b69      	ldr	r3, [pc, #420]	; (8009c84 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a63      	ldr	r2, [pc, #396]	; (8009c88 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	f000 80a9 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b00:	4a61      	ldr	r2, [pc, #388]	; (8009c88 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	f200 80ae 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b08:	4a60      	ldr	r2, [pc, #384]	; (8009c8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	f000 80a1 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b10:	4a5e      	ldr	r2, [pc, #376]	; (8009c8c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	f200 80a6 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b18:	4a5d      	ldr	r2, [pc, #372]	; (8009c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	f000 8099 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b20:	4a5b      	ldr	r2, [pc, #364]	; (8009c90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	f200 809e 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b2c:	f000 8091 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b34:	f200 8096 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b3c:	f000 8089 	beq.w	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b44:	f200 808e 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b4c:	d03e      	beq.n	8009bcc <HAL_TIM_ConfigClockSource+0x120>
 8009b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b52:	f200 8087 	bhi.w	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5a:	f000 8085 	beq.w	8009c68 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b62:	d87f      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b64:	2b70      	cmp	r3, #112	; 0x70
 8009b66:	d01a      	beq.n	8009b9e <HAL_TIM_ConfigClockSource+0xf2>
 8009b68:	2b70      	cmp	r3, #112	; 0x70
 8009b6a:	d87b      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b6c:	2b60      	cmp	r3, #96	; 0x60
 8009b6e:	d050      	beq.n	8009c12 <HAL_TIM_ConfigClockSource+0x166>
 8009b70:	2b60      	cmp	r3, #96	; 0x60
 8009b72:	d877      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b74:	2b50      	cmp	r3, #80	; 0x50
 8009b76:	d03c      	beq.n	8009bf2 <HAL_TIM_ConfigClockSource+0x146>
 8009b78:	2b50      	cmp	r3, #80	; 0x50
 8009b7a:	d873      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b7c:	2b40      	cmp	r3, #64	; 0x40
 8009b7e:	d058      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x186>
 8009b80:	2b40      	cmp	r3, #64	; 0x40
 8009b82:	d86f      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b84:	2b30      	cmp	r3, #48	; 0x30
 8009b86:	d064      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b88:	2b30      	cmp	r3, #48	; 0x30
 8009b8a:	d86b      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d060      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	d867      	bhi.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d05c      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
 8009b98:	2b10      	cmp	r3, #16
 8009b9a:	d05a      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x1a6>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009b9c:	e062      	b.n	8009c64 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	6899      	ldr	r1, [r3, #8]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	f000 fc7f 	bl	800a4b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009bc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	609a      	str	r2, [r3, #8]
      break;
 8009bca:	e04e      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	6899      	ldr	r1, [r3, #8]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f000 fc68 	bl	800a4b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689a      	ldr	r2, [r3, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bee:	609a      	str	r2, [r3, #8]
      break;
 8009bf0:	e03b      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6818      	ldr	r0, [r3, #0]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6859      	ldr	r1, [r3, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f000 fbd8 	bl	800a3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2150      	movs	r1, #80	; 0x50
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fc32 	bl	800a474 <TIM_ITRx_SetConfig>
      break;
 8009c10:	e02b      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	6859      	ldr	r1, [r3, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f000 fbf7 	bl	800a412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2160      	movs	r1, #96	; 0x60
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fc22 	bl	800a474 <TIM_ITRx_SetConfig>
      break;
 8009c30:	e01b      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f000 fbb8 	bl	800a3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2140      	movs	r1, #64	; 0x40
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fc12 	bl	800a474 <TIM_ITRx_SetConfig>
      break;
 8009c50:	e00b      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f000 fc09 	bl	800a474 <TIM_ITRx_SetConfig>
      break;
 8009c62:	e002      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009c64:	bf00      	nop
 8009c66:	e000      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009c68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	ffceff88 	.word	0xffceff88
 8009c88:	00100040 	.word	0x00100040
 8009c8c:	00100030 	.word	0x00100030
 8009c90:	00100020 	.word	0x00100020

08009c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a40      	ldr	r2, [pc, #256]	; (8009df8 <TIM_Base_SetConfig+0x114>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d013      	beq.n	8009d24 <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d02:	d00f      	beq.n	8009d24 <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a3d      	ldr	r2, [pc, #244]	; (8009dfc <TIM_Base_SetConfig+0x118>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00b      	beq.n	8009d24 <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a3c      	ldr	r2, [pc, #240]	; (8009e00 <TIM_Base_SetConfig+0x11c>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d007      	beq.n	8009d24 <TIM_Base_SetConfig+0x40>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a3b      	ldr	r2, [pc, #236]	; (8009e04 <TIM_Base_SetConfig+0x120>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d003      	beq.n	8009d24 <TIM_Base_SetConfig+0x40>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3a      	ldr	r2, [pc, #232]	; (8009e08 <TIM_Base_SetConfig+0x124>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d108      	bne.n	8009d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2f      	ldr	r2, [pc, #188]	; (8009df8 <TIM_Base_SetConfig+0x114>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d01f      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d44:	d01b      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2c      	ldr	r2, [pc, #176]	; (8009dfc <TIM_Base_SetConfig+0x118>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d017      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2b      	ldr	r2, [pc, #172]	; (8009e00 <TIM_Base_SetConfig+0x11c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d013      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2a      	ldr	r2, [pc, #168]	; (8009e04 <TIM_Base_SetConfig+0x120>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00f      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a29      	ldr	r2, [pc, #164]	; (8009e08 <TIM_Base_SetConfig+0x124>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00b      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a28      	ldr	r2, [pc, #160]	; (8009e0c <TIM_Base_SetConfig+0x128>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d007      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a27      	ldr	r2, [pc, #156]	; (8009e10 <TIM_Base_SetConfig+0x12c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d003      	beq.n	8009d7e <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a26      	ldr	r2, [pc, #152]	; (8009e14 <TIM_Base_SetConfig+0x130>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d108      	bne.n	8009d90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a10      	ldr	r2, [pc, #64]	; (8009df8 <TIM_Base_SetConfig+0x114>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00f      	beq.n	8009ddc <TIM_Base_SetConfig+0xf8>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a12      	ldr	r2, [pc, #72]	; (8009e08 <TIM_Base_SetConfig+0x124>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00b      	beq.n	8009ddc <TIM_Base_SetConfig+0xf8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a11      	ldr	r2, [pc, #68]	; (8009e0c <TIM_Base_SetConfig+0x128>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d007      	beq.n	8009ddc <TIM_Base_SetConfig+0xf8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a10      	ldr	r2, [pc, #64]	; (8009e10 <TIM_Base_SetConfig+0x12c>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_Base_SetConfig+0xf8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a0f      	ldr	r2, [pc, #60]	; (8009e14 <TIM_Base_SetConfig+0x130>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d103      	bne.n	8009de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	615a      	str	r2, [r3, #20]
}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40014400 	.word	0x40014400
 8009e14:	40014800 	.word	0x40014800

08009e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f023 0201 	bic.w	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4b37      	ldr	r3, [pc, #220]	; (8009f20 <TIM_OC1_SetConfig+0x108>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0303 	bic.w	r3, r3, #3
 8009e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f023 0302 	bic.w	r3, r3, #2
 8009e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a2d      	ldr	r2, [pc, #180]	; (8009f24 <TIM_OC1_SetConfig+0x10c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d00f      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a2c      	ldr	r2, [pc, #176]	; (8009f28 <TIM_OC1_SetConfig+0x110>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d00b      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a2b      	ldr	r2, [pc, #172]	; (8009f2c <TIM_OC1_SetConfig+0x114>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d007      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a2a      	ldr	r2, [pc, #168]	; (8009f30 <TIM_OC1_SetConfig+0x118>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d003      	beq.n	8009e94 <TIM_OC1_SetConfig+0x7c>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a29      	ldr	r2, [pc, #164]	; (8009f34 <TIM_OC1_SetConfig+0x11c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d10c      	bne.n	8009eae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f023 0308 	bic.w	r3, r3, #8
 8009e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f023 0304 	bic.w	r3, r3, #4
 8009eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	; (8009f24 <TIM_OC1_SetConfig+0x10c>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00f      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <TIM_OC1_SetConfig+0x110>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d00b      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a1a      	ldr	r2, [pc, #104]	; (8009f2c <TIM_OC1_SetConfig+0x114>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d007      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a19      	ldr	r2, [pc, #100]	; (8009f30 <TIM_OC1_SetConfig+0x118>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d003      	beq.n	8009ed6 <TIM_OC1_SetConfig+0xbe>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a18      	ldr	r2, [pc, #96]	; (8009f34 <TIM_OC1_SetConfig+0x11c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d111      	bne.n	8009efa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	621a      	str	r2, [r3, #32]
}
 8009f14:	bf00      	nop
 8009f16:	371c      	adds	r7, #28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	fffeff8f 	.word	0xfffeff8f
 8009f24:	40010000 	.word	0x40010000
 8009f28:	40010400 	.word	0x40010400
 8009f2c:	40014000 	.word	0x40014000
 8009f30:	40014400 	.word	0x40014400
 8009f34:	40014800 	.word	0x40014800

08009f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f023 0210 	bic.w	r2, r3, #16
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4b34      	ldr	r3, [pc, #208]	; (800a034 <TIM_OC2_SetConfig+0xfc>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 0320 	bic.w	r3, r3, #32
 8009f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a29      	ldr	r2, [pc, #164]	; (800a038 <TIM_OC2_SetConfig+0x100>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d003      	beq.n	8009fa0 <TIM_OC2_SetConfig+0x68>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a28      	ldr	r2, [pc, #160]	; (800a03c <TIM_OC2_SetConfig+0x104>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d10d      	bne.n	8009fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <TIM_OC2_SetConfig+0x100>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00f      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	; (800a03c <TIM_OC2_SetConfig+0x104>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00b      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1c      	ldr	r2, [pc, #112]	; (800a040 <TIM_OC2_SetConfig+0x108>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d007      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a1b      	ldr	r2, [pc, #108]	; (800a044 <TIM_OC2_SetConfig+0x10c>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_OC2_SetConfig+0xac>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a1a      	ldr	r2, [pc, #104]	; (800a048 <TIM_OC2_SetConfig+0x110>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d113      	bne.n	800a00c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	695b      	ldr	r3, [r3, #20]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	621a      	str	r2, [r3, #32]
}
 800a026:	bf00      	nop
 800a028:	371c      	adds	r7, #28
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	feff8fff 	.word	0xfeff8fff
 800a038:	40010000 	.word	0x40010000
 800a03c:	40010400 	.word	0x40010400
 800a040:	40014000 	.word	0x40014000
 800a044:	40014400 	.word	0x40014400
 800a048:	40014800 	.word	0x40014800

0800a04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a27      	ldr	r2, [pc, #156]	; (800a144 <TIM_OC3_SetConfig+0xf8>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_OC3_SetConfig+0x66>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a26      	ldr	r2, [pc, #152]	; (800a148 <TIM_OC3_SetConfig+0xfc>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d10d      	bne.n	800a0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <TIM_OC3_SetConfig+0xf8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00f      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <TIM_OC3_SetConfig+0xfc>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d00b      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a1a      	ldr	r2, [pc, #104]	; (800a14c <TIM_OC3_SetConfig+0x100>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d007      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a19      	ldr	r2, [pc, #100]	; (800a150 <TIM_OC3_SetConfig+0x104>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d003      	beq.n	800a0f6 <TIM_OC3_SetConfig+0xaa>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a18      	ldr	r2, [pc, #96]	; (800a154 <TIM_OC3_SetConfig+0x108>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d113      	bne.n	800a11e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	621a      	str	r2, [r3, #32]
}
 800a138:	bf00      	nop
 800a13a:	371c      	adds	r7, #28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	40010000 	.word	0x40010000
 800a148:	40010400 	.word	0x40010400
 800a14c:	40014000 	.word	0x40014000
 800a150:	40014400 	.word	0x40014400
 800a154:	40014800 	.word	0x40014800

0800a158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a158:	b480      	push	{r7}
 800a15a:	b087      	sub	sp, #28
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	031b      	lsls	r3, r3, #12
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a18      	ldr	r2, [pc, #96]	; (800a214 <TIM_OC4_SetConfig+0xbc>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d00f      	beq.n	800a1d8 <TIM_OC4_SetConfig+0x80>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a17      	ldr	r2, [pc, #92]	; (800a218 <TIM_OC4_SetConfig+0xc0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d00b      	beq.n	800a1d8 <TIM_OC4_SetConfig+0x80>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a16      	ldr	r2, [pc, #88]	; (800a21c <TIM_OC4_SetConfig+0xc4>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d007      	beq.n	800a1d8 <TIM_OC4_SetConfig+0x80>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a15      	ldr	r2, [pc, #84]	; (800a220 <TIM_OC4_SetConfig+0xc8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d003      	beq.n	800a1d8 <TIM_OC4_SetConfig+0x80>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a14      	ldr	r2, [pc, #80]	; (800a224 <TIM_OC4_SetConfig+0xcc>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d109      	bne.n	800a1ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	019b      	lsls	r3, r3, #6
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	621a      	str	r2, [r3, #32]
}
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800

0800a228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	041b      	lsls	r3, r3, #16
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a17      	ldr	r2, [pc, #92]	; (800a2d8 <TIM_OC5_SetConfig+0xb0>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00f      	beq.n	800a29e <TIM_OC5_SetConfig+0x76>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a16      	ldr	r2, [pc, #88]	; (800a2dc <TIM_OC5_SetConfig+0xb4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d00b      	beq.n	800a29e <TIM_OC5_SetConfig+0x76>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a15      	ldr	r2, [pc, #84]	; (800a2e0 <TIM_OC5_SetConfig+0xb8>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d007      	beq.n	800a29e <TIM_OC5_SetConfig+0x76>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <TIM_OC5_SetConfig+0xbc>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d003      	beq.n	800a29e <TIM_OC5_SetConfig+0x76>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a13      	ldr	r2, [pc, #76]	; (800a2e8 <TIM_OC5_SetConfig+0xc0>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d109      	bne.n	800a2b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	021b      	lsls	r3, r3, #8
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	621a      	str	r2, [r3, #32]
}
 800a2cc:	bf00      	nop
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	40010000 	.word	0x40010000
 800a2dc:	40010400 	.word	0x40010400
 800a2e0:	40014000 	.word	0x40014000
 800a2e4:	40014400 	.word	0x40014400
 800a2e8:	40014800 	.word	0x40014800

0800a2ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4313      	orrs	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a32e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	051b      	lsls	r3, r3, #20
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a18      	ldr	r2, [pc, #96]	; (800a3a0 <TIM_OC6_SetConfig+0xb4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00f      	beq.n	800a364 <TIM_OC6_SetConfig+0x78>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a17      	ldr	r2, [pc, #92]	; (800a3a4 <TIM_OC6_SetConfig+0xb8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d00b      	beq.n	800a364 <TIM_OC6_SetConfig+0x78>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <TIM_OC6_SetConfig+0xbc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d007      	beq.n	800a364 <TIM_OC6_SetConfig+0x78>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a15      	ldr	r2, [pc, #84]	; (800a3ac <TIM_OC6_SetConfig+0xc0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d003      	beq.n	800a364 <TIM_OC6_SetConfig+0x78>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a14      	ldr	r2, [pc, #80]	; (800a3b0 <TIM_OC6_SetConfig+0xc4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d109      	bne.n	800a378 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a36a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	029b      	lsls	r3, r3, #10
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	4313      	orrs	r3, r2
 800a376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	621a      	str	r2, [r3, #32]
}
 800a392:	bf00      	nop
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40010400 	.word	0x40010400
 800a3a8:	40014000 	.word	0x40014000
 800a3ac:	40014400 	.word	0x40014400
 800a3b0:	40014800 	.word	0x40014800

0800a3b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a1b      	ldr	r3, [r3, #32]
 800a3ca:	f023 0201 	bic.w	r2, r3, #1
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f023 030a 	bic.w	r3, r3, #10
 800a3f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	621a      	str	r2, [r3, #32]
}
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a412:	b480      	push	{r7}
 800a414:	b087      	sub	sp, #28
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f023 0210 	bic.w	r2, r3, #16
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a43c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	031b      	lsls	r3, r3, #12
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	4313      	orrs	r3, r2
 800a446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a44e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
	...

0800a474 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <TIM_ITRx_SetConfig+0x38>)
 800a488:	4013      	ands	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	4313      	orrs	r3, r2
 800a492:	f043 0307 	orr.w	r3, r3, #7
 800a496:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	609a      	str	r2, [r3, #8]
}
 800a49e:	bf00      	nop
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	ffcfff8f 	.word	0xffcfff8f

0800a4b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	021a      	lsls	r2, r3, #8
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	609a      	str	r2, [r3, #8]
}
 800a4e4:	bf00      	nop
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f003 031f 	and.w	r3, r3, #31
 800a502:	2201      	movs	r2, #1
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a1a      	ldr	r2, [r3, #32]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	43db      	mvns	r3, r3
 800a512:	401a      	ands	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6a1a      	ldr	r2, [r3, #32]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	f003 031f 	and.w	r3, r3, #31
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	fa01 f303 	lsl.w	r3, r1, r3
 800a528:	431a      	orrs	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	621a      	str	r2, [r3, #32]
}
 800a52e:	bf00      	nop
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a550:	2302      	movs	r3, #2
 800a552:	e068      	b.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a2e      	ldr	r2, [pc, #184]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d004      	beq.n	800a588 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a2d      	ldr	r2, [pc, #180]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d108      	bne.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a58e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a1e      	ldr	r2, [pc, #120]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d01d      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c6:	d018      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1b      	ldr	r2, [pc, #108]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d013      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1a      	ldr	r2, [pc, #104]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00e      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a18      	ldr	r2, [pc, #96]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d009      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a13      	ldr	r2, [pc, #76]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d004      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a14      	ldr	r2, [pc, #80]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d10c      	bne.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40010000 	.word	0x40010000
 800a638:	40010400 	.word	0x40010400
 800a63c:	40000400 	.word	0x40000400
 800a640:	40000800 	.word	0x40000800
 800a644:	40000c00 	.word	0x40000c00
 800a648:	40001800 	.word	0x40001800

0800a64c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e042      	b.n	800a720 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7f7 fc41 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2224      	movs	r2, #36	; 0x24
 800a6b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f022 0201 	bic.w	r2, r2, #1
 800a6c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f9be 	bl	800aa4c <UART_SetConfig>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e022      	b.n	800a720 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 ff18 	bl	800b518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 ff9f 	bl	800b65c <UART_CheckIdleState>
 800a71e:	4603      	mov	r3, r0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a74e:	4013      	ands	r3, r2
 800a750:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d118      	bne.n	800a78a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f003 0320 	and.w	r3, r3, #32
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d013      	beq.n	800a78a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f003 0320 	and.w	r3, r3, #32
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d104      	bne.n	800a776 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 8144 	beq.w	800aa08 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
      }
      return;
 800a788:	e13e      	b.n	800aa08 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80e8 	beq.w	800a962 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4ba0      	ldr	r3, [pc, #640]	; (800aa18 <HAL_UART_IRQHandler+0x2f0>)
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d105      	bne.n	800a7a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	4b9f      	ldr	r3, [pc, #636]	; (800aa1c <HAL_UART_IRQHandler+0x2f4>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 80dd 	beq.w	800a962 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d010      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xac>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d010      	beq.n	800a800 <HAL_UART_IRQHandler+0xd8>
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00b      	beq.n	800a800 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f6:	f043 0204 	orr.w	r2, r3, #4
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	f003 0304 	and.w	r3, r3, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	d010      	beq.n	800a82c <HAL_UART_IRQHandler+0x104>
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2204      	movs	r2, #4
 800a81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a822:	f043 0202 	orr.w	r2, r3, #2
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f003 0308 	and.w	r3, r3, #8
 800a832:	2b00      	cmp	r3, #0
 800a834:	d015      	beq.n	800a862 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	f003 0320 	and.w	r3, r3, #32
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	4b75      	ldr	r3, [pc, #468]	; (800aa18 <HAL_UART_IRQHandler+0x2f0>)
 800a844:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00b      	beq.n	800a862 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2208      	movs	r2, #8
 800a850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a858:	f043 0208 	orr.w	r2, r3, #8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d011      	beq.n	800a890 <HAL_UART_IRQHandler+0x168>
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00c      	beq.n	800a890 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a886:	f043 0220 	orr.w	r2, r3, #32
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 80b8 	beq.w	800aa0c <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d011      	beq.n	800a8ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	f003 0320 	and.w	r3, r3, #32
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d007      	beq.n	800a8ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8dc:	2b40      	cmp	r3, #64	; 0x40
 800a8de:	d004      	beq.n	800a8ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d031      	beq.n	800a94e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 ff7e 	bl	800b7ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b40      	cmp	r3, #64	; 0x40
 800a8fc:	d123      	bne.n	800a946 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	689a      	ldr	r2, [r3, #8]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a90c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a912:	2b00      	cmp	r3, #0
 800a914:	d013      	beq.n	800a93e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a91a:	4a41      	ldr	r2, [pc, #260]	; (800aa20 <HAL_UART_IRQHandler+0x2f8>)
 800a91c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a922:	4618      	mov	r0, r3
 800a924:	f7f7 fdcc 	bl	80024c0 <HAL_DMA_Abort_IT>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d017      	beq.n	800a95e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800a938:	4610      	mov	r0, r2
 800a93a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93c:	e00f      	b.n	800a95e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f87a 	bl	800aa38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a944:	e00b      	b.n	800a95e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f876 	bl	800aa38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a94c:	e007      	b.n	800a95e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f872 	bl	800aa38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800a95c:	e056      	b.n	800aa0c <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95e:	bf00      	nop
    return;
 800a960:	e054      	b.n	800aa0c <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00d      	beq.n	800a988 <HAL_UART_IRQHandler+0x260>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d008      	beq.n	800a988 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a97e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 ff87 	bl	800b894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a986:	e044      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d012      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d008      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d030      	beq.n	800aa10 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
    }
    return;
 800a9b6:	e02b      	b.n	800aa10 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d008      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x2ac>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 ff47 	bl	800b860 <UART_EndTransmit_IT>
    return;
 800a9d2:	e01e      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d008      	beq.n	800a9f0 <HAL_UART_IRQHandler+0x2c8>
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 ff67 	bl	800b8bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9ee:	e010      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00b      	beq.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da08      	bge.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 ff51 	bl	800b8a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa06:	e004      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
      return;
 800aa08:	bf00      	nop
 800aa0a:	e002      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
    return;
 800aa0c:	bf00      	nop
 800aa0e:	e000      	b.n	800aa12 <HAL_UART_IRQHandler+0x2ea>
    return;
 800aa10:	bf00      	nop
  }
}
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	10000001 	.word	0x10000001
 800aa1c:	04000120 	.word	0x04000120
 800aa20:	0800b835 	.word	0x0800b835

0800aa24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa4c:	b5b0      	push	{r4, r5, r7, lr}
 800aa4e:	b08e      	sub	sp, #56	; 0x38
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695b      	ldr	r3, [r3, #20]
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	69db      	ldr	r3, [r3, #28]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4bc0      	ldr	r3, [pc, #768]	; (800ad84 <UART_SetConfig+0x338>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6812      	ldr	r2, [r2, #0]
 800aa8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68da      	ldr	r2, [r3, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4ab5      	ldr	r2, [pc, #724]	; (800ad88 <UART_SetConfig+0x33c>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d004      	beq.n	800aac0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aabc:	4313      	orrs	r3, r2
 800aabe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689a      	ldr	r2, [r3, #8]
 800aac6:	4bb1      	ldr	r3, [pc, #708]	; (800ad8c <UART_SetConfig+0x340>)
 800aac8:	4013      	ands	r3, r2
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aad0:	430b      	orrs	r3, r1
 800aad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aada:	f023 010f 	bic.w	r1, r3, #15
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	430a      	orrs	r2, r1
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4aa8      	ldr	r2, [pc, #672]	; (800ad90 <UART_SetConfig+0x344>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d177      	bne.n	800abe4 <UART_SetConfig+0x198>
 800aaf4:	4ba7      	ldr	r3, [pc, #668]	; (800ad94 <UART_SetConfig+0x348>)
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aafc:	2b28      	cmp	r3, #40	; 0x28
 800aafe:	d86d      	bhi.n	800abdc <UART_SetConfig+0x190>
 800ab00:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0xbc>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800abad 	.word	0x0800abad
 800ab0c:	0800abdd 	.word	0x0800abdd
 800ab10:	0800abdd 	.word	0x0800abdd
 800ab14:	0800abdd 	.word	0x0800abdd
 800ab18:	0800abdd 	.word	0x0800abdd
 800ab1c:	0800abdd 	.word	0x0800abdd
 800ab20:	0800abdd 	.word	0x0800abdd
 800ab24:	0800abdd 	.word	0x0800abdd
 800ab28:	0800abb5 	.word	0x0800abb5
 800ab2c:	0800abdd 	.word	0x0800abdd
 800ab30:	0800abdd 	.word	0x0800abdd
 800ab34:	0800abdd 	.word	0x0800abdd
 800ab38:	0800abdd 	.word	0x0800abdd
 800ab3c:	0800abdd 	.word	0x0800abdd
 800ab40:	0800abdd 	.word	0x0800abdd
 800ab44:	0800abdd 	.word	0x0800abdd
 800ab48:	0800abbd 	.word	0x0800abbd
 800ab4c:	0800abdd 	.word	0x0800abdd
 800ab50:	0800abdd 	.word	0x0800abdd
 800ab54:	0800abdd 	.word	0x0800abdd
 800ab58:	0800abdd 	.word	0x0800abdd
 800ab5c:	0800abdd 	.word	0x0800abdd
 800ab60:	0800abdd 	.word	0x0800abdd
 800ab64:	0800abdd 	.word	0x0800abdd
 800ab68:	0800abc5 	.word	0x0800abc5
 800ab6c:	0800abdd 	.word	0x0800abdd
 800ab70:	0800abdd 	.word	0x0800abdd
 800ab74:	0800abdd 	.word	0x0800abdd
 800ab78:	0800abdd 	.word	0x0800abdd
 800ab7c:	0800abdd 	.word	0x0800abdd
 800ab80:	0800abdd 	.word	0x0800abdd
 800ab84:	0800abdd 	.word	0x0800abdd
 800ab88:	0800abcd 	.word	0x0800abcd
 800ab8c:	0800abdd 	.word	0x0800abdd
 800ab90:	0800abdd 	.word	0x0800abdd
 800ab94:	0800abdd 	.word	0x0800abdd
 800ab98:	0800abdd 	.word	0x0800abdd
 800ab9c:	0800abdd 	.word	0x0800abdd
 800aba0:	0800abdd 	.word	0x0800abdd
 800aba4:	0800abdd 	.word	0x0800abdd
 800aba8:	0800abd5 	.word	0x0800abd5
 800abac:	2301      	movs	r3, #1
 800abae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb2:	e222      	b.n	800affa <UART_SetConfig+0x5ae>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abba:	e21e      	b.n	800affa <UART_SetConfig+0x5ae>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc2:	e21a      	b.n	800affa <UART_SetConfig+0x5ae>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abca:	e216      	b.n	800affa <UART_SetConfig+0x5ae>
 800abcc:	2320      	movs	r3, #32
 800abce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abd2:	e212      	b.n	800affa <UART_SetConfig+0x5ae>
 800abd4:	2340      	movs	r3, #64	; 0x40
 800abd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abda:	e20e      	b.n	800affa <UART_SetConfig+0x5ae>
 800abdc:	2380      	movs	r3, #128	; 0x80
 800abde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe2:	e20a      	b.n	800affa <UART_SetConfig+0x5ae>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a6b      	ldr	r2, [pc, #428]	; (800ad98 <UART_SetConfig+0x34c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d130      	bne.n	800ac50 <UART_SetConfig+0x204>
 800abee:	4b69      	ldr	r3, [pc, #420]	; (800ad94 <UART_SetConfig+0x348>)
 800abf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	2b05      	cmp	r3, #5
 800abf8:	d826      	bhi.n	800ac48 <UART_SetConfig+0x1fc>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <UART_SetConfig+0x1b4>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac19 	.word	0x0800ac19
 800ac04:	0800ac21 	.word	0x0800ac21
 800ac08:	0800ac29 	.word	0x0800ac29
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	e1ec      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac20:	2304      	movs	r3, #4
 800ac22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac26:	e1e8      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac28:	2308      	movs	r3, #8
 800ac2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2e:	e1e4      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac30:	2310      	movs	r3, #16
 800ac32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac36:	e1e0      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac3e:	e1dc      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac40:	2340      	movs	r3, #64	; 0x40
 800ac42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac46:	e1d8      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac48:	2380      	movs	r3, #128	; 0x80
 800ac4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4e:	e1d4      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a51      	ldr	r2, [pc, #324]	; (800ad9c <UART_SetConfig+0x350>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d130      	bne.n	800acbc <UART_SetConfig+0x270>
 800ac5a:	4b4e      	ldr	r3, [pc, #312]	; (800ad94 <UART_SetConfig+0x348>)
 800ac5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	d826      	bhi.n	800acb4 <UART_SetConfig+0x268>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <UART_SetConfig+0x220>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac8d 	.word	0x0800ac8d
 800ac74:	0800ac95 	.word	0x0800ac95
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800aca5 	.word	0x0800aca5
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	2300      	movs	r3, #0
 800ac86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8a:	e1b6      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac92:	e1b2      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac94:	2308      	movs	r3, #8
 800ac96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9a:	e1ae      	b.n	800affa <UART_SetConfig+0x5ae>
 800ac9c:	2310      	movs	r3, #16
 800ac9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aca2:	e1aa      	b.n	800affa <UART_SetConfig+0x5ae>
 800aca4:	2320      	movs	r3, #32
 800aca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acaa:	e1a6      	b.n	800affa <UART_SetConfig+0x5ae>
 800acac:	2340      	movs	r3, #64	; 0x40
 800acae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb2:	e1a2      	b.n	800affa <UART_SetConfig+0x5ae>
 800acb4:	2380      	movs	r3, #128	; 0x80
 800acb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acba:	e19e      	b.n	800affa <UART_SetConfig+0x5ae>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a37      	ldr	r2, [pc, #220]	; (800ada0 <UART_SetConfig+0x354>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d130      	bne.n	800ad28 <UART_SetConfig+0x2dc>
 800acc6:	4b33      	ldr	r3, [pc, #204]	; (800ad94 <UART_SetConfig+0x348>)
 800acc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acca:	f003 0307 	and.w	r3, r3, #7
 800acce:	2b05      	cmp	r3, #5
 800acd0:	d826      	bhi.n	800ad20 <UART_SetConfig+0x2d4>
 800acd2:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <UART_SetConfig+0x28c>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800acf1 	.word	0x0800acf1
 800acdc:	0800acf9 	.word	0x0800acf9
 800ace0:	0800ad01 	.word	0x0800ad01
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad11 	.word	0x0800ad11
 800acec:	0800ad19 	.word	0x0800ad19
 800acf0:	2300      	movs	r3, #0
 800acf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf6:	e180      	b.n	800affa <UART_SetConfig+0x5ae>
 800acf8:	2304      	movs	r3, #4
 800acfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfe:	e17c      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad00:	2308      	movs	r3, #8
 800ad02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad06:	e178      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad08:	2310      	movs	r3, #16
 800ad0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad0e:	e174      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad10:	2320      	movs	r3, #32
 800ad12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad16:	e170      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad18:	2340      	movs	r3, #64	; 0x40
 800ad1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1e:	e16c      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad20:	2380      	movs	r3, #128	; 0x80
 800ad22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad26:	e168      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a1d      	ldr	r2, [pc, #116]	; (800ada4 <UART_SetConfig+0x358>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d142      	bne.n	800adb8 <UART_SetConfig+0x36c>
 800ad32:	4b18      	ldr	r3, [pc, #96]	; (800ad94 <UART_SetConfig+0x348>)
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	d838      	bhi.n	800adb0 <UART_SetConfig+0x364>
 800ad3e:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <UART_SetConfig+0x2f8>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad5d 	.word	0x0800ad5d
 800ad48:	0800ad65 	.word	0x0800ad65
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	0800ad75 	.word	0x0800ad75
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ada9 	.word	0x0800ada9
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad62:	e14a      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad64:	2304      	movs	r3, #4
 800ad66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6a:	e146      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad72:	e142      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad74:	2310      	movs	r3, #16
 800ad76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7a:	e13e      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad82:	e13a      	b.n	800affa <UART_SetConfig+0x5ae>
 800ad84:	cfff69f3 	.word	0xcfff69f3
 800ad88:	58000c00 	.word	0x58000c00
 800ad8c:	11fff4ff 	.word	0x11fff4ff
 800ad90:	40011000 	.word	0x40011000
 800ad94:	58024400 	.word	0x58024400
 800ad98:	40004400 	.word	0x40004400
 800ad9c:	40004800 	.word	0x40004800
 800ada0:	40004c00 	.word	0x40004c00
 800ada4:	40005000 	.word	0x40005000
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adae:	e124      	b.n	800affa <UART_SetConfig+0x5ae>
 800adb0:	2380      	movs	r3, #128	; 0x80
 800adb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb6:	e120      	b.n	800affa <UART_SetConfig+0x5ae>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4acc      	ldr	r2, [pc, #816]	; (800b0f0 <UART_SetConfig+0x6a4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d176      	bne.n	800aeb0 <UART_SetConfig+0x464>
 800adc2:	4bcc      	ldr	r3, [pc, #816]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adca:	2b28      	cmp	r3, #40	; 0x28
 800adcc:	d86c      	bhi.n	800aea8 <UART_SetConfig+0x45c>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x388>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae79 	.word	0x0800ae79
 800add8:	0800aea9 	.word	0x0800aea9
 800addc:	0800aea9 	.word	0x0800aea9
 800ade0:	0800aea9 	.word	0x0800aea9
 800ade4:	0800aea9 	.word	0x0800aea9
 800ade8:	0800aea9 	.word	0x0800aea9
 800adec:	0800aea9 	.word	0x0800aea9
 800adf0:	0800aea9 	.word	0x0800aea9
 800adf4:	0800ae81 	.word	0x0800ae81
 800adf8:	0800aea9 	.word	0x0800aea9
 800adfc:	0800aea9 	.word	0x0800aea9
 800ae00:	0800aea9 	.word	0x0800aea9
 800ae04:	0800aea9 	.word	0x0800aea9
 800ae08:	0800aea9 	.word	0x0800aea9
 800ae0c:	0800aea9 	.word	0x0800aea9
 800ae10:	0800aea9 	.word	0x0800aea9
 800ae14:	0800ae89 	.word	0x0800ae89
 800ae18:	0800aea9 	.word	0x0800aea9
 800ae1c:	0800aea9 	.word	0x0800aea9
 800ae20:	0800aea9 	.word	0x0800aea9
 800ae24:	0800aea9 	.word	0x0800aea9
 800ae28:	0800aea9 	.word	0x0800aea9
 800ae2c:	0800aea9 	.word	0x0800aea9
 800ae30:	0800aea9 	.word	0x0800aea9
 800ae34:	0800ae91 	.word	0x0800ae91
 800ae38:	0800aea9 	.word	0x0800aea9
 800ae3c:	0800aea9 	.word	0x0800aea9
 800ae40:	0800aea9 	.word	0x0800aea9
 800ae44:	0800aea9 	.word	0x0800aea9
 800ae48:	0800aea9 	.word	0x0800aea9
 800ae4c:	0800aea9 	.word	0x0800aea9
 800ae50:	0800aea9 	.word	0x0800aea9
 800ae54:	0800ae99 	.word	0x0800ae99
 800ae58:	0800aea9 	.word	0x0800aea9
 800ae5c:	0800aea9 	.word	0x0800aea9
 800ae60:	0800aea9 	.word	0x0800aea9
 800ae64:	0800aea9 	.word	0x0800aea9
 800ae68:	0800aea9 	.word	0x0800aea9
 800ae6c:	0800aea9 	.word	0x0800aea9
 800ae70:	0800aea9 	.word	0x0800aea9
 800ae74:	0800aea1 	.word	0x0800aea1
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e0bc      	b.n	800affa <UART_SetConfig+0x5ae>
 800ae80:	2304      	movs	r3, #4
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e0b8      	b.n	800affa <UART_SetConfig+0x5ae>
 800ae88:	2308      	movs	r3, #8
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8e:	e0b4      	b.n	800affa <UART_SetConfig+0x5ae>
 800ae90:	2310      	movs	r3, #16
 800ae92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae96:	e0b0      	b.n	800affa <UART_SetConfig+0x5ae>
 800ae98:	2320      	movs	r3, #32
 800ae9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae9e:	e0ac      	b.n	800affa <UART_SetConfig+0x5ae>
 800aea0:	2340      	movs	r3, #64	; 0x40
 800aea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aea6:	e0a8      	b.n	800affa <UART_SetConfig+0x5ae>
 800aea8:	2380      	movs	r3, #128	; 0x80
 800aeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeae:	e0a4      	b.n	800affa <UART_SetConfig+0x5ae>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a90      	ldr	r2, [pc, #576]	; (800b0f8 <UART_SetConfig+0x6ac>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d130      	bne.n	800af1c <UART_SetConfig+0x4d0>
 800aeba:	4b8e      	ldr	r3, [pc, #568]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800aebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	2b05      	cmp	r3, #5
 800aec4:	d826      	bhi.n	800af14 <UART_SetConfig+0x4c8>
 800aec6:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <UART_SetConfig+0x480>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800aee5 	.word	0x0800aee5
 800aed0:	0800aeed 	.word	0x0800aeed
 800aed4:	0800aef5 	.word	0x0800aef5
 800aed8:	0800aefd 	.word	0x0800aefd
 800aedc:	0800af05 	.word	0x0800af05
 800aee0:	0800af0d 	.word	0x0800af0d
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeea:	e086      	b.n	800affa <UART_SetConfig+0x5ae>
 800aeec:	2304      	movs	r3, #4
 800aeee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef2:	e082      	b.n	800affa <UART_SetConfig+0x5ae>
 800aef4:	2308      	movs	r3, #8
 800aef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefa:	e07e      	b.n	800affa <UART_SetConfig+0x5ae>
 800aefc:	2310      	movs	r3, #16
 800aefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af02:	e07a      	b.n	800affa <UART_SetConfig+0x5ae>
 800af04:	2320      	movs	r3, #32
 800af06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0a:	e076      	b.n	800affa <UART_SetConfig+0x5ae>
 800af0c:	2340      	movs	r3, #64	; 0x40
 800af0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af12:	e072      	b.n	800affa <UART_SetConfig+0x5ae>
 800af14:	2380      	movs	r3, #128	; 0x80
 800af16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1a:	e06e      	b.n	800affa <UART_SetConfig+0x5ae>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a76      	ldr	r2, [pc, #472]	; (800b0fc <UART_SetConfig+0x6b0>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d130      	bne.n	800af88 <UART_SetConfig+0x53c>
 800af26:	4b73      	ldr	r3, [pc, #460]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	f003 0307 	and.w	r3, r3, #7
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d826      	bhi.n	800af80 <UART_SetConfig+0x534>
 800af32:	a201      	add	r2, pc, #4	; (adr r2, 800af38 <UART_SetConfig+0x4ec>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800af51 	.word	0x0800af51
 800af3c:	0800af59 	.word	0x0800af59
 800af40:	0800af61 	.word	0x0800af61
 800af44:	0800af69 	.word	0x0800af69
 800af48:	0800af71 	.word	0x0800af71
 800af4c:	0800af79 	.word	0x0800af79
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af56:	e050      	b.n	800affa <UART_SetConfig+0x5ae>
 800af58:	2304      	movs	r3, #4
 800af5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5e:	e04c      	b.n	800affa <UART_SetConfig+0x5ae>
 800af60:	2308      	movs	r3, #8
 800af62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af66:	e048      	b.n	800affa <UART_SetConfig+0x5ae>
 800af68:	2310      	movs	r3, #16
 800af6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6e:	e044      	b.n	800affa <UART_SetConfig+0x5ae>
 800af70:	2320      	movs	r3, #32
 800af72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af76:	e040      	b.n	800affa <UART_SetConfig+0x5ae>
 800af78:	2340      	movs	r3, #64	; 0x40
 800af7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7e:	e03c      	b.n	800affa <UART_SetConfig+0x5ae>
 800af80:	2380      	movs	r3, #128	; 0x80
 800af82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af86:	e038      	b.n	800affa <UART_SetConfig+0x5ae>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a5c      	ldr	r2, [pc, #368]	; (800b100 <UART_SetConfig+0x6b4>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d130      	bne.n	800aff4 <UART_SetConfig+0x5a8>
 800af92:	4b58      	ldr	r3, [pc, #352]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800af94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	2b05      	cmp	r3, #5
 800af9c:	d826      	bhi.n	800afec <UART_SetConfig+0x5a0>
 800af9e:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <UART_SetConfig+0x558>)
 800afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800afc5 	.word	0x0800afc5
 800afac:	0800afcd 	.word	0x0800afcd
 800afb0:	0800afd5 	.word	0x0800afd5
 800afb4:	0800afdd 	.word	0x0800afdd
 800afb8:	0800afe5 	.word	0x0800afe5
 800afbc:	2302      	movs	r3, #2
 800afbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc2:	e01a      	b.n	800affa <UART_SetConfig+0x5ae>
 800afc4:	2304      	movs	r3, #4
 800afc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afca:	e016      	b.n	800affa <UART_SetConfig+0x5ae>
 800afcc:	2308      	movs	r3, #8
 800afce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd2:	e012      	b.n	800affa <UART_SetConfig+0x5ae>
 800afd4:	2310      	movs	r3, #16
 800afd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afda:	e00e      	b.n	800affa <UART_SetConfig+0x5ae>
 800afdc:	2320      	movs	r3, #32
 800afde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe2:	e00a      	b.n	800affa <UART_SetConfig+0x5ae>
 800afe4:	2340      	movs	r3, #64	; 0x40
 800afe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afea:	e006      	b.n	800affa <UART_SetConfig+0x5ae>
 800afec:	2380      	movs	r3, #128	; 0x80
 800afee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff2:	e002      	b.n	800affa <UART_SetConfig+0x5ae>
 800aff4:	2380      	movs	r3, #128	; 0x80
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a40      	ldr	r2, [pc, #256]	; (800b100 <UART_SetConfig+0x6b4>)
 800b000:	4293      	cmp	r3, r2
 800b002:	f040 80ef 	bne.w	800b1e4 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b00a:	2b20      	cmp	r3, #32
 800b00c:	dc46      	bgt.n	800b09c <UART_SetConfig+0x650>
 800b00e:	2b02      	cmp	r3, #2
 800b010:	f2c0 8081 	blt.w	800b116 <UART_SetConfig+0x6ca>
 800b014:	3b02      	subs	r3, #2
 800b016:	2b1e      	cmp	r3, #30
 800b018:	d87d      	bhi.n	800b116 <UART_SetConfig+0x6ca>
 800b01a:	a201      	add	r2, pc, #4	; (adr r2, 800b020 <UART_SetConfig+0x5d4>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b0a3 	.word	0x0800b0a3
 800b024:	0800b117 	.word	0x0800b117
 800b028:	0800b0ab 	.word	0x0800b0ab
 800b02c:	0800b117 	.word	0x0800b117
 800b030:	0800b117 	.word	0x0800b117
 800b034:	0800b117 	.word	0x0800b117
 800b038:	0800b0bb 	.word	0x0800b0bb
 800b03c:	0800b117 	.word	0x0800b117
 800b040:	0800b117 	.word	0x0800b117
 800b044:	0800b117 	.word	0x0800b117
 800b048:	0800b117 	.word	0x0800b117
 800b04c:	0800b117 	.word	0x0800b117
 800b050:	0800b117 	.word	0x0800b117
 800b054:	0800b117 	.word	0x0800b117
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	0800b117 	.word	0x0800b117
 800b060:	0800b117 	.word	0x0800b117
 800b064:	0800b117 	.word	0x0800b117
 800b068:	0800b117 	.word	0x0800b117
 800b06c:	0800b117 	.word	0x0800b117
 800b070:	0800b117 	.word	0x0800b117
 800b074:	0800b117 	.word	0x0800b117
 800b078:	0800b117 	.word	0x0800b117
 800b07c:	0800b117 	.word	0x0800b117
 800b080:	0800b117 	.word	0x0800b117
 800b084:	0800b117 	.word	0x0800b117
 800b088:	0800b117 	.word	0x0800b117
 800b08c:	0800b117 	.word	0x0800b117
 800b090:	0800b117 	.word	0x0800b117
 800b094:	0800b117 	.word	0x0800b117
 800b098:	0800b109 	.word	0x0800b109
 800b09c:	2b40      	cmp	r3, #64	; 0x40
 800b09e:	d036      	beq.n	800b10e <UART_SetConfig+0x6c2>
 800b0a0:	e039      	b.n	800b116 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0a2:	f7fd fafb 	bl	800869c <HAL_RCCEx_GetD3PCLK1Freq>
 800b0a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b0a8:	e03b      	b.n	800b122 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0aa:	f107 0314 	add.w	r3, r7, #20
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fd fb0a 	bl	80086c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0b8:	e033      	b.n	800b122 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fd fc56 	bl	8008970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0c8:	e02b      	b.n	800b122 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ca:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <UART_SetConfig+0x6a8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	08db      	lsrs	r3, r3, #3
 800b0dc:	f003 0303 	and.w	r3, r3, #3
 800b0e0:	4a08      	ldr	r2, [pc, #32]	; (800b104 <UART_SetConfig+0x6b8>)
 800b0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0e8:	e01b      	b.n	800b122 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 800b0ea:	4b06      	ldr	r3, [pc, #24]	; (800b104 <UART_SetConfig+0x6b8>)
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0ee:	e018      	b.n	800b122 <UART_SetConfig+0x6d6>
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	40007800 	.word	0x40007800
 800b0fc:	40007c00 	.word	0x40007c00
 800b100:	58000c00 	.word	0x58000c00
 800b104:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b108:	4bc4      	ldr	r3, [pc, #784]	; (800b41c <UART_SetConfig+0x9d0>)
 800b10a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b10c:	e009      	b.n	800b122 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b10e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b114:	e005      	b.n	800b122 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b120:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 81da 	beq.w	800b4de <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	4abc      	ldr	r2, [pc, #752]	; (800b420 <UART_SetConfig+0x9d4>)
 800b130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b134:	461a      	mov	r2, r3
 800b136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b138:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	4413      	add	r3, r2
 800b148:	6a3a      	ldr	r2, [r7, #32]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d305      	bcc.n	800b15a <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b154:	6a3a      	ldr	r2, [r7, #32]
 800b156:	429a      	cmp	r2, r3
 800b158:	d903      	bls.n	800b162 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b160:	e1bd      	b.n	800b4de <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	4618      	mov	r0, r3
 800b166:	f04f 0100 	mov.w	r1, #0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	4aac      	ldr	r2, [pc, #688]	; (800b420 <UART_SetConfig+0x9d4>)
 800b170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b174:	b29a      	uxth	r2, r3
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	f7f5 f8b1 	bl	80002e0 <__aeabi_uldivmod>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4610      	mov	r0, r2
 800b184:	4619      	mov	r1, r3
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	f04f 0300 	mov.w	r3, #0
 800b18e:	020b      	lsls	r3, r1, #8
 800b190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b194:	0202      	lsls	r2, r0, #8
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	6849      	ldr	r1, [r1, #4]
 800b19a:	0849      	lsrs	r1, r1, #1
 800b19c:	4608      	mov	r0, r1
 800b19e:	f04f 0100 	mov.w	r1, #0
 800b1a2:	1814      	adds	r4, r2, r0
 800b1a4:	eb43 0501 	adc.w	r5, r3, r1
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	f04f 0300 	mov.w	r3, #0
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	f7f5 f893 	bl	80002e0 <__aeabi_uldivmod>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4613      	mov	r3, r2
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1c8:	d308      	bcc.n	800b1dc <UART_SetConfig+0x790>
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1d0:	d204      	bcs.n	800b1dc <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d8:	60da      	str	r2, [r3, #12]
 800b1da:	e180      	b.n	800b4de <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b1e2:	e17c      	b.n	800b4de <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ec:	f040 80bf 	bne.w	800b36e <UART_SetConfig+0x922>
  {
    switch (clocksource)
 800b1f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	dc49      	bgt.n	800b28c <UART_SetConfig+0x840>
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	db7c      	blt.n	800b2f6 <UART_SetConfig+0x8aa>
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d87a      	bhi.n	800b2f6 <UART_SetConfig+0x8aa>
 800b200:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <UART_SetConfig+0x7bc>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b293 	.word	0x0800b293
 800b20c:	0800b29b 	.word	0x0800b29b
 800b210:	0800b2f7 	.word	0x0800b2f7
 800b214:	0800b2f7 	.word	0x0800b2f7
 800b218:	0800b2a3 	.word	0x0800b2a3
 800b21c:	0800b2f7 	.word	0x0800b2f7
 800b220:	0800b2f7 	.word	0x0800b2f7
 800b224:	0800b2f7 	.word	0x0800b2f7
 800b228:	0800b2b3 	.word	0x0800b2b3
 800b22c:	0800b2f7 	.word	0x0800b2f7
 800b230:	0800b2f7 	.word	0x0800b2f7
 800b234:	0800b2f7 	.word	0x0800b2f7
 800b238:	0800b2f7 	.word	0x0800b2f7
 800b23c:	0800b2f7 	.word	0x0800b2f7
 800b240:	0800b2f7 	.word	0x0800b2f7
 800b244:	0800b2f7 	.word	0x0800b2f7
 800b248:	0800b2c3 	.word	0x0800b2c3
 800b24c:	0800b2f7 	.word	0x0800b2f7
 800b250:	0800b2f7 	.word	0x0800b2f7
 800b254:	0800b2f7 	.word	0x0800b2f7
 800b258:	0800b2f7 	.word	0x0800b2f7
 800b25c:	0800b2f7 	.word	0x0800b2f7
 800b260:	0800b2f7 	.word	0x0800b2f7
 800b264:	0800b2f7 	.word	0x0800b2f7
 800b268:	0800b2f7 	.word	0x0800b2f7
 800b26c:	0800b2f7 	.word	0x0800b2f7
 800b270:	0800b2f7 	.word	0x0800b2f7
 800b274:	0800b2f7 	.word	0x0800b2f7
 800b278:	0800b2f7 	.word	0x0800b2f7
 800b27c:	0800b2f7 	.word	0x0800b2f7
 800b280:	0800b2f7 	.word	0x0800b2f7
 800b284:	0800b2f7 	.word	0x0800b2f7
 800b288:	0800b2e9 	.word	0x0800b2e9
 800b28c:	2b40      	cmp	r3, #64	; 0x40
 800b28e:	d02e      	beq.n	800b2ee <UART_SetConfig+0x8a2>
 800b290:	e031      	b.n	800b2f6 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b292:	f7fc fa65 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800b296:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b298:	e033      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b29a:	f7fc fa77 	bl	800778c <HAL_RCC_GetPCLK2Freq>
 800b29e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2a0:	e02f      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2a2:	f107 0314 	add.w	r3, r7, #20
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fd fa0e 	bl	80086c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2b0:	e027      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2b2:	f107 0308 	add.w	r3, r7, #8
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fd fb5a 	bl	8008970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2c0:	e01f      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2c2:	4b58      	ldr	r3, [pc, #352]	; (800b424 <UART_SetConfig+0x9d8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2ce:	4b55      	ldr	r3, [pc, #340]	; (800b424 <UART_SetConfig+0x9d8>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	08db      	lsrs	r3, r3, #3
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	4a53      	ldr	r2, [pc, #332]	; (800b428 <UART_SetConfig+0x9dc>)
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2e0:	e00f      	b.n	800b302 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 800b2e2:	4b51      	ldr	r3, [pc, #324]	; (800b428 <UART_SetConfig+0x9dc>)
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2e6:	e00c      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2e8:	4b4c      	ldr	r3, [pc, #304]	; (800b41c <UART_SetConfig+0x9d0>)
 800b2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2ec:	e009      	b.n	800b302 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2f4:	e005      	b.n	800b302 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 80ea 	beq.w	800b4de <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	4a44      	ldr	r2, [pc, #272]	; (800b420 <UART_SetConfig+0x9d4>)
 800b310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b314:	461a      	mov	r2, r3
 800b316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b318:	fbb3 f3f2 	udiv	r3, r3, r2
 800b31c:	005a      	lsls	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	085b      	lsrs	r3, r3, #1
 800b324:	441a      	add	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	2b0f      	cmp	r3, #15
 800b336:	d916      	bls.n	800b366 <UART_SetConfig+0x91a>
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33e:	d212      	bcs.n	800b366 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b342:	b29b      	uxth	r3, r3
 800b344:	f023 030f 	bic.w	r3, r3, #15
 800b348:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	085b      	lsrs	r3, r3, #1
 800b34e:	b29b      	uxth	r3, r3
 800b350:	f003 0307 	and.w	r3, r3, #7
 800b354:	b29a      	uxth	r2, r3
 800b356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b358:	4313      	orrs	r3, r2
 800b35a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b362:	60da      	str	r2, [r3, #12]
 800b364:	e0bb      	b.n	800b4de <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b36c:	e0b7      	b.n	800b4de <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b36e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b372:	2b20      	cmp	r3, #32
 800b374:	dc4a      	bgt.n	800b40c <UART_SetConfig+0x9c0>
 800b376:	2b00      	cmp	r3, #0
 800b378:	f2c0 8086 	blt.w	800b488 <UART_SetConfig+0xa3c>
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	f200 8083 	bhi.w	800b488 <UART_SetConfig+0xa3c>
 800b382:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <UART_SetConfig+0x93c>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b413 	.word	0x0800b413
 800b38c:	0800b42d 	.word	0x0800b42d
 800b390:	0800b489 	.word	0x0800b489
 800b394:	0800b489 	.word	0x0800b489
 800b398:	0800b435 	.word	0x0800b435
 800b39c:	0800b489 	.word	0x0800b489
 800b3a0:	0800b489 	.word	0x0800b489
 800b3a4:	0800b489 	.word	0x0800b489
 800b3a8:	0800b445 	.word	0x0800b445
 800b3ac:	0800b489 	.word	0x0800b489
 800b3b0:	0800b489 	.word	0x0800b489
 800b3b4:	0800b489 	.word	0x0800b489
 800b3b8:	0800b489 	.word	0x0800b489
 800b3bc:	0800b489 	.word	0x0800b489
 800b3c0:	0800b489 	.word	0x0800b489
 800b3c4:	0800b489 	.word	0x0800b489
 800b3c8:	0800b455 	.word	0x0800b455
 800b3cc:	0800b489 	.word	0x0800b489
 800b3d0:	0800b489 	.word	0x0800b489
 800b3d4:	0800b489 	.word	0x0800b489
 800b3d8:	0800b489 	.word	0x0800b489
 800b3dc:	0800b489 	.word	0x0800b489
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b489 	.word	0x0800b489
 800b3e8:	0800b489 	.word	0x0800b489
 800b3ec:	0800b489 	.word	0x0800b489
 800b3f0:	0800b489 	.word	0x0800b489
 800b3f4:	0800b489 	.word	0x0800b489
 800b3f8:	0800b489 	.word	0x0800b489
 800b3fc:	0800b489 	.word	0x0800b489
 800b400:	0800b489 	.word	0x0800b489
 800b404:	0800b489 	.word	0x0800b489
 800b408:	0800b47b 	.word	0x0800b47b
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d037      	beq.n	800b480 <UART_SetConfig+0xa34>
 800b410:	e03a      	b.n	800b488 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b412:	f7fc f9a5 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800b416:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b418:	e03c      	b.n	800b494 <UART_SetConfig+0xa48>
 800b41a:	bf00      	nop
 800b41c:	003d0900 	.word	0x003d0900
 800b420:	08014a88 	.word	0x08014a88
 800b424:	58024400 	.word	0x58024400
 800b428:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42c:	f7fc f9ae 	bl	800778c <HAL_RCC_GetPCLK2Freq>
 800b430:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b432:	e02f      	b.n	800b494 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b434:	f107 0314 	add.w	r3, r7, #20
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fd f945 	bl	80086c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b442:	e027      	b.n	800b494 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b444:	f107 0308 	add.w	r3, r7, #8
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fd fa91 	bl	8008970 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b452:	e01f      	b.n	800b494 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b454:	4b2c      	ldr	r3, [pc, #176]	; (800b508 <UART_SetConfig+0xabc>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0320 	and.w	r3, r3, #32
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d009      	beq.n	800b474 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b460:	4b29      	ldr	r3, [pc, #164]	; (800b508 <UART_SetConfig+0xabc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	08db      	lsrs	r3, r3, #3
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	4a28      	ldr	r2, [pc, #160]	; (800b50c <UART_SetConfig+0xac0>)
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b472:	e00f      	b.n	800b494 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 800b474:	4b25      	ldr	r3, [pc, #148]	; (800b50c <UART_SetConfig+0xac0>)
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b478:	e00c      	b.n	800b494 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b47a:	4b25      	ldr	r3, [pc, #148]	; (800b510 <UART_SetConfig+0xac4>)
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b47e:	e009      	b.n	800b494 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b486:	e005      	b.n	800b494 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b492:	bf00      	nop
    }

    if (pclk != 0U)
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	4a1d      	ldr	r2, [pc, #116]	; (800b514 <UART_SetConfig+0xac8>)
 800b4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	085b      	lsrs	r3, r3, #1
 800b4b2:	441a      	add	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	d908      	bls.n	800b4d8 <UART_SetConfig+0xa8c>
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4cc:	d204      	bcs.n	800b4d8 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	60da      	str	r2, [r3, #12]
 800b4d6:	e002      	b.n	800b4de <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3738      	adds	r7, #56	; 0x38
 800b502:	46bd      	mov	sp, r7
 800b504:	bdb0      	pop	{r4, r5, r7, pc}
 800b506:	bf00      	nop
 800b508:	58024400 	.word	0x58024400
 800b50c:	03d09000 	.word	0x03d09000
 800b510:	003d0900 	.word	0x003d0900
 800b514:	08014a88 	.word	0x08014a88

0800b518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	f003 0302 	and.w	r3, r3, #2
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00a      	beq.n	800b564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	430a      	orrs	r2, r1
 800b562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01a      	beq.n	800b62e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	430a      	orrs	r2, r1
 800b60c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b616:	d10a      	bne.n	800b62e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	605a      	str	r2, [r3, #4]
  }
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af02      	add	r7, sp, #8
 800b662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b66c:	f7f6 fd90 	bl	8002190 <HAL_GetTick>
 800b670:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d10e      	bne.n	800b69e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f82c 	bl	800b6ec <UART_WaitOnFlagUntilTimeout>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e022      	b.n	800b6e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0304 	and.w	r3, r3, #4
 800b6a8:	2b04      	cmp	r3, #4
 800b6aa:	d10e      	bne.n	800b6ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f816 	bl	800b6ec <UART_WaitOnFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e00c      	b.n	800b6e4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6fc:	e062      	b.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b704:	d05e      	beq.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b706:	f7f6 fd43 	bl	8002190 <HAL_GetTick>
 800b70a:	4602      	mov	r2, r0
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	69ba      	ldr	r2, [r7, #24]
 800b712:	429a      	cmp	r2, r3
 800b714:	d302      	bcc.n	800b71c <UART_WaitOnFlagUntilTimeout+0x30>
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d11d      	bne.n	800b758 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b72a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0201 	bic.w	r2, r2, #1
 800b73a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2220      	movs	r2, #32
 800b740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2220      	movs	r2, #32
 800b748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e045      	b.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	d02e      	beq.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b774:	d126      	bne.n	800b7c4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b77e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b78e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689a      	ldr	r2, [r3, #8]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0201 	bic.w	r2, r2, #1
 800b79e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2220      	movs	r2, #32
 800b7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e00f      	b.n	800b7e4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69da      	ldr	r2, [r3, #28]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	bf0c      	ite	eq
 800b7d4:	2301      	moveq	r3, #1
 800b7d6:	2300      	movne	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	79fb      	ldrb	r3, [r7, #7]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d08d      	beq.n	800b6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b802:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6899      	ldr	r1, [r3, #8]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4b08      	ldr	r3, [pc, #32]	; (800b830 <UART_EndRxTransfer+0x44>)
 800b810:	400b      	ands	r3, r1
 800b812:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2220      	movs	r2, #32
 800b818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	effffffe 	.word	0xeffffffe

0800b834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff f8f0 	bl	800aa38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b876:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff f8cc 	bl	800aa24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e027      	b.n	800b936 <HAL_UARTEx_DisableFifoMode+0x66>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2224      	movs	r2, #36	; 0x24
 800b8f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f022 0201 	bic.w	r2, r2, #1
 800b90c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b914:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2220      	movs	r2, #32
 800b928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b084      	sub	sp, #16
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b952:	2b01      	cmp	r3, #1
 800b954:	d101      	bne.n	800b95a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b956:	2302      	movs	r3, #2
 800b958:	e02d      	b.n	800b9b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2224      	movs	r2, #36	; 0x24
 800b966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f022 0201 	bic.w	r2, r2, #1
 800b980:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f850 	bl	800ba3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d101      	bne.n	800b9d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9d2:	2302      	movs	r3, #2
 800b9d4:	e02d      	b.n	800ba32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2224      	movs	r2, #36	; 0x24
 800b9e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0201 	bic.w	r2, r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f812 	bl	800ba3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b089      	sub	sp, #36	; 0x24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ba44:	4a2f      	ldr	r2, [pc, #188]	; (800bb04 <UARTEx_SetNbDataToProcess+0xc8>)
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba4e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ba52:	4a2d      	ldr	r2, [pc, #180]	; (800bb08 <UARTEx_SetNbDataToProcess+0xcc>)
 800ba54:	f107 030c 	add.w	r3, r7, #12
 800ba58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba5c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d108      	bne.n	800ba7a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba78:	e03d      	b.n	800baf6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba7a:	2310      	movs	r3, #16
 800ba7c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba7e:	2310      	movs	r3, #16
 800ba80:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	0e5b      	lsrs	r3, r3, #25
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	f003 0307 	and.w	r3, r3, #7
 800ba90:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	0f5b      	lsrs	r3, r3, #29
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 0307 	and.w	r3, r3, #7
 800baa0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800baa2:	7fbb      	ldrb	r3, [r7, #30]
 800baa4:	7f3a      	ldrb	r2, [r7, #28]
 800baa6:	f107 0120 	add.w	r1, r7, #32
 800baaa:	440a      	add	r2, r1
 800baac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bab0:	fb02 f303 	mul.w	r3, r2, r3
 800bab4:	7f3a      	ldrb	r2, [r7, #28]
 800bab6:	f107 0120 	add.w	r1, r7, #32
 800baba:	440a      	add	r2, r1
 800babc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bac0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bacc:	7ffb      	ldrb	r3, [r7, #31]
 800bace:	7f7a      	ldrb	r2, [r7, #29]
 800bad0:	f107 0120 	add.w	r1, r7, #32
 800bad4:	440a      	add	r2, r1
 800bad6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bada:	fb02 f303 	mul.w	r3, r2, r3
 800bade:	7f7a      	ldrb	r2, [r7, #29]
 800bae0:	f107 0120 	add.w	r1, r7, #32
 800bae4:	440a      	add	r2, r1
 800bae6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800baea:	fb93 f3f2 	sdiv	r3, r3, r2
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800baf6:	bf00      	nop
 800baf8:	3724      	adds	r7, #36	; 0x24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	080147fc 	.word	0x080147fc
 800bb08:	08014804 	.word	0x08014804

0800bb0c <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, FMC_NAND_InitTypeDef *Init)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <FMC_NAND_Init+0x50>)
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	6851      	ldr	r1, [r2, #4]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	6892      	ldr	r2, [r2, #8]
 800bb26:	4311      	orrs	r1, r2
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	68d2      	ldr	r2, [r2, #12]
 800bb2c:	4311      	orrs	r1, r2
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	6912      	ldr	r2, [r2, #16]
 800bb32:	4311      	orrs	r1, r2
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	6952      	ldr	r2, [r2, #20]
 800bb38:	0252      	lsls	r2, r2, #9
 800bb3a:	4311      	orrs	r1, r2
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	6992      	ldr	r2, [r2, #24]
 800bb40:	0352      	lsls	r2, r2, #13
 800bb42:	430a      	orrs	r2, r1
 800bb44:	4313      	orrs	r3, r2
 800bb46:	f043 0208 	orr.w	r2, r3, #8
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	fff00189 	.word	0xfff00189

0800bb60 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PMEM, PMEM_CLEAR_MASK, (Timing->SetupTime                                 |
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	021b      	lsls	r3, r3, #8
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	041b      	lsls	r3, r3, #16
 800bb82:	431a      	orrs	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	061b      	lsls	r3, r3, #24
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	609a      	str	r2, [r3, #8]
                                             ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PMEM_MEMHIZ_Pos)));

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device, FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	60f8      	str	r0, [r7, #12]
 800bba6:	60b9      	str	r1, [r7, #8]
 800bba8:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PATT, PATT_CLEAR_MASK, (Timing->SetupTime                                 |
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	021b      	lsls	r3, r3, #8
 800bbb8:	431a      	orrs	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	041b      	lsls	r3, r3, #16
 800bbc0:	431a      	orrs	r2, r3
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	061b      	lsls	r3, r3, #24
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60da      	str	r2, [r3, #12]
                                             ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
                                             ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
                                             ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos)));

  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d121      	bne.n	800bc32 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b27      	ldr	r3, [pc, #156]	; (800bc90 <FMC_SDRAM_Init+0xb4>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	6851      	ldr	r1, [r2, #4]
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	6892      	ldr	r2, [r2, #8]
 800bbfe:	4311      	orrs	r1, r2
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	68d2      	ldr	r2, [r2, #12]
 800bc04:	4311      	orrs	r1, r2
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	6912      	ldr	r2, [r2, #16]
 800bc0a:	4311      	orrs	r1, r2
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	6952      	ldr	r2, [r2, #20]
 800bc10:	4311      	orrs	r1, r2
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	6992      	ldr	r2, [r2, #24]
 800bc16:	4311      	orrs	r1, r2
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	69d2      	ldr	r2, [r2, #28]
 800bc1c:	4311      	orrs	r1, r2
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	6a12      	ldr	r2, [r2, #32]
 800bc22:	4311      	orrs	r1, r2
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	e026      	b.n	800bc80 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	69d9      	ldr	r1, [r3, #28]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	4319      	orrs	r1, r3
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685a      	ldr	r2, [r3, #4]
 800bc54:	4b0e      	ldr	r3, [pc, #56]	; (800bc90 <FMC_SDRAM_Init+0xb4>)
 800bc56:	4013      	ands	r3, r2
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	6851      	ldr	r1, [r2, #4]
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	6892      	ldr	r2, [r2, #8]
 800bc60:	4311      	orrs	r1, r2
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	68d2      	ldr	r2, [r2, #12]
 800bc66:	4311      	orrs	r1, r2
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	6912      	ldr	r2, [r2, #16]
 800bc6c:	4311      	orrs	r1, r2
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	6952      	ldr	r2, [r2, #20]
 800bc72:	4311      	orrs	r1, r2
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	6992      	ldr	r2, [r2, #24]
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	ffff8000 	.word	0xffff8000

0800bc94 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d128      	bne.n	800bcf8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	1e59      	subs	r1, r3, #1
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	4319      	orrs	r1, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	021b      	lsls	r3, r3, #8
 800bcc6:	4319      	orrs	r1, r3
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	031b      	lsls	r3, r3, #12
 800bcd0:	4319      	orrs	r1, r3
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	041b      	lsls	r3, r3, #16
 800bcda:	4319      	orrs	r1, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	051b      	lsls	r3, r3, #20
 800bce4:	4319      	orrs	r1, r3
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	061b      	lsls	r3, r3, #24
 800bcee:	430b      	orrs	r3, r1
 800bcf0:	431a      	orrs	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	609a      	str	r2, [r3, #8]
 800bcf6:	e02d      	b.n	800bd54 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	689a      	ldr	r2, [r3, #8]
 800bcfc:	4b19      	ldr	r3, [pc, #100]	; (800bd64 <FMC_SDRAM_Timing_Init+0xd0>)
 800bcfe:	4013      	ands	r3, r2
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	68d2      	ldr	r2, [r2, #12]
 800bd04:	3a01      	subs	r2, #1
 800bd06:	0311      	lsls	r1, r2, #12
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	6952      	ldr	r2, [r2, #20]
 800bd0c:	3a01      	subs	r2, #1
 800bd0e:	0512      	lsls	r2, r2, #20
 800bd10:	430a      	orrs	r2, r1
 800bd12:	431a      	orrs	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	1e59      	subs	r1, r3, #1
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	011b      	lsls	r3, r3, #4
 800bd2e:	4319      	orrs	r1, r3
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	4319      	orrs	r1, r3
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	041b      	lsls	r3, r3, #16
 800bd42:	4319      	orrs	r1, r3
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	061b      	lsls	r3, r3, #24
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	ff0f0fff 	.word	0xff0f0fff

0800bd68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd68:	b084      	sub	sp, #16
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	f107 001c 	add.w	r0, r7, #28
 800bd76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d120      	bne.n	800bdc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	4b25      	ldr	r3, [pc, #148]	; (800be28 <USB_CoreInit+0xc0>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d105      	bne.n	800bdb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f94c 	bl	800c054 <USB_CoreReset>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]
 800bdc0:	e01a      	b.n	800bdf8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f940 	bl	800c054 <USB_CoreReset>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bdd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	639a      	str	r2, [r3, #56]	; 0x38
 800bdea:	e005      	b.n	800bdf8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d10b      	bne.n	800be16 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f043 0206 	orr.w	r2, r3, #6
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	f043 0220 	orr.w	r2, r3, #32
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be16:	7bfb      	ldrb	r3, [r7, #15]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be22:	b004      	add	sp, #16
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	ffbdffbf 	.word	0xffbdffbf

0800be2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f043 0201 	orr.w	r2, r3, #1
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f023 0201 	bic.w	r2, r3, #1
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d106      	bne.n	800be9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	60da      	str	r2, [r3, #12]
 800be9a:	e00b      	b.n	800beb4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60da      	str	r2, [r3, #12]
 800beae:	e001      	b.n	800beb4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e003      	b.n	800bebc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800beb4:	2032      	movs	r0, #50	; 0x32
 800beb6:	f7f6 f977 	bl	80021a8 <HAL_Delay>

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	019b      	lsls	r3, r3, #6
 800bed6:	f043 0220 	orr.w	r2, r3, #32
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4a09      	ldr	r2, [pc, #36]	; (800bf0c <USB_FlushTxFifo+0x48>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d901      	bls.n	800bef0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e006      	b.n	800befe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b20      	cmp	r3, #32
 800befa:	d0f0      	beq.n	800bede <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3714      	adds	r7, #20
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	00030d40 	.word	0x00030d40

0800bf10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2210      	movs	r2, #16
 800bf20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3301      	adds	r3, #1
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <USB_FlushRxFifo+0x40>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d901      	bls.n	800bf34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e006      	b.n	800bf42 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	2b10      	cmp	r3, #16
 800bf3e:	d0f0      	beq.n	800bf22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3714      	adds	r7, #20
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	00030d40 	.word	0x00030d40

0800bf54 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	; 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	460b      	mov	r3, r1
 800bf64:	71fb      	strb	r3, [r7, #7]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bf72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d11a      	bne.n	800bfb0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf7a:	88bb      	ldrh	r3, [r7, #4]
 800bf7c:	3303      	adds	r3, #3
 800bf7e:	089b      	lsrs	r3, r3, #2
 800bf80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf82:	2300      	movs	r3, #0
 800bf84:	61bb      	str	r3, [r7, #24]
 800bf86:	e00f      	b.n	800bfa8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf88:	79fb      	ldrb	r3, [r7, #7]
 800bf8a:	031a      	lsls	r2, r3, #12
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4413      	add	r3, r2
 800bf90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf94:	461a      	mov	r2, r3
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d3eb      	bcc.n	800bf88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3724      	adds	r7, #36	; 0x24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr

0800bfbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b089      	sub	sp, #36	; 0x24
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	60f8      	str	r0, [r7, #12]
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bfd4:	88fb      	ldrh	r3, [r7, #6]
 800bfd6:	3303      	adds	r3, #3
 800bfd8:	089b      	lsrs	r3, r3, #2
 800bfda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	e00b      	b.n	800bffa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	601a      	str	r2, [r3, #0]
    pDest++;
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	3304      	adds	r3, #4
 800bff2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	3301      	adds	r3, #1
 800bff8:	61bb      	str	r3, [r7, #24]
 800bffa:	69ba      	ldr	r2, [r7, #24]
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d3ef      	bcc.n	800bfe2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c002:	69fb      	ldr	r3, [r7, #28]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3724      	adds	r7, #36	; 0x24
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4013      	ands	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c028:	68fb      	ldr	r3, [r7, #12]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	f003 0301 	and.w	r3, r3, #1
}
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
	...

0800c054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3301      	adds	r3, #1
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	4a13      	ldr	r2, [pc, #76]	; (800c0b8 <USB_CoreReset+0x64>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d901      	bls.n	800c072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e01b      	b.n	800c0aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	daf2      	bge.n	800c060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f043 0201 	orr.w	r2, r3, #1
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	3301      	adds	r3, #1
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	4a09      	ldr	r2, [pc, #36]	; (800c0b8 <USB_CoreReset+0x64>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d901      	bls.n	800c09c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c098:	2303      	movs	r3, #3
 800c09a:	e006      	b.n	800c0aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	f003 0301 	and.w	r3, r3, #1
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d0f0      	beq.n	800c08a <USB_CoreReset+0x36>

  return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	00030d40 	.word	0x00030d40

0800c0bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0bc:	b084      	sub	sp, #16
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
 800c0c6:	f107 001c 	add.w	r0, r7, #28
 800c0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0d8:	461a      	mov	r2, r3
 800c0da:	2300      	movs	r3, #0
 800c0dc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d018      	beq.n	800c134 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c104:	2b01      	cmp	r3, #1
 800c106:	d10a      	bne.n	800c11e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68ba      	ldr	r2, [r7, #8]
 800c112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c116:	f043 0304 	orr.w	r3, r3, #4
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	e014      	b.n	800c148 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c12c:	f023 0304 	bic.w	r3, r3, #4
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	e009      	b.n	800c148 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c142:	f023 0304 	bic.w	r3, r3, #4
 800c146:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c148:	2110      	movs	r1, #16
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff feba 	bl	800bec4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff fedd 	bl	800bf10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	e015      	b.n	800c188 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	4413      	add	r3, r2
 800c164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c168:	461a      	mov	r2, r3
 800c16a:	f04f 33ff 	mov.w	r3, #4294967295
 800c16e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	4413      	add	r3, r2
 800c178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17c:	461a      	mov	r2, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3301      	adds	r3, #1
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d3e5      	bcc.n	800c15c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c190:	2101      	movs	r1, #1
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f8ac 	bl	800c2f0 <USB_DriveVbus>

  HAL_Delay(200U);
 800c198:	20c8      	movs	r0, #200	; 0xc8
 800c19a:	f7f6 f805 	bl	80021a8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1aa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a14      	ldr	r2, [pc, #80]	; (800c214 <USB_HostInit+0x158>)
 800c1c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a13      	ldr	r2, [pc, #76]	; (800c218 <USB_HostInit+0x15c>)
 800c1ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c1ce:	e009      	b.n	800c1e4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2280      	movs	r2, #128	; 0x80
 800c1d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a10      	ldr	r2, [pc, #64]	; (800c21c <USB_HostInit+0x160>)
 800c1da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a10      	ldr	r2, [pc, #64]	; (800c220 <USB_HostInit+0x164>)
 800c1e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d105      	bne.n	800c1f6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	f043 0210 	orr.w	r2, r3, #16
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	699a      	ldr	r2, [r3, #24]
 800c1fa:	4b0a      	ldr	r3, [pc, #40]	; (800c224 <USB_HostInit+0x168>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c202:	2300      	movs	r3, #0
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c20e:	b004      	add	sp, #16
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	01000200 	.word	0x01000200
 800c218:	00e00300 	.word	0x00e00300
 800c21c:	00600080 	.word	0x00600080
 800c220:	004000e0 	.word	0x004000e0
 800c224:	a3200008 	.word	0xa3200008

0800c228 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c246:	f023 0303 	bic.w	r3, r3, #3
 800c24a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	f003 0303 	and.w	r3, r3, #3
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c260:	4313      	orrs	r3, r2
 800c262:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c264:	78fb      	ldrb	r3, [r7, #3]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d107      	bne.n	800c27a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c270:	461a      	mov	r2, r3
 800c272:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c276:	6053      	str	r3, [r2, #4]
 800c278:	e009      	b.n	800c28e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d106      	bne.n	800c28e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c286:	461a      	mov	r2, r3
 800c288:	f241 7370 	movw	r3, #6000	; 0x1770
 800c28c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c2bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c2cc:	2064      	movs	r0, #100	; 0x64
 800c2ce:	f7f5 ff6b 	bl	80021a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c2e0:	200a      	movs	r0, #10
 800c2e2:	f7f5 ff61 	bl	80021a8 <HAL_Delay>

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c314:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d109      	bne.n	800c334 <USB_DriveVbus+0x44>
 800c320:	78fb      	ldrb	r3, [r7, #3]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d106      	bne.n	800c334 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c32e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c332:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c33e:	d109      	bne.n	800c354 <USB_DriveVbus+0x64>
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c34e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c352:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c362:	b480      	push	{r7}
 800c364:	b085      	sub	sp, #20
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	0c5b      	lsrs	r3, r3, #17
 800c380:	f003 0303 	and.w	r3, r3, #3
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	b29b      	uxth	r3, r3
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3714      	adds	r7, #20
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	70fb      	strb	r3, [r7, #3]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70bb      	strb	r3, [r7, #2]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c3d6:	78fb      	ldrb	r3, [r7, #3]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c3ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d87e      	bhi.n	800c4f0 <USB_HC_Init+0x13c>
 800c3f2:	a201      	add	r2, pc, #4	; (adr r2, 800c3f8 <USB_HC_Init+0x44>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c409 	.word	0x0800c409
 800c3fc:	0800c4b3 	.word	0x0800c4b3
 800c400:	0800c409 	.word	0x0800c409
 800c404:	0800c475 	.word	0x0800c475
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	015a      	lsls	r2, r3, #5
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	4413      	add	r3, r2
 800c410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c414:	461a      	mov	r2, r3
 800c416:	f240 439d 	movw	r3, #1181	; 0x49d
 800c41a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c41c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c420:	2b00      	cmp	r3, #0
 800c422:	da10      	bge.n	800c446 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	78fa      	ldrb	r2, [r7, #3]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c43e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c442:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c444:	e057      	b.n	800c4f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d051      	beq.n	800c4f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c452:	78fb      	ldrb	r3, [r7, #3]
 800c454:	015a      	lsls	r2, r3, #5
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	78fa      	ldrb	r2, [r7, #3]
 800c462:	0151      	lsls	r1, r2, #5
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	440a      	add	r2, r1
 800c468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c46c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c470:	60d3      	str	r3, [r2, #12]
      break;
 800c472:	e040      	b.n	800c4f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	015a      	lsls	r2, r3, #5
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	4413      	add	r3, r2
 800c47c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c480:	461a      	mov	r2, r3
 800c482:	f240 639d 	movw	r3, #1693	; 0x69d
 800c486:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c488:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	da34      	bge.n	800c4fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	4413      	add	r3, r2
 800c498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	78fa      	ldrb	r2, [r7, #3]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c4b0:	e023      	b.n	800c4fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4b2:	78fb      	ldrb	r3, [r7, #3]
 800c4b4:	015a      	lsls	r2, r3, #5
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4be:	461a      	mov	r2, r3
 800c4c0:	f240 2325 	movw	r3, #549	; 0x225
 800c4c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c4c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	da17      	bge.n	800c4fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c4ce:	78fb      	ldrb	r3, [r7, #3]
 800c4d0:	015a      	lsls	r2, r3, #5
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	78fa      	ldrb	r2, [r7, #3]
 800c4de:	0151      	lsls	r1, r2, #5
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	440a      	add	r2, r1
 800c4e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c4ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c4ee:	e006      	b.n	800c4fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c4f4:	e004      	b.n	800c500 <USB_HC_Init+0x14c>
      break;
 800c4f6:	bf00      	nop
 800c4f8:	e002      	b.n	800c500 <USB_HC_Init+0x14c>
      break;
 800c4fa:	bf00      	nop
 800c4fc:	e000      	b.n	800c500 <USB_HC_Init+0x14c>
      break;
 800c4fe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c506:	699a      	ldr	r2, [r3, #24]
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	f003 030f 	and.w	r3, r3, #15
 800c50e:	2101      	movs	r1, #1
 800c510:	fa01 f303 	lsl.w	r3, r1, r3
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c51a:	4313      	orrs	r3, r2
 800c51c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c52a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	da03      	bge.n	800c53a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c536:	613b      	str	r3, [r7, #16]
 800c538:	e001      	b.n	800c53e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c53e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c542:	2b02      	cmp	r3, #2
 800c544:	d103      	bne.n	800c54e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	e001      	b.n	800c552 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c552:	787b      	ldrb	r3, [r7, #1]
 800c554:	059b      	lsls	r3, r3, #22
 800c556:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c55a:	78bb      	ldrb	r3, [r7, #2]
 800c55c:	02db      	lsls	r3, r3, #11
 800c55e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c562:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c564:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c568:	049b      	lsls	r3, r3, #18
 800c56a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c56e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c570:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c572:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c576:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c57c:	78fb      	ldrb	r3, [r7, #3]
 800c57e:	0159      	lsls	r1, r3, #5
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	440b      	add	r3, r1
 800c584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c588:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c58e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c590:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c594:	2b03      	cmp	r3, #3
 800c596:	d10f      	bne.n	800c5b8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	78fa      	ldrb	r2, [r7, #3]
 800c5a8:	0151      	lsls	r1, r2, #5
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	440a      	add	r2, r1
 800c5ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop

0800c5c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08c      	sub	sp, #48	; 0x30
 800c5cc:	af02      	add	r7, sp, #8
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c5e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d028      	beq.n	800c644 <USB_HC_StartXfer+0x7c>
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d124      	bne.n	800c644 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10b      	bne.n	800c618 <USB_HC_StartXfer+0x50>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	795b      	ldrb	r3, [r3, #5]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d107      	bne.n	800c618 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	4619      	mov	r1, r3
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 fa2c 	bl	800ca6c <USB_DoPing>
      return HAL_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	e111      	b.n	800c83c <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d112      	bne.n	800c644 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	015a      	lsls	r2, r3, #5
 800c622:	6a3b      	ldr	r3, [r7, #32]
 800c624:	4413      	add	r3, r2
 800c626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	69fa      	ldr	r2, [r7, #28]
 800c62e:	0151      	lsls	r1, r2, #5
 800c630:	6a3a      	ldr	r2, [r7, #32]
 800c632:	440a      	add	r2, r1
 800c634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c638:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c63c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2200      	movs	r2, #0
 800c642:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d018      	beq.n	800c67e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	8912      	ldrh	r2, [r2, #8]
 800c654:	4413      	add	r3, r2
 800c656:	3b01      	subs	r3, #1
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	8912      	ldrh	r2, [r2, #8]
 800c65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c660:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c662:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c664:	8b7b      	ldrh	r3, [r7, #26]
 800c666:	429a      	cmp	r2, r3
 800c668:	d90b      	bls.n	800c682 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c66a:	8b7b      	ldrh	r3, [r7, #26]
 800c66c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c66e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	8912      	ldrh	r2, [r2, #8]
 800c674:	fb02 f203 	mul.w	r2, r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	611a      	str	r2, [r3, #16]
 800c67c:	e001      	b.n	800c682 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c67e:	2301      	movs	r3, #1
 800c680:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	78db      	ldrb	r3, [r3, #3]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c68a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	8912      	ldrh	r2, [r2, #8]
 800c690:	fb02 f203 	mul.w	r2, r2, r3
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	691b      	ldr	r3, [r3, #16]
 800c69c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6a2:	04d9      	lsls	r1, r3, #19
 800c6a4:	4b67      	ldr	r3, [pc, #412]	; (800c844 <USB_HC_StartXfer+0x27c>)
 800c6a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	7a9b      	ldrb	r3, [r3, #10]
 800c6ae:	075b      	lsls	r3, r3, #29
 800c6b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6b4:	69f9      	ldr	r1, [r7, #28]
 800c6b6:	0148      	lsls	r0, r1, #5
 800c6b8:	6a39      	ldr	r1, [r7, #32]
 800c6ba:	4401      	add	r1, r0
 800c6bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c6c4:	79fb      	ldrb	r3, [r7, #7]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d009      	beq.n	800c6de <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	68d9      	ldr	r1, [r3, #12]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6da:	460a      	mov	r2, r1
 800c6dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	f003 0301 	and.w	r3, r3, #1
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bf0c      	ite	eq
 800c6ee:	2301      	moveq	r3, #1
 800c6f0:	2300      	movne	r3, #0
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	015a      	lsls	r2, r3, #5
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	69fa      	ldr	r2, [r7, #28]
 800c706:	0151      	lsls	r1, r2, #5
 800c708:	6a3a      	ldr	r2, [r7, #32]
 800c70a:	440a      	add	r2, r1
 800c70c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c710:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c714:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	7e7b      	ldrb	r3, [r7, #25]
 800c726:	075b      	lsls	r3, r3, #29
 800c728:	69f9      	ldr	r1, [r7, #28]
 800c72a:	0148      	lsls	r0, r1, #5
 800c72c:	6a39      	ldr	r1, [r7, #32]
 800c72e:	4401      	add	r1, r0
 800c730:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c734:	4313      	orrs	r3, r2
 800c736:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	015a      	lsls	r2, r3, #5
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	4a40      	ldr	r2, [pc, #256]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c748:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c74a:	4b3f      	ldr	r3, [pc, #252]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c752:	4a3d      	ldr	r2, [pc, #244]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c754:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	78db      	ldrb	r3, [r3, #3]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d006      	beq.n	800c76c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c75e:	4b3a      	ldr	r3, [pc, #232]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c766:	4a38      	ldr	r2, [pc, #224]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	e005      	b.n	800c778 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c76c:	4b36      	ldr	r3, [pc, #216]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c774:	4a34      	ldr	r2, [pc, #208]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c776:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c778:	4b33      	ldr	r3, [pc, #204]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c780:	4a31      	ldr	r2, [pc, #196]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c782:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	015a      	lsls	r2, r3, #5
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	4413      	add	r3, r2
 800c78c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c790:	461a      	mov	r2, r3
 800c792:	4b2d      	ldr	r3, [pc, #180]	; (800c848 <USB_HC_StartXfer+0x280>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d14d      	bne.n	800c83a <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	78db      	ldrb	r3, [r3, #3]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d149      	bne.n	800c83a <USB_HC_StartXfer+0x272>
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d045      	beq.n	800c83a <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	79db      	ldrb	r3, [r3, #7]
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d830      	bhi.n	800c818 <USB_HC_StartXfer+0x250>
 800c7b6:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <USB_HC_StartXfer+0x1f4>)
 800c7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7bc:	0800c7cd 	.word	0x0800c7cd
 800c7c0:	0800c7f1 	.word	0x0800c7f1
 800c7c4:	0800c7cd 	.word	0x0800c7cd
 800c7c8:	0800c7f1 	.word	0x0800c7f1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	3303      	adds	r3, #3
 800c7d2:	089b      	lsrs	r3, r3, #2
 800c7d4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c7d6:	8afa      	ldrh	r2, [r7, #22]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d91c      	bls.n	800c81c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	f043 0220 	orr.w	r2, r3, #32
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	619a      	str	r2, [r3, #24]
          }
          break;
 800c7ee:	e015      	b.n	800c81c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	3303      	adds	r3, #3
 800c7f6:	089b      	lsrs	r3, r3, #2
 800c7f8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c7fa:	8afa      	ldrh	r2, [r7, #22]
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	b29b      	uxth	r3, r3
 800c806:	429a      	cmp	r2, r3
 800c808:	d90a      	bls.n	800c820 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	619a      	str	r2, [r3, #24]
          }
          break;
 800c816:	e003      	b.n	800c820 <USB_HC_StartXfer+0x258>

        default:
          break;
 800c818:	bf00      	nop
 800c81a:	e002      	b.n	800c822 <USB_HC_StartXfer+0x25a>
          break;
 800c81c:	bf00      	nop
 800c81e:	e000      	b.n	800c822 <USB_HC_StartXfer+0x25a>
          break;
 800c820:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	68d9      	ldr	r1, [r3, #12]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	785a      	ldrb	r2, [r3, #1]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	2000      	movs	r0, #0
 800c832:	9000      	str	r0, [sp, #0]
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fb8d 	bl	800bf54 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3728      	adds	r7, #40	; 0x28
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	1ff80000 	.word	0x1ff80000
 800c848:	20000144 	.word	0x20000144

0800c84c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	b29b      	uxth	r3, r3
}
 800c862:	4618      	mov	r0, r3
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c86e:	b480      	push	{r7}
 800c870:	b087      	sub	sp, #28
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c87e:	78fb      	ldrb	r3, [r7, #3]
 800c880:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	0c9b      	lsrs	r3, r3, #18
 800c896:	f003 0303 	and.w	r3, r3, #3
 800c89a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <USB_HC_Halt+0x3a>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d16c      	bne.n	800c982 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	015a      	lsls	r2, r3, #5
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	0151      	lsls	r1, r2, #5
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	440a      	add	r2, r1
 800c8be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8c6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d143      	bne.n	800c95c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	015a      	lsls	r2, r3, #5
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	4413      	add	r3, r2
 800c8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	0151      	lsls	r1, r2, #5
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	440a      	add	r2, r1
 800c8ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	0151      	lsls	r1, r2, #5
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	440a      	add	r2, r1
 800c90a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c90e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c912:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	015a      	lsls	r2, r3, #5
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	4413      	add	r3, r2
 800c91c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	0151      	lsls	r1, r2, #5
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	440a      	add	r2, r1
 800c92a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c92e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c932:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	3301      	adds	r3, #1
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c940:	d81d      	bhi.n	800c97e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c958:	d0ec      	beq.n	800c934 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c95a:	e080      	b.n	800ca5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	4413      	add	r3, r2
 800c964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	0151      	lsls	r1, r2, #5
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	440a      	add	r2, r1
 800c972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c97a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c97c:	e06f      	b.n	800ca5e <USB_HC_Halt+0x1f0>
          break;
 800c97e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c980:	e06d      	b.n	800ca5e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	015a      	lsls	r2, r3, #5
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	4413      	add	r3, r2
 800c98a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	0151      	lsls	r1, r2, #5
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	440a      	add	r2, r1
 800c998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c99c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d143      	bne.n	800ca3a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	0151      	lsls	r1, r2, #5
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	440a      	add	r2, r1
 800c9c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	015a      	lsls	r2, r3, #5
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	4413      	add	r3, r2
 800c9da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	0151      	lsls	r1, r2, #5
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	440a      	add	r2, r1
 800c9e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	3301      	adds	r3, #1
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca1e:	d81d      	bhi.n	800ca5c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca36:	d0ec      	beq.n	800ca12 <USB_HC_Halt+0x1a4>
 800ca38:	e011      	b.n	800ca5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	0151      	lsls	r1, r2, #5
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	440a      	add	r2, r1
 800ca50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	e000      	b.n	800ca5e <USB_HC_Halt+0x1f0>
          break;
 800ca5c:	bf00      	nop
    }
  }

  return HAL_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	371c      	adds	r7, #28
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b087      	sub	sp, #28
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	460b      	mov	r3, r1
 800ca76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ca7c:	78fb      	ldrb	r3, [r7, #3]
 800ca7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ca80:	2301      	movs	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	04da      	lsls	r2, r3, #19
 800ca88:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <USB_DoPing+0x74>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	0151      	lsls	r1, r2, #5
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	440a      	add	r2, r1
 800ca94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cab4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cabc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caca:	461a      	mov	r2, r3
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	1ff80000 	.word	0x1ff80000

0800cae4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff f9aa 	bl	800be4e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cafa:	2110      	movs	r1, #16
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff f9e1 	bl	800bec4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fa04 	bl	800bf10 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cb08:	2300      	movs	r3, #0
 800cb0a:	613b      	str	r3, [r7, #16]
 800cb0c:	e01f      	b.n	800cb4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	015a      	lsls	r2, r3, #5
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	4413      	add	r3, r2
 800cb16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb42:	461a      	mov	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	613b      	str	r3, [r7, #16]
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b0f      	cmp	r3, #15
 800cb52:	d9dc      	bls.n	800cb0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cb54:	2300      	movs	r3, #0
 800cb56:	613b      	str	r3, [r7, #16]
 800cb58:	e034      	b.n	800cbc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	015a      	lsls	r2, r3, #5
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	4413      	add	r3, r2
 800cb8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb8e:	461a      	mov	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	3301      	adds	r3, #1
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cba0:	d80c      	bhi.n	800cbbc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	015a      	lsls	r2, r3, #5
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4413      	add	r3, r2
 800cbaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbb8:	d0ec      	beq.n	800cb94 <USB_StopHost+0xb0>
 800cbba:	e000      	b.n	800cbbe <USB_StopHost+0xda>
        break;
 800cbbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	613b      	str	r3, [r7, #16]
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	2b0f      	cmp	r3, #15
 800cbc8:	d9c7      	bls.n	800cb5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295
 800cbde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff f923 	bl	800be2c <USB_EnableGlobalInt>

  return HAL_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <mem_set2>:
		*pt++ = value;
	}
}

void mem_set2(void * p, uint16_t value, uint32_t size)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	817b      	strh	r3, [r7, #10]
	uint32_t i;
	uint16_t * pt = (uint16_t *) p;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	613b      	str	r3, [r7, #16]
	
	for(i = 0;i<size;i++)
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
 800cc06:	e007      	b.n	800cc18 <mem_set2+0x28>
	{
		*pt++ = value;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	1c9a      	adds	r2, r3, #2
 800cc0c:	613a      	str	r2, [r7, #16]
 800cc0e:	897a      	ldrh	r2, [r7, #10]
 800cc10:	801a      	strh	r2, [r3, #0]
	for(i = 0;i<size;i++)
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	3301      	adds	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d3f3      	bcc.n	800cc08 <mem_set2+0x18>
	}
	
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	371c      	adds	r7, #28
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr
	...

0800cc30 <nandwaitrbdown>:
void nandwaitrb(void)
{
	waitrb = 1;
}
void nandwaitrbdown(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0
	waitrb = 0;
 800cc34:	4b03      	ldr	r3, [pc, #12]	; (800cc44 <nandwaitrbdown+0x14>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	701a      	strb	r2, [r3, #0]
}
 800cc3a:	bf00      	nop
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	20000148 	.word	0x20000148

0800cc48 <delay_us>:
	reload*=1000000/configTICK_RATE_HZ;
	SysTick_Config(reload);
}

void delay_us(uint32_t nus)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b089      	sub	sp, #36	; 0x24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	uint32_t  ticks;
	uint32_t  told,tnow,tcnt=0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	61bb      	str	r3, [r7, #24]
	uint32_t  reload=SysTick->LOAD;
 800cc54:	4b1b      	ldr	r3, [pc, #108]	; (800ccc4 <delay_us+0x7c>)
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us;
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <delay_us+0x80>)
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	461a      	mov	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	fb02 f303 	mul.w	r3, r2, r3
 800cc66:	613b      	str	r3, [r7, #16]
	tcnt=0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	61bb      	str	r3, [r7, #24]
	told=SysTick->VAL;
 800cc6c:	4b15      	ldr	r3, [pc, #84]	; (800ccc4 <delay_us+0x7c>)
 800cc6e:	689b      	ldr	r3, [r3, #8]
 800cc70:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 800cc72:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <delay_us+0x7c>)
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d0f8      	beq.n	800cc72 <delay_us+0x2a>
		{
			if(tnow<told)
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d206      	bcs.n	800cc96 <delay_us+0x4e>
			{
				tcnt+=told-tnow;
 800cc88:	69fa      	ldr	r2, [r7, #28]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	4413      	add	r3, r2
 800cc92:	61bb      	str	r3, [r7, #24]
 800cc94:	e007      	b.n	800cca6 <delay_us+0x5e>
			}
			else
			{
				tcnt+=reload-tnow+told;
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	1ad2      	subs	r2, r2, r3
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4413      	add	r3, r2
 800cca0:	69ba      	ldr	r2, [r7, #24]
 800cca2:	4413      	add	r3, r2
 800cca4:	61bb      	str	r3, [r7, #24]
			}
			told=tnow;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d200      	bcs.n	800ccb4 <delay_us+0x6c>
		tnow=SysTick->VAL;
 800ccb2:	e7de      	b.n	800cc72 <delay_us+0x2a>
				break;
 800ccb4:	bf00      	nop
			
		}
	}
}
 800ccb6:	bf00      	nop
 800ccb8:	3724      	adds	r7, #36	; 0x24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	e000e010 	.word	0xe000e010
 800ccc8:	20000149 	.word	0x20000149

0800cccc <delay_xms>:
	}
	delay_us((uint32_t)(nms*1000));	
}

void delay_xms(uint32_t nms)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i<nms;i++) delay_us(1000);
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e006      	b.n	800cce8 <delay_xms+0x1c>
 800ccda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ccde:	f7ff ffb3 	bl	800cc48 <delay_us>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	3301      	adds	r3, #1
 800cce6:	60fb      	str	r3, [r7, #12]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d3f4      	bcc.n	800ccda <delay_xms+0xe>
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <lcd_draw_cross>:
};



static void lcd_draw_cross(uint16_t x, uint16_t y,uint16_t rad, uint32_t color)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	607b      	str	r3, [r7, #4]
 800cd02:	4603      	mov	r3, r0
 800cd04:	81fb      	strh	r3, [r7, #14]
 800cd06:	460b      	mov	r3, r1
 800cd08:	81bb      	strh	r3, [r7, #12]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	817b      	strh	r3, [r7, #10]
#if 0
	//lpc
	LCD_Draw_Cross(LCD_PANEL_UPPER,x,y,rad,color);
#endif
}
 800cd0e:	bf00      	nop
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
	...

0800cd1c <lcd_read_pixel_buffer>:

static uint16_t lcd_read_pixel_buffer(uint32_t x,uint32_t y,uint8_t * buffer)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b087      	sub	sp, #28
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
	uint16_t * buf = (uint16_t *)buffer;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	617b      	str	r3, [r7, #20]
	
	if(x<disp_dev.width && y<disp_dev.height)
 800cd2c:	4b0e      	ldr	r3, [pc, #56]	; (800cd68 <lcd_read_pixel_buffer+0x4c>)
 800cd2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d210      	bcs.n	800cd58 <lcd_read_pixel_buffer+0x3c>
 800cd36:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <lcd_read_pixel_buffer+0x4c>)
 800cd38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d20b      	bcs.n	800cd58 <lcd_read_pixel_buffer+0x3c>
	{
		return buf[y*disp_dev.width + x];
 800cd40:	4b09      	ldr	r3, [pc, #36]	; (800cd68 <lcd_read_pixel_buffer+0x4c>)
 800cd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	fb02 f203 	mul.w	r2, r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	4413      	add	r3, r2
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	e000      	b.n	800cd5a <lcd_read_pixel_buffer+0x3e>
	}
	else
	{
		return 0;
 800cd58:	2300      	movs	r3, #0
	}
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	371c      	adds	r7, #28
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20000010 	.word	0x20000010

0800cd6c <lcd_fill_rect>:



static void lcd_fill_rect(uint32_t sx, uint32_t ex,uint32_t sy, uint32_t ey, uint32_t color)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	603b      	str	r3, [r7, #0]
	
	
	uint16_t i,height,width;

	if(ex > disp_dev.width)
 800cd7a:	4b27      	ldr	r3, [pc, #156]	; (800ce18 <lcd_fill_rect+0xac>)
 800cd7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d902      	bls.n	800cd8a <lcd_fill_rect+0x1e>
	{
		ex = disp_dev.width;
 800cd84:	4b24      	ldr	r3, [pc, #144]	; (800ce18 <lcd_fill_rect+0xac>)
 800cd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd88:	60bb      	str	r3, [r7, #8]
		
	}
	if(ey > disp_dev.height)
 800cd8a:	4b23      	ldr	r3, [pc, #140]	; (800ce18 <lcd_fill_rect+0xac>)
 800cd8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d902      	bls.n	800cd9a <lcd_fill_rect+0x2e>
	{
		ey = disp_dev.height;
 800cd94:	4b20      	ldr	r3, [pc, #128]	; (800ce18 <lcd_fill_rect+0xac>)
 800cd96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd98:	603b      	str	r3, [r7, #0]
	}

	
	if(ex < sx || ey < sy)
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d335      	bcc.n	800ce0e <lcd_fill_rect+0xa2>
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d331      	bcc.n	800ce0e <lcd_fill_rect+0xa2>
	{
		return;
	}

	width = ex - sx + 1;
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	82bb      	strh	r3, [r7, #20]
	height = ey - sy + 1;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	827b      	strh	r3, [r7, #18]
	for(i = 0; i < height; i++)
 800cdca:	2300      	movs	r3, #0
 800cdcc:	82fb      	strh	r3, [r7, #22]
 800cdce:	e019      	b.n	800ce04 <lcd_fill_rect+0x98>
	{
		mem_set2((uint16_t * ) &disp_dev.disp[0].p[((i+sy)* disp_dev.width + sx) * disp_dev.bpp],color,width);
 800cdd0:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <lcd_fill_rect+0xac>)
 800cdd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdd4:	8af9      	ldrh	r1, [r7, #22]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	440b      	add	r3, r1
 800cdda:	490f      	ldr	r1, [pc, #60]	; (800ce18 <lcd_fill_rect+0xac>)
 800cddc:	6d89      	ldr	r1, [r1, #88]	; 0x58
 800cdde:	fb01 f103 	mul.w	r1, r1, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	440b      	add	r3, r1
 800cde6:	490c      	ldr	r1, [pc, #48]	; (800ce18 <lcd_fill_rect+0xac>)
 800cde8:	f891 1061 	ldrb.w	r1, [r1, #97]	; 0x61
 800cdec:	fb01 f303 	mul.w	r3, r1, r3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	b291      	uxth	r1, r2
 800cdf6:	8aba      	ldrh	r2, [r7, #20]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff fef9 	bl	800cbf0 <mem_set2>
	for(i = 0; i < height; i++)
 800cdfe:	8afb      	ldrh	r3, [r7, #22]
 800ce00:	3301      	adds	r3, #1
 800ce02:	82fb      	strh	r3, [r7, #22]
 800ce04:	8afa      	ldrh	r2, [r7, #22]
 800ce06:	8a7b      	ldrh	r3, [r7, #18]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d3e1      	bcc.n	800cdd0 <lcd_fill_rect+0x64>
 800ce0c:	e000      	b.n	800ce10 <lcd_fill_rect+0xa4>
		return;
 800ce0e:	bf00      	nop
	}
}
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20000010 	.word	0x20000010

0800ce1c <lcd_fill_sceen>:


static void lcd_fill_sceen(uint32_t color)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	uint16_t i,j;
	uint16_t * p = (uint16_t *) disp_dev.disp[0].p;
 800ce24:	4b12      	ldr	r3, [pc, #72]	; (800ce70 <lcd_fill_sceen+0x54>)
 800ce26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce28:	60bb      	str	r3, [r7, #8]
	for(i=0;i<disp_dev.height0;i++)
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	81fb      	strh	r3, [r7, #14]
 800ce2e:	e013      	b.n	800ce58 <lcd_fill_sceen+0x3c>
	{
		for(j=0;j<disp_dev.width0;j++)
 800ce30:	2300      	movs	r3, #0
 800ce32:	81bb      	strh	r3, [r7, #12]
 800ce34:	e008      	b.n	800ce48 <lcd_fill_sceen+0x2c>
		{
			*p++ = color;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	1c9a      	adds	r2, r3, #2
 800ce3a:	60ba      	str	r2, [r7, #8]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	b292      	uxth	r2, r2
 800ce40:	801a      	strh	r2, [r3, #0]
		for(j=0;j<disp_dev.width0;j++)
 800ce42:	89bb      	ldrh	r3, [r7, #12]
 800ce44:	3301      	adds	r3, #1
 800ce46:	81bb      	strh	r3, [r7, #12]
 800ce48:	89ba      	ldrh	r2, [r7, #12]
 800ce4a:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <lcd_fill_sceen+0x54>)
 800ce4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d3f1      	bcc.n	800ce36 <lcd_fill_sceen+0x1a>
	for(i=0;i<disp_dev.height0;i++)
 800ce52:	89fb      	ldrh	r3, [r7, #14]
 800ce54:	3301      	adds	r3, #1
 800ce56:	81fb      	strh	r3, [r7, #14]
 800ce58:	89fa      	ldrh	r2, [r7, #14]
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <lcd_fill_sceen+0x54>)
 800ce5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d3e6      	bcc.n	800ce30 <lcd_fill_sceen+0x14>
		}
	}
	
}
 800ce62:	bf00      	nop
 800ce64:	bf00      	nop
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr
 800ce70:	20000010 	.word	0x20000010

0800ce74 <lcd_put_pixel>:



static void lcd_put_pixel(uint32_t x, uint32_t y, uint32_t color)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
	
	
	uint16_t * p;

	if(disp_dev.dir == 0)
 800ce80:	4b1f      	ldr	r3, [pc, #124]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ce82:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d111      	bne.n	800ceae <lcd_put_pixel+0x3a>
	{

        if(disp_dev.flag==0)
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ce8c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d103      	bne.n	800ce9c <lcd_put_pixel+0x28>
        {
            p = (uint16_t *) disp_dev.disp[1].p;
 800ce94:	4b1a      	ldr	r3, [pc, #104]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	e010      	b.n	800cebe <lcd_put_pixel+0x4a>
        }
        else if(disp_dev.flag==1)
 800ce9c:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ce9e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d10b      	bne.n	800cebe <lcd_put_pixel+0x4a>
        {
            p = (uint16_t *) disp_dev.disp[0].p;
 800cea6:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <lcd_put_pixel+0x8c>)
 800cea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	e007      	b.n	800cebe <lcd_put_pixel+0x4a>
        }
    }
    else if(disp_dev.dir == 1)
 800ceae:	4b14      	ldr	r3, [pc, #80]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ceb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d102      	bne.n	800cebe <lcd_put_pixel+0x4a>
    {
        p = (uint16_t *)disp_dev.disp[3].p;
 800ceb8:	4b11      	ldr	r3, [pc, #68]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ceba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cebc:	617b      	str	r3, [r7, #20]
    }
    
	
	
	if(x >= disp_dev.width || y >= disp_dev.height || p == NULL)
 800cebe:	4b10      	ldr	r3, [pc, #64]	; (800cf00 <lcd_put_pixel+0x8c>)
 800cec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d215      	bcs.n	800cef4 <lcd_put_pixel+0x80>
 800cec8:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ceca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d210      	bcs.n	800cef4 <lcd_put_pixel+0x80>
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00d      	beq.n	800cef4 <lcd_put_pixel+0x80>
	{
		return;
	}

	p[x+y*disp_dev.width] = color;
 800ced8:	4b09      	ldr	r3, [pc, #36]	; (800cf00 <lcd_put_pixel+0x8c>)
 800ceda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	fb02 f203 	mul.w	r2, r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	4413      	add	r3, r2
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	b292      	uxth	r2, r2
 800cef0:	801a      	strh	r2, [r3, #0]
 800cef2:	e000      	b.n	800cef6 <lcd_put_pixel+0x82>
		return;
 800cef4:	bf00      	nop
}
 800cef6:	371c      	adds	r7, #28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	20000010 	.word	0x20000010

0800cf04 <lcd_put_pixel_buffer>:


static void lcd_put_pixel_buffer(uint32_t x, uint32_t y, uint32_t color,uint8_t * buffer)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	603b      	str	r3, [r7, #0]
	
	uint16_t * p;

    p = (uint16_t *) buffer;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	617b      	str	r3, [r7, #20]
	
	if(x >= disp_dev.width || y >= disp_dev.height)
 800cf16:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <lcd_put_pixel_buffer+0x50>)
 800cf18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d212      	bcs.n	800cf46 <lcd_put_pixel_buffer+0x42>
 800cf20:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <lcd_put_pixel_buffer+0x50>)
 800cf22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d20d      	bcs.n	800cf46 <lcd_put_pixel_buffer+0x42>
	{
		return;
	}

	p[x+y*disp_dev.width] = color;
 800cf2a:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <lcd_put_pixel_buffer+0x50>)
 800cf2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	fb02 f203 	mul.w	r2, r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	b292      	uxth	r2, r2
 800cf42:	801a      	strh	r2, [r3, #0]
 800cf44:	e000      	b.n	800cf48 <lcd_put_pixel_buffer+0x44>
		return;
 800cf46:	bf00      	nop
}
 800cf48:	371c      	adds	r7, #28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	20000010 	.word	0x20000010

0800cf58 <lcd_get_addr>:




static uint8_t * lcd_get_addr(uint8_t flag)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]

	if(flag==0)
 800cf62:	79fb      	ldrb	r3, [r7, #7]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <lcd_get_addr+0x16>
	{
	    return (uint8_t *)disp_dev.disp[0].p;
 800cf68:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <lcd_get_addr+0x3c>)
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6c:	e00c      	b.n	800cf88 <lcd_get_addr+0x30>
	}
	else if(flag == 1)
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d102      	bne.n	800cf7a <lcd_get_addr+0x22>
	{
	    return (uint8_t *)disp_dev.disp[1].p;
 800cf74:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <lcd_get_addr+0x3c>)
 800cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf78:	e006      	b.n	800cf88 <lcd_get_addr+0x30>
	}
	else if(flag == 2)
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d102      	bne.n	800cf86 <lcd_get_addr+0x2e>
	{
	    return (uint8_t *)disp_dev.disp[2].p;
 800cf80:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <lcd_get_addr+0x3c>)
 800cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf84:	e000      	b.n	800cf88 <lcd_get_addr+0x30>
	}
	return NULL;
 800cf86:	2300      	movs	r3, #0
	
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	20000010 	.word	0x20000010

0800cf98 <back_light_init>:

static void back_light_init(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
    PWM_Cmd(1, ENABLE);
	delay_us(40);
	set_back_light(0);
#endif

	drv_bl_pwm_out();
 800cf9c:	f000 f808 	bl	800cfb0 <drv_bl_pwm_out>
	delay_us(40);
 800cfa0:	2028      	movs	r0, #40	; 0x28
 800cfa2:	f7ff fe51 	bl	800cc48 <delay_us>
	set_back_light(0);
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f000 f80c 	bl	800cfc4 <set_back_light>
		 
}
 800cfac:	bf00      	nop
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <drv_bl_pwm_out>:
void drv_bl_pwm_out(void)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800cfb4:	2104      	movs	r1, #4
 800cfb6:	4802      	ldr	r0, [pc, #8]	; (800cfc0 <drv_bl_pwm_out+0x10>)
 800cfb8:	f7fc fb10 	bl	80095dc <HAL_TIM_PWM_Start>

}
 800cfbc:	bf00      	nop
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20004db0 	.word	0x20004db0

0800cfc4 <set_back_light>:


static void set_back_light(uint8_t light)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	71fb      	strb	r3, [r7, #7]
	uint8_t duty = 100 - light;
	duty = duty * (89/100.0);
	PWM_MatchUpdate(1, 1,duty, PWM_MATCH_UPDATE_NOW);
#endif

	uint32_t conver = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60fb      	str	r3, [r7, #12]
	if(light > 100)
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	2b64      	cmp	r3, #100	; 0x64
 800cfd6:	d812      	bhi.n	800cffe <set_back_light+0x3a>
	{
		return;
	}

	conver = light;
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	60fb      	str	r3, [r7, #12]
	conver = (100 - conver) * 80  / 100;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 800cfe2:	fb02 f303 	mul.w	r3, r2, r3
 800cfe6:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 800cfea:	4a08      	ldr	r2, [pc, #32]	; (800d00c <set_back_light+0x48>)
 800cfec:	fba2 2303 	umull	r2, r3, r2, r3
 800cff0:	095b      	lsrs	r3, r3, #5
 800cff2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2 ,conver);//
 800cff4:	4b06      	ldr	r3, [pc, #24]	; (800d010 <set_back_light+0x4c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	639a      	str	r2, [r3, #56]	; 0x38
 800cffc:	e000      	b.n	800d000 <set_back_light+0x3c>
		return;
 800cffe:	bf00      	nop
}
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	51eb851f 	.word	0x51eb851f
 800d010:	20004db0 	.word	0x20004db0

0800d014 <LTDC_Layer_Window_Config>:
//注意:此函数必须在LTDC_Layer_Parameter_Config之后再设�??.
//layerx:层�??,0/1.
//sx,sy:起始坐标
//width,height:宽度和高�??
void LTDC_Layer_Window_Config(u8 layerx,u16 sx,u16 sy,u16 width,u16 height)
{
 800d014:	b590      	push	{r4, r7, lr}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	4611      	mov	r1, r2
 800d020:	461a      	mov	r2, r3
 800d022:	4623      	mov	r3, r4
 800d024:	71fb      	strb	r3, [r7, #7]
 800d026:	4603      	mov	r3, r0
 800d028:	80bb      	strh	r3, [r7, #4]
 800d02a:	460b      	mov	r3, r1
 800d02c:	807b      	strh	r3, [r7, #2]
 800d02e:	4613      	mov	r3, r2
 800d030:	803b      	strh	r3, [r7, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,sx,sy,layerx);  //设置窗口的位�??
 800d032:	88b9      	ldrh	r1, [r7, #4]
 800d034:	887a      	ldrh	r2, [r7, #2]
 800d036:	79fb      	ldrb	r3, [r7, #7]
 800d038:	4806      	ldr	r0, [pc, #24]	; (800d054 <LTDC_Layer_Window_Config+0x40>)
 800d03a:	f7f9 f9ad 	bl	8006398 <HAL_LTDC_SetWindowPosition>
    HAL_LTDC_SetWindowSize(&hltdc,width,height,layerx);//设置窗口大小
 800d03e:	8839      	ldrh	r1, [r7, #0]
 800d040:	8b3a      	ldrh	r2, [r7, #24]
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	4803      	ldr	r0, [pc, #12]	; (800d054 <LTDC_Layer_Window_Config+0x40>)
 800d046:	f7f9 f961 	bl	800630c <HAL_LTDC_SetWindowSize>
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd90      	pop	{r4, r7, pc}
 800d052:	bf00      	nop
 800d054:	20004c98 	.word	0x20004c98

0800d058 <LTDC_Init>:

//LCD初始化函�??
void LTDC_Init(void)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af02      	add	r7, sp, #8
	#if(UPDN_SHLR_GPIO_STATE == 1)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
	#endif
	//open vlcd power
	HAL_GPIO_WritePin(TFT_ENT_GPIO_Port,TFT_ENT_Pin  , 1);
 800d05e:	2201      	movs	r2, #1
 800d060:	2140      	movs	r1, #64	; 0x40
 800d062:	480d      	ldr	r0, [pc, #52]	; (800d098 <LTDC_Init+0x40>)
 800d064:	f7f6 f848 	bl	80030f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800d068:	200a      	movs	r0, #10
 800d06a:	f7f5 f89d 	bl	80021a8 <HAL_Delay>
	LTDC_Layer_Window_Config(0 , 0 , 0 , LCD_W_SIZE , LCD_H_SIZE);
 800d06e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d078:	2200      	movs	r2, #0
 800d07a:	2100      	movs	r1, #0
 800d07c:	2000      	movs	r0, #0
 800d07e:	f7ff ffc9 	bl	800d014 <LTDC_Layer_Window_Config>
	disp_dev.width0 = LCD_W_SIZE;
 800d082:	4b06      	ldr	r3, [pc, #24]	; (800d09c <LTDC_Init+0x44>)
 800d084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d088:	651a      	str	r2, [r3, #80]	; 0x50
	disp_dev.height0 = LCD_H_SIZE;
 800d08a:	4b04      	ldr	r3, [pc, #16]	; (800d09c <LTDC_Init+0x44>)
 800d08c:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d090:	655a      	str	r2, [r3, #84]	; 0x54
}
 800d092:	bf00      	nop
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	58020000 	.word	0x58020000
 800d09c:	20000010 	.word	0x20000010

0800d0a0 <TFT_init>:

static void TFT_init(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
	lcd_config.lcd_bpp = LCD_BPP_16;
	//lcd_config.lcd_bpp = LCD_BPP_16_565Mode;
	lcd_config.lcd_type = LCD_TFT;
	lcd_config.lcd_bgr = TRUE;
#endif
	uint32_t * lcd_addr_up = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
	uint32_t * lcd_addr_low = NULL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]
	uint32_t * lcd_addr  = NULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]

	lcd_addr_up = (uint32_t *) SDRAM_BASE_ADDR;
 800d0b2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800d0b6:	60fb      	str	r3, [r7, #12]
	lcd_addr_low = (uint32_t *)(SDRAM_BASE_ADDR + LCD_W_SIZE*LCD_H_SIZE*2);
 800d0b8:	4b29      	ldr	r3, [pc, #164]	; (800d160 <TFT_init+0xc0>)
 800d0ba:	60bb      	str	r3, [r7, #8]
	lcd_addr  = (uint32_t *)(SDRAM_BASE_ADDR + 2*LCD_W_SIZE*LCD_H_SIZE*2);
 800d0bc:	4b29      	ldr	r3, [pc, #164]	; (800d164 <TFT_init+0xc4>)
 800d0be:	607b      	str	r3, [r7, #4]

	LTDC_Init ();
 800d0c0:	f7ff ffca 	bl	800d058 <LTDC_Init>

	back_light_init();
 800d0c4:	f7ff ff68 	bl	800cf98 <back_light_init>

	disp_dev.flag = 0;
 800d0c8:	4b27      	ldr	r3, [pc, #156]	; (800d168 <TFT_init+0xc8>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	disp_dev.width0 = LCD_W_SIZE;
 800d0d0:	4b25      	ldr	r3, [pc, #148]	; (800d168 <TFT_init+0xc8>)
 800d0d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d0d6:	651a      	str	r2, [r3, #80]	; 0x50
	disp_dev.height0 = LCD_H_SIZE;
 800d0d8:	4b23      	ldr	r3, [pc, #140]	; (800d168 <TFT_init+0xc8>)
 800d0da:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d0de:	655a      	str	r2, [r3, #84]	; 0x54
	disp_dev.bpp = 2;
 800d0e0:	4b21      	ldr	r3, [pc, #132]	; (800d168 <TFT_init+0xc8>)
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	
	disp_dev.disp[0].width = disp_dev.width0;
 800d0e8:	4b1f      	ldr	r3, [pc, #124]	; (800d168 <TFT_init+0xc8>)
 800d0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	4b1e      	ldr	r3, [pc, #120]	; (800d168 <TFT_init+0xc8>)
 800d0f0:	869a      	strh	r2, [r3, #52]	; 0x34
	disp_dev.disp[0].height = disp_dev.height0;
 800d0f2:	4b1d      	ldr	r3, [pc, #116]	; (800d168 <TFT_init+0xc8>)
 800d0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	4b1b      	ldr	r3, [pc, #108]	; (800d168 <TFT_init+0xc8>)
 800d0fa:	86da      	strh	r2, [r3, #54]	; 0x36
	disp_dev.disp[0].p = (uint8_t*)lcd_addr_up;
 800d0fc:	4a1a      	ldr	r2, [pc, #104]	; (800d168 <TFT_init+0xc8>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6313      	str	r3, [r2, #48]	; 0x30


	disp_dev.disp[1].width = disp_dev.width0;
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <TFT_init+0xc8>)
 800d104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d106:	b29a      	uxth	r2, r3
 800d108:	4b17      	ldr	r3, [pc, #92]	; (800d168 <TFT_init+0xc8>)
 800d10a:	879a      	strh	r2, [r3, #60]	; 0x3c
	disp_dev.disp[1].height = disp_dev.height0;
 800d10c:	4b16      	ldr	r3, [pc, #88]	; (800d168 <TFT_init+0xc8>)
 800d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d110:	b29a      	uxth	r2, r3
 800d112:	4b15      	ldr	r3, [pc, #84]	; (800d168 <TFT_init+0xc8>)
 800d114:	87da      	strh	r2, [r3, #62]	; 0x3e
	disp_dev.disp[1].p = (uint8_t*)lcd_addr_low;
 800d116:	4a14      	ldr	r2, [pc, #80]	; (800d168 <TFT_init+0xc8>)
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	6393      	str	r3, [r2, #56]	; 0x38


	disp_dev.disp[2].width = disp_dev.width0;
 800d11c:	4b12      	ldr	r3, [pc, #72]	; (800d168 <TFT_init+0xc8>)
 800d11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d120:	b29a      	uxth	r2, r3
 800d122:	4b11      	ldr	r3, [pc, #68]	; (800d168 <TFT_init+0xc8>)
 800d124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	disp_dev.disp[2].height = disp_dev.height0;
 800d128:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <TFT_init+0xc8>)
 800d12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	4b0e      	ldr	r3, [pc, #56]	; (800d168 <TFT_init+0xc8>)
 800d130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	disp_dev.disp[2].p = (uint8_t*)lcd_addr;
 800d134:	4a0c      	ldr	r2, [pc, #48]	; (800d168 <TFT_init+0xc8>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6413      	str	r3, [r2, #64]	; 0x40

	disp_dev.disp[3].width = 0;
 800d13a:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <TFT_init+0xc8>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    disp_dev.disp[3].height = 0;
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <TFT_init+0xc8>)
 800d144:	2200      	movs	r2, #0
 800d146:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    disp_dev.disp[3].p = NULL;
 800d14a:	4b07      	ldr	r3, [pc, #28]	; (800d168 <TFT_init+0xc8>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	649a      	str	r2, [r3, #72]	; 0x48
	*(volatile uint32_t  *)(0x400fc188) = 0xc09;
 800d150:	4b06      	ldr	r3, [pc, #24]	; (800d16c <TFT_init+0xcc>)
 800d152:	f640 4209 	movw	r2, #3081	; 0xc09
 800d156:	601a      	str	r2, [r3, #0]
}
 800d158:	bf00      	nop
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	d003fc00 	.word	0xd003fc00
 800d164:	d007f800 	.word	0xd007f800
 800d168:	20000010 	.word	0x20000010
 800d16c:	400fc188 	.word	0x400fc188

0800d170 <LCD_SetBaseAddress>:




void LCD_SetBaseAddress(LCD_PANEL panel, uint32_t pAddress)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b090      	sub	sp, #64	; 0x40
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800d17c:	f107 030c 	add.w	r3, r7, #12
 800d180:	2234      	movs	r2, #52	; 0x34
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f007 fa57 	bl	8014638 <memset>

    if(panel == LCD_PANEL_UPPER)
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d104      	bne.n	800d19a <LCD_SetBaseAddress+0x2a>
    	pLayerCfg.FBStartAdress = pAddress & ~7UL ;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	f023 0307 	bic.w	r3, r3, #7
 800d196:	633b      	str	r3, [r7, #48]	; 0x30
    else
    	pLayerCfg.FBStartAdress = pAddress & ~7UL ;
}
 800d198:	e003      	b.n	800d1a2 <LCD_SetBaseAddress+0x32>
    	pLayerCfg.FBStartAdress = pAddress & ~7UL ;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	f023 0307 	bic.w	r3, r3, #7
 800d1a0:	633b      	str	r3, [r7, #48]	; 0x30
}
 800d1a2:	bf00      	nop
 800d1a4:	3740      	adds	r7, #64	; 0x40
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <switch_base_addr>:




static void switch_base_addr(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	af00      	add	r7, sp, #0

    if(disp_dev.flag == 1)
 800d1b0:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <switch_base_addr+0x48>)
 800d1b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d10a      	bne.n	800d1d0 <switch_base_addr+0x24>
    {
        LCD_SetBaseAddress(LCD_PANEL_UPPER,(uint32_t)disp_dev.disp[0].p);
 800d1ba:	4b0e      	ldr	r3, [pc, #56]	; (800d1f4 <switch_base_addr+0x48>)
 800d1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1be:	4619      	mov	r1, r3
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f7ff ffd5 	bl	800d170 <LCD_SetBaseAddress>
        disp_dev.flag = 0;
 800d1c6:	4b0b      	ldr	r3, [pc, #44]	; (800d1f4 <switch_base_addr+0x48>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
        LCD_SetBaseAddress(LCD_PANEL_UPPER,(uint32_t)disp_dev.disp[1].p);
        disp_dev.flag = 1;
		
    }

}
 800d1ce:	e00e      	b.n	800d1ee <switch_base_addr+0x42>
    else if(disp_dev.flag == 0)
 800d1d0:	4b08      	ldr	r3, [pc, #32]	; (800d1f4 <switch_base_addr+0x48>)
 800d1d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d109      	bne.n	800d1ee <switch_base_addr+0x42>
        LCD_SetBaseAddress(LCD_PANEL_UPPER,(uint32_t)disp_dev.disp[1].p);
 800d1da:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <switch_base_addr+0x48>)
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1de:	4619      	mov	r1, r3
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	f7ff ffc5 	bl	800d170 <LCD_SetBaseAddress>
        disp_dev.flag = 1;
 800d1e6:	4b03      	ldr	r3, [pc, #12]	; (800d1f4 <switch_base_addr+0x48>)
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
}
 800d1ee:	bf00      	nop
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20000010 	.word	0x20000010

0800d1f8 <open_backlight>:



 void open_backlight(void)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	af00      	add	r7, sp, #0
#if 0
	//st
	GPIO_OutputValue(0, 1<<18, 1); 
#endif
	HAL_GPIO_WritePin(BL_EN_GPIO_Port,BL_EN_Pin,GPIO_PIN_SET);
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	2180      	movs	r1, #128	; 0x80
 800d200:	4802      	ldr	r0, [pc, #8]	; (800d20c <open_backlight+0x14>)
 800d202:	f7f5 ff79 	bl	80030f8 <HAL_GPIO_WritePin>
}
 800d206:	bf00      	nop
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	58020c00 	.word	0x58020c00

0800d210 <close_backlight>:


void close_backlight(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
#if 0
	//st
	GPIO_OutputValue(0, 1<<18, 0);
#endif
	HAL_GPIO_WritePin(BL_EN_GPIO_Port,BL_EN_Pin,GPIO_PIN_RESET);
 800d214:	2200      	movs	r2, #0
 800d216:	2180      	movs	r1, #128	; 0x80
 800d218:	4802      	ldr	r0, [pc, #8]	; (800d224 <close_backlight+0x14>)
 800d21a:	f7f5 ff6d 	bl	80030f8 <HAL_GPIO_WritePin>
}
 800d21e:	bf00      	nop
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	58020c00 	.word	0x58020c00

0800d228 <get_tp_seamphore>:
	}
}


static uint32_t get_tp_seamphore(uint32_t time)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
	return xSemaphoreTake(tp_dev.tp_press,time);
 800d230:	4b05      	ldr	r3, [pc, #20]	; (800d248 <get_tp_seamphore+0x20>)
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	6879      	ldr	r1, [r7, #4]
 800d236:	4618      	mov	r0, r3
 800d238:	f004 fc02 	bl	8011a40 <xQueueSemaphoreTake>
 800d23c:	4603      	mov	r3, r0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20000074 	.word	0x20000074

0800d24c <touch_init>:

#if (TP_TYPE_DRIVER == TP_TYPE_ST1633I)


static void touch_init(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
	delay_us(2);
	GPIO_OutputValue(0, (1<<16), 1);
	delay_xms(50);
#endif

	HAL_GPIO_WritePin( CTP_RST0_PORT , CTP_RST0_Pin , RESET);
 800d250:	2200      	movs	r2, #0
 800d252:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d256:	4808      	ldr	r0, [pc, #32]	; (800d278 <touch_init+0x2c>)
 800d258:	f7f5 ff4e 	bl	80030f8 <HAL_GPIO_WritePin>
	delay_us(2);
 800d25c:	2002      	movs	r0, #2
 800d25e:	f7ff fcf3 	bl	800cc48 <delay_us>
	HAL_GPIO_WritePin(  CTP_RST0_PORT , CTP_RST0_Pin , SET);
 800d262:	2201      	movs	r2, #1
 800d264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d268:	4803      	ldr	r0, [pc, #12]	; (800d278 <touch_init+0x2c>)
 800d26a:	f7f5 ff45 	bl	80030f8 <HAL_GPIO_WritePin>
	delay_xms(50);
 800d26e:	2032      	movs	r0, #50	; 0x32
 800d270:	f7ff fd2c 	bl	800cccc <delay_xms>
}
 800d274:	bf00      	nop
 800d276:	bd80      	pop	{r7, pc}
 800d278:	58020000 	.word	0x58020000

0800d27c <get_pos>:




uint8_t get_pos(void)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
    }
	//taskEXIT_CRITICAL();

	return res;
#endif
	uint8_t res = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	73fb      	strb	r3, [r7, #15]
	uint8_t pos[5];
	uint8_t i2c_res = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	73bb      	strb	r3, [r7, #14]

	i2c_res  = ST1633I_i2c2_read(SLAVE_ADDR,0,pos,5);
 800d28a:	1d3a      	adds	r2, r7, #4
 800d28c:	2305      	movs	r3, #5
 800d28e:	2100      	movs	r1, #0
 800d290:	2055      	movs	r0, #85	; 0x55
 800d292:	f000 f871 	bl	800d378 <ST1633I_i2c2_read>
 800d296:	4603      	mov	r3, r0
 800d298:	73bb      	strb	r3, [r7, #14]

	if(i2c_res == 0)
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d14e      	bne.n	800d33e <get_pos+0xc2>
	{
	    tp_err_cnt=0;
 800d2a0:	4b32      	ldr	r3, [pc, #200]	; (800d36c <get_pos+0xf0>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
		res = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
		tp_dev.x = (((pos[2] & 0x70) >> 4)<<8) | pos[3];
 800d2aa:	79bb      	ldrb	r3, [r7, #6]
 800d2ac:	111b      	asrs	r3, r3, #4
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	b21b      	sxth	r3, r3
 800d2b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2b6:	b21a      	sxth	r2, r3
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
 800d2ba:	b21b      	sxth	r3, r3
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	b21b      	sxth	r3, r3
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	4b2b      	ldr	r3, [pc, #172]	; (800d370 <get_pos+0xf4>)
 800d2c4:	831a      	strh	r2, [r3, #24]
		tp_dev.y = ((pos[2] & 0x7)<<8) | pos[4];
 800d2c6:	79bb      	ldrb	r3, [r7, #6]
 800d2c8:	021b      	lsls	r3, r3, #8
 800d2ca:	b21b      	sxth	r3, r3
 800d2cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2d0:	b21a      	sxth	r2, r3
 800d2d2:	7a3b      	ldrb	r3, [r7, #8]
 800d2d4:	b21b      	sxth	r3, r3
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	b21b      	sxth	r3, r3
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	4b24      	ldr	r3, [pc, #144]	; (800d370 <get_pos+0xf4>)
 800d2de:	835a      	strh	r2, [r3, #26]
		tp_dev.x = disp_dev.width0 - tp_dev.x - 1;
 800d2e0:	4b24      	ldr	r3, [pc, #144]	; (800d374 <get_pos+0xf8>)
 800d2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	4b22      	ldr	r3, [pc, #136]	; (800d370 <get_pos+0xf4>)
 800d2e8:	8b1b      	ldrh	r3, [r3, #24]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	4b1f      	ldr	r3, [pc, #124]	; (800d370 <get_pos+0xf4>)
 800d2f4:	831a      	strh	r2, [r3, #24]
		tp_dev.y = disp_dev.height0 - tp_dev.y -  1;
 800d2f6:	4b1f      	ldr	r3, [pc, #124]	; (800d374 <get_pos+0xf8>)
 800d2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	4b1c      	ldr	r3, [pc, #112]	; (800d370 <get_pos+0xf4>)
 800d2fe:	8b5b      	ldrh	r3, [r3, #26]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	b29b      	uxth	r3, r3
 800d304:	3b01      	subs	r3, #1
 800d306:	b29a      	uxth	r2, r3
 800d308:	4b19      	ldr	r3, [pc, #100]	; (800d370 <get_pos+0xf4>)
 800d30a:	835a      	strh	r2, [r3, #26]
		if(disp_dev.dir == 1) //竖屏情况下，进行坐标装换
 800d30c:	4b19      	ldr	r3, [pc, #100]	; (800d374 <get_pos+0xf8>)
 800d30e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d312:	2b01      	cmp	r3, #1
 800d314:	d124      	bne.n	800d360 <get_pos+0xe4>
			{
			    uint16_t x,y;

			    x = tp_dev.x;
 800d316:	4b16      	ldr	r3, [pc, #88]	; (800d370 <get_pos+0xf4>)
 800d318:	8b1b      	ldrh	r3, [r3, #24]
 800d31a:	81bb      	strh	r3, [r7, #12]
			    y = tp_dev.y;
 800d31c:	4b14      	ldr	r3, [pc, #80]	; (800d370 <get_pos+0xf4>)
 800d31e:	8b5b      	ldrh	r3, [r3, #26]
 800d320:	817b      	strh	r3, [r7, #10]

			    tp_dev.x = y;
 800d322:	4a13      	ldr	r2, [pc, #76]	; (800d370 <get_pos+0xf4>)
 800d324:	897b      	ldrh	r3, [r7, #10]
 800d326:	8313      	strh	r3, [r2, #24]
			    tp_dev.y = disp_dev.width0 - x - 1;
 800d328:	4b12      	ldr	r3, [pc, #72]	; (800d374 <get_pos+0xf8>)
 800d32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	89bb      	ldrh	r3, [r7, #12]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	3b01      	subs	r3, #1
 800d336:	b29a      	uxth	r2, r3
 800d338:	4b0d      	ldr	r3, [pc, #52]	; (800d370 <get_pos+0xf4>)
 800d33a:	835a      	strh	r2, [r3, #26]
 800d33c:	e010      	b.n	800d360 <get_pos+0xe4>

			}
	}
	else
	{
		 tp_err_cnt++;
 800d33e:	4b0b      	ldr	r3, [pc, #44]	; (800d36c <get_pos+0xf0>)
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	3301      	adds	r3, #1
 800d344:	b2da      	uxtb	r2, r3
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <get_pos+0xf0>)
 800d348:	701a      	strb	r2, [r3, #0]
		if(tp_err_cnt>2)
 800d34a:	4b08      	ldr	r3, [pc, #32]	; (800d36c <get_pos+0xf0>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d904      	bls.n	800d35c <get_pos+0xe0>
		{
			tp_err_cnt = 0;
 800d352:	4b06      	ldr	r3, [pc, #24]	; (800d36c <get_pos+0xf0>)
 800d354:	2200      	movs	r2, #0
 800d356:	701a      	strb	r2, [r3, #0]
			touch_init();
 800d358:	f7ff ff78 	bl	800d24c <touch_init>
		}
		res = 1;
 800d35c:	2301      	movs	r3, #1
 800d35e:	73fb      	strb	r3, [r7, #15]

	}

}
 800d360:	bf00      	nop
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	2000014a 	.word	0x2000014a
 800d370:	20000074 	.word	0x20000074
 800d374:	20000010 	.word	0x20000010

0800d378 <ST1633I_i2c2_read>:

#endif


static int ST1633I_i2c2_read(uint16_t addr, uint8_t  reg, uint8_t *rbuf, uint16_t len)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b088      	sub	sp, #32
 800d37c:	af04      	add	r7, sp, #16
 800d37e:	60ba      	str	r2, [r7, #8]
 800d380:	461a      	mov	r2, r3
 800d382:	4603      	mov	r3, r0
 800d384:	81fb      	strh	r3, [r7, #14]
 800d386:	460b      	mov	r3, r1
 800d388:	737b      	strb	r3, [r7, #13]
 800d38a:	4613      	mov	r3, r2
 800d38c:	80fb      	strh	r3, [r7, #6]
	if( HAL_I2C_Mem_Read( &hi2c2, addr , reg , I2C_MEMADD_SIZE_8BIT, rbuf, len, 1000 ) == HAL_OK )
 800d38e:	7b7b      	ldrb	r3, [r7, #13]
 800d390:	b29a      	uxth	r2, r3
 800d392:	89f9      	ldrh	r1, [r7, #14]
 800d394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d398:	9302      	str	r3, [sp, #8]
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	9301      	str	r3, [sp, #4]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4806      	ldr	r0, [pc, #24]	; (800d3c0 <ST1633I_i2c2_read+0x48>)
 800d3a6:	f7f7 fc5d 	bl	8004c64 <HAL_I2C_Mem_Read>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <ST1633I_i2c2_read+0x3c>

		return 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	e001      	b.n	800d3b8 <ST1633I_i2c2_read+0x40>
	else
		return -1;
 800d3b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20004be4 	.word	0x20004be4

0800d3c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800d3c8:	4904      	ldr	r1, [pc, #16]	; (800d3dc <MX_FATFS_Init+0x18>)
 800d3ca:	4805      	ldr	r0, [pc, #20]	; (800d3e0 <MX_FATFS_Init+0x1c>)
 800d3cc:	f003 fb48 	bl	8010a60 <FATFS_LinkDriver>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	4b03      	ldr	r3, [pc, #12]	; (800d3e4 <MX_FATFS_Init+0x20>)
 800d3d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d3d8:	bf00      	nop
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	20004f20 	.word	0x20004f20
 800d3e0:	08014aa0 	.word	0x08014aa0
 800d3e4:	20005388 	.word	0x20005388

0800d3e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	4619      	mov	r1, r3
 800d412:	4808      	ldr	r0, [pc, #32]	; (800d434 <USBH_status+0x34>)
 800d414:	f000 fe5b 	bl	800e0ce <USBH_MSC_UnitIsReady>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <USBH_status+0x24>
  {
    res = RES_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
 800d422:	e001      	b.n	800d428 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d428:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	200053f0 	.word	0x200053f0

0800d438 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b094      	sub	sp, #80	; 0x50
 800d43c:	af02      	add	r7, sp, #8
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	607a      	str	r2, [r7, #4]
 800d442:	603b      	str	r3, [r7, #0]
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800d44e:	7bf9      	ldrb	r1, [r7, #15]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	4813      	ldr	r0, [pc, #76]	; (800d4a8 <USBH_read+0x70>)
 800d45a:	f000 fe82 	bl	800e162 <USBH_MSC_Read>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <USBH_read+0x34>
  {
    res = RES_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d46a:	e017      	b.n	800d49c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800d46c:	f107 0210 	add.w	r2, r7, #16
 800d470:	7bfb      	ldrb	r3, [r7, #15]
 800d472:	4619      	mov	r1, r3
 800d474:	480c      	ldr	r0, [pc, #48]	; (800d4a8 <USBH_read+0x70>)
 800d476:	f000 fe50 	bl	800e11a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800d47a:	7f7b      	ldrb	r3, [r7, #29]
 800d47c:	2b3a      	cmp	r3, #58	; 0x3a
 800d47e:	d005      	beq.n	800d48c <USBH_read+0x54>
 800d480:	2b3a      	cmp	r3, #58	; 0x3a
 800d482:	dc07      	bgt.n	800d494 <USBH_read+0x5c>
 800d484:	2b04      	cmp	r3, #4
 800d486:	d001      	beq.n	800d48c <USBH_read+0x54>
 800d488:	2b28      	cmp	r3, #40	; 0x28
 800d48a:	d103      	bne.n	800d494 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800d48c:	2303      	movs	r3, #3
 800d48e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d492:	e003      	b.n	800d49c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d49a:	bf00      	nop
    }
  }

  return res;
 800d49c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3748      	adds	r7, #72	; 0x48
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	200053f0 	.word	0x200053f0

0800d4ac <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b094      	sub	sp, #80	; 0x50
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
 800d4b6:	603b      	str	r3, [r7, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800d4c2:	7bf9      	ldrb	r1, [r7, #15]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	4817      	ldr	r0, [pc, #92]	; (800d52c <USBH_write+0x80>)
 800d4ce:	f000 feb1 	bl	800e234 <USBH_MSC_Write>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d103      	bne.n	800d4e0 <USBH_write+0x34>
  {
    res = RES_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d4de:	e01f      	b.n	800d520 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800d4e0:	f107 0210 	add.w	r2, r7, #16
 800d4e4:	7bfb      	ldrb	r3, [r7, #15]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4810      	ldr	r0, [pc, #64]	; (800d52c <USBH_write+0x80>)
 800d4ea:	f000 fe16 	bl	800e11a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800d4ee:	7f7b      	ldrb	r3, [r7, #29]
 800d4f0:	2b3a      	cmp	r3, #58	; 0x3a
 800d4f2:	d00d      	beq.n	800d510 <USBH_write+0x64>
 800d4f4:	2b3a      	cmp	r3, #58	; 0x3a
 800d4f6:	dc0f      	bgt.n	800d518 <USBH_write+0x6c>
 800d4f8:	2b28      	cmp	r3, #40	; 0x28
 800d4fa:	d009      	beq.n	800d510 <USBH_write+0x64>
 800d4fc:	2b28      	cmp	r3, #40	; 0x28
 800d4fe:	dc0b      	bgt.n	800d518 <USBH_write+0x6c>
 800d500:	2b04      	cmp	r3, #4
 800d502:	d005      	beq.n	800d510 <USBH_write+0x64>
 800d504:	2b27      	cmp	r3, #39	; 0x27
 800d506:	d107      	bne.n	800d518 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800d508:	2302      	movs	r3, #2
 800d50a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d50e:	e007      	b.n	800d520 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800d510:	2303      	movs	r3, #3
 800d512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d516:	e003      	b.n	800d520 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800d51e:	bf00      	nop
    }
  }

  return res;
 800d520:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d524:	4618      	mov	r0, r3
 800d526:	3748      	adds	r7, #72	; 0x48
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200053f0 	.word	0x200053f0

0800d530 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b090      	sub	sp, #64	; 0x40
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	603a      	str	r2, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
 800d53c:	460b      	mov	r3, r1
 800d53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800d546:	79bb      	ldrb	r3, [r7, #6]
 800d548:	2b03      	cmp	r3, #3
 800d54a:	d852      	bhi.n	800d5f2 <USBH_ioctl+0xc2>
 800d54c:	a201      	add	r2, pc, #4	; (adr r2, 800d554 <USBH_ioctl+0x24>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d565 	.word	0x0800d565
 800d558:	0800d56d 	.word	0x0800d56d
 800d55c:	0800d597 	.word	0x0800d597
 800d560:	0800d5c3 	.word	0x0800d5c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d56a:	e045      	b.n	800d5f8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d56c:	f107 0208 	add.w	r2, r7, #8
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	4619      	mov	r1, r3
 800d574:	4823      	ldr	r0, [pc, #140]	; (800d604 <USBH_ioctl+0xd4>)
 800d576:	f000 fdd0 	bl	800e11a <USBH_MSC_GetLUNInfo>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d106      	bne.n	800d58e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d58c:	e034      	b.n	800d5f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d594:	e030      	b.n	800d5f8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d596:	f107 0208 	add.w	r2, r7, #8
 800d59a:	79fb      	ldrb	r3, [r7, #7]
 800d59c:	4619      	mov	r1, r3
 800d59e:	4819      	ldr	r0, [pc, #100]	; (800d604 <USBH_ioctl+0xd4>)
 800d5a0:	f000 fdbb 	bl	800e11a <USBH_MSC_GetLUNInfo>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d107      	bne.n	800d5ba <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800d5aa:	8a3b      	ldrh	r3, [r7, #16]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d5b8:	e01e      	b.n	800d5f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d5c0:	e01a      	b.n	800d5f8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800d5c2:	f107 0208 	add.w	r2, r7, #8
 800d5c6:	79fb      	ldrb	r3, [r7, #7]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	480e      	ldr	r0, [pc, #56]	; (800d604 <USBH_ioctl+0xd4>)
 800d5cc:	f000 fda5 	bl	800e11a <USBH_MSC_GetLUNInfo>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d109      	bne.n	800d5ea <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800d5d6:	8a3b      	ldrh	r3, [r7, #16]
 800d5d8:	0a5b      	lsrs	r3, r3, #9
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	461a      	mov	r2, r3
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800d5e8:	e006      	b.n	800d5f8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800d5f0:	e002      	b.n	800d5f8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800d5f2:	2304      	movs	r3, #4
 800d5f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800d5f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3740      	adds	r7, #64	; 0x40
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	200053f0 	.word	0x200053f0

0800d608 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d608:	b590      	push	{r4, r7, lr}
 800d60a:	b089      	sub	sp, #36	; 0x24
 800d60c:	af04      	add	r7, sp, #16
 800d60e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d616:	7919      	ldrb	r1, [r3, #4]
 800d618:	2350      	movs	r3, #80	; 0x50
 800d61a:	2206      	movs	r2, #6
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fd41 	bl	800f0a4 <USBH_FindInterface>
 800d622:	4603      	mov	r3, r0
 800d624:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2bff      	cmp	r3, #255	; 0xff
 800d62a:	d002      	beq.n	800d632 <USBH_MSC_InterfaceInit+0x2a>
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d901      	bls.n	800d636 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d632:	2302      	movs	r3, #2
 800d634:	e0ef      	b.n	800d816 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f001 fd16 	bl	800f06c <USBH_SelectInterface>
 800d640:	4603      	mov	r3, r0
 800d642:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800d64a:	2302      	movs	r3, #2
 800d64c:	e0e3      	b.n	800d816 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d654:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d658:	f006 ffd0 	bl	80145fc <malloc>
 800d65c:	4603      	mov	r3, r0
 800d65e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d666:	69db      	ldr	r3, [r3, #28]
 800d668:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800d670:	2302      	movs	r3, #2
 800d672:	e0d0      	b.n	800d816 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800d674:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d678:	2100      	movs	r1, #0
 800d67a:	68b8      	ldr	r0, [r7, #8]
 800d67c:	f006 ffdc 	bl	8014638 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	211a      	movs	r1, #26
 800d686:	fb01 f303 	mul.w	r3, r1, r3
 800d68a:	4413      	add	r3, r2
 800d68c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b25b      	sxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	da16      	bge.n	800d6c6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	211a      	movs	r1, #26
 800d69e:	fb01 f303 	mul.w	r3, r1, r3
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d6a8:	781a      	ldrb	r2, [r3, #0]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	211a      	movs	r1, #26
 800d6b4:	fb01 f303 	mul.w	r3, r1, r3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d6be:	881a      	ldrh	r2, [r3, #0]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	815a      	strh	r2, [r3, #10]
 800d6c4:	e015      	b.n	800d6f2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	211a      	movs	r1, #26
 800d6cc:	fb01 f303 	mul.w	r3, r1, r3
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	211a      	movs	r1, #26
 800d6e2:	fb01 f303 	mul.w	r3, r1, r3
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d6ec:	881a      	ldrh	r2, [r3, #0]
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d6f2:	7bfb      	ldrb	r3, [r7, #15]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	211a      	movs	r1, #26
 800d6f8:	fb01 f303 	mul.w	r3, r1, r3
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	b25b      	sxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	da16      	bge.n	800d738 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	211a      	movs	r1, #26
 800d710:	fb01 f303 	mul.w	r3, r1, r3
 800d714:	4413      	add	r3, r2
 800d716:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d71a:	781a      	ldrb	r2, [r3, #0]
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	211a      	movs	r1, #26
 800d726:	fb01 f303 	mul.w	r3, r1, r3
 800d72a:	4413      	add	r3, r2
 800d72c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d730:	881a      	ldrh	r2, [r3, #0]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	815a      	strh	r2, [r3, #10]
 800d736:	e015      	b.n	800d764 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800d738:	7bfb      	ldrb	r3, [r7, #15]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	211a      	movs	r1, #26
 800d73e:	fb01 f303 	mul.w	r3, r1, r3
 800d742:	4413      	add	r3, r2
 800d744:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d748:	781a      	ldrb	r2, [r3, #0]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	211a      	movs	r1, #26
 800d754:	fb01 f303 	mul.w	r3, r1, r3
 800d758:	4413      	add	r3, r2
 800d75a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d75e:	881a      	ldrh	r2, [r3, #0]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	2200      	movs	r2, #0
 800d768:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2200      	movs	r2, #0
 800d76e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2200      	movs	r2, #0
 800d774:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	799b      	ldrb	r3, [r3, #6]
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f003 f8c0 	bl	8010902 <USBH_AllocPipe>
 800d782:	4603      	mov	r3, r0
 800d784:	461a      	mov	r2, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	79db      	ldrb	r3, [r3, #7]
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f003 f8b6 	bl	8010902 <USBH_AllocPipe>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fdec 	bl	800e37c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	7959      	ldrb	r1, [r3, #5]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	7998      	ldrb	r0, [r3, #6]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	8912      	ldrh	r2, [r2, #8]
 800d7bc:	9202      	str	r2, [sp, #8]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	9201      	str	r2, [sp, #4]
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f003 f86b 	bl	80108a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	7919      	ldrb	r1, [r3, #4]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	79d8      	ldrb	r0, [r3, #7]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	8952      	ldrh	r2, [r2, #10]
 800d7e6:	9202      	str	r2, [sp, #8]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	9201      	str	r2, [sp, #4]
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f003 f856 	bl	80108a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	791b      	ldrb	r3, [r3, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	4619      	mov	r1, r3
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f006 fe17 	bl	8014434 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	795b      	ldrb	r3, [r3, #5]
 800d80a:	2200      	movs	r2, #0
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f006 fe10 	bl	8014434 <USBH_LL_SetToggle>

  return USBH_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd90      	pop	{r4, r7, pc}

0800d81e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	795b      	ldrb	r3, [r3, #5]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00e      	beq.n	800d856 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	795b      	ldrb	r3, [r3, #5]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f003 f84f 	bl	80108e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	795b      	ldrb	r3, [r3, #5]
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f003 f87a 	bl	8010944 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2200      	movs	r2, #0
 800d854:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	791b      	ldrb	r3, [r3, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00e      	beq.n	800d87c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	791b      	ldrb	r3, [r3, #4]
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f003 f83c 	bl	80108e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	791b      	ldrb	r3, [r3, #4]
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f003 f867 	bl	8010944 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d882:	69db      	ldr	r3, [r3, #28]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d88e:	69db      	ldr	r3, [r3, #28]
 800d890:	4618      	mov	r0, r3
 800d892:	f006 febb 	bl	801460c <free>
    phost->pActiveClass->pData = 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d89c:	2200      	movs	r2, #0
 800d89e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	7b9b      	ldrb	r3, [r3, #14]
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d041      	beq.n	800d94c <USBH_MSC_ClassRequest+0xa2>
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	dc4b      	bgt.n	800d964 <USBH_MSC_ClassRequest+0xba>
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <USBH_MSC_ClassRequest+0x2a>
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d147      	bne.n	800d964 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 fd31 	bl	800e340 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d104      	bne.n	800d8f2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d137      	bne.n	800d968 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d804      	bhi.n	800d90a <USBH_MSC_ClassRequest+0x60>
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	3301      	adds	r3, #1
 800d906:	b2da      	uxtb	r2, r3
 800d908:	e000      	b.n	800d90c <USBH_MSC_ClassRequest+0x62>
 800d90a:	2202      	movs	r2, #2
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d910:	2300      	movs	r3, #0
 800d912:	73bb      	strb	r3, [r7, #14]
 800d914:	e014      	b.n	800d940 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800d916:	7bbb      	ldrb	r3, [r7, #14]
 800d918:	68ba      	ldr	r2, [r7, #8]
 800d91a:	2134      	movs	r1, #52	; 0x34
 800d91c:	fb01 f303 	mul.w	r3, r1, r3
 800d920:	4413      	add	r3, r2
 800d922:	3392      	adds	r3, #146	; 0x92
 800d924:	2202      	movs	r2, #2
 800d926:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800d928:	7bbb      	ldrb	r3, [r7, #14]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	2134      	movs	r1, #52	; 0x34
 800d92e:	fb01 f303 	mul.w	r3, r1, r3
 800d932:	4413      	add	r3, r2
 800d934:	33c1      	adds	r3, #193	; 0xc1
 800d936:	2200      	movs	r2, #0
 800d938:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
 800d93c:	3301      	adds	r3, #1
 800d93e:	73bb      	strb	r3, [r7, #14]
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	7bba      	ldrb	r2, [r7, #14]
 800d946:	429a      	cmp	r2, r3
 800d948:	d3e5      	bcc.n	800d916 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800d94a:	e00d      	b.n	800d968 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800d94c:	2100      	movs	r1, #0
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f002 fa87 	bl	800fe62 <USBH_ClrFeature>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d108      	bne.n	800d96c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	7bda      	ldrb	r2, [r3, #15]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	739a      	strb	r2, [r3, #14]
      }
      break;
 800d962:	e003      	b.n	800d96c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800d964:	bf00      	nop
 800d966:	e002      	b.n	800d96e <USBH_MSC_ClassRequest+0xc4>
      break;
 800d968:	bf00      	nop
 800d96a:	e000      	b.n	800d96e <USBH_MSC_ClassRequest+0xc4>
      break;
 800d96c:	bf00      	nop
  }

  return status;
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d986:	69db      	ldr	r3, [r3, #28]
 800d988:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800d98a:	2301      	movs	r3, #1
 800d98c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800d98e:	2301      	movs	r3, #1
 800d990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800d992:	2301      	movs	r3, #1
 800d994:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	7b1b      	ldrb	r3, [r3, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <USBH_MSC_Process+0x2e>
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	f000 828d 	beq.w	800debe <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800d9a4:	e28e      	b.n	800dec4 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	f080 8267 	bcs.w	800de86 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9be:	4619      	mov	r1, r3
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	2334      	movs	r3, #52	; 0x34
 800d9c4:	fb03 f301 	mul.w	r3, r3, r1
 800d9c8:	4413      	add	r3, r2
 800d9ca:	3391      	adds	r3, #145	; 0x91
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	2334      	movs	r3, #52	; 0x34
 800d9dc:	fb03 f301 	mul.w	r3, r3, r1
 800d9e0:	4413      	add	r3, r2
 800d9e2:	3390      	adds	r3, #144	; 0x90
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b08      	cmp	r3, #8
 800d9e8:	f200 8235 	bhi.w	800de56 <USBH_MSC_Process+0x4de>
 800d9ec:	a201      	add	r2, pc, #4	; (adr r2, 800d9f4 <USBH_MSC_Process+0x7c>)
 800d9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f2:	bf00      	nop
 800d9f4:	0800da19 	.word	0x0800da19
 800d9f8:	0800de57 	.word	0x0800de57
 800d9fc:	0800dae1 	.word	0x0800dae1
 800da00:	0800dc65 	.word	0x0800dc65
 800da04:	0800da3f 	.word	0x0800da3f
 800da08:	0800dd31 	.word	0x0800dd31
 800da0c:	0800de57 	.word	0x0800de57
 800da10:	0800de57 	.word	0x0800de57
 800da14:	0800de45 	.word	0x0800de45
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da1e:	4619      	mov	r1, r3
 800da20:	693a      	ldr	r2, [r7, #16]
 800da22:	2334      	movs	r3, #52	; 0x34
 800da24:	fb03 f301 	mul.w	r3, r3, r1
 800da28:	4413      	add	r3, r2
 800da2a:	3390      	adds	r3, #144	; 0x90
 800da2c:	2204      	movs	r2, #4
 800da2e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800da3c:	e214      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da44:	b2d9      	uxtb	r1, r3
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da4c:	461a      	mov	r2, r3
 800da4e:	2334      	movs	r3, #52	; 0x34
 800da50:	fb03 f302 	mul.w	r3, r3, r2
 800da54:	3398      	adds	r3, #152	; 0x98
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	4413      	add	r3, r2
 800da5a:	3307      	adds	r3, #7
 800da5c:	461a      	mov	r2, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f001 f836 	bl	800ead0 <USBH_MSC_SCSI_Inquiry>
 800da64:	4603      	mov	r3, r0
 800da66:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800da68:	7bfb      	ldrb	r3, [r7, #15]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10b      	bne.n	800da86 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da74:	4619      	mov	r1, r3
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	2334      	movs	r3, #52	; 0x34
 800da7a:	fb03 f301 	mul.w	r3, r3, r1
 800da7e:	4413      	add	r3, r2
 800da80:	3390      	adds	r3, #144	; 0x90
 800da82:	2202      	movs	r2, #2
 800da84:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d10c      	bne.n	800daa6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800da92:	4619      	mov	r1, r3
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	2334      	movs	r3, #52	; 0x34
 800da98:	fb03 f301 	mul.w	r3, r3, r1
 800da9c:	4413      	add	r3, r2
 800da9e:	3390      	adds	r3, #144	; 0x90
 800daa0:	2205      	movs	r2, #5
 800daa2:	701a      	strb	r2, [r3, #0]
            break;
 800daa4:	e1d9      	b.n	800de5a <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	2b04      	cmp	r3, #4
 800daaa:	f040 81d6 	bne.w	800de5a <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dab4:	4619      	mov	r1, r3
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	2334      	movs	r3, #52	; 0x34
 800daba:	fb03 f301 	mul.w	r3, r3, r1
 800dabe:	4413      	add	r3, r2
 800dac0:	3390      	adds	r3, #144	; 0x90
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dacc:	4619      	mov	r1, r3
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	2334      	movs	r3, #52	; 0x34
 800dad2:	fb03 f301 	mul.w	r3, r3, r1
 800dad6:	4413      	add	r3, r2
 800dad8:	3391      	adds	r3, #145	; 0x91
 800dada:	2202      	movs	r2, #2
 800dadc:	701a      	strb	r2, [r3, #0]
            break;
 800dade:	e1bc      	b.n	800de5a <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 ff32 	bl	800e954 <USBH_MSC_SCSI_TestUnitReady>
 800daf0:	4603      	mov	r3, r0
 800daf2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800daf4:	7bbb      	ldrb	r3, [r7, #14]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d149      	bne.n	800db8e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db00:	4619      	mov	r1, r3
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	2334      	movs	r3, #52	; 0x34
 800db06:	fb03 f301 	mul.w	r3, r3, r1
 800db0a:	4413      	add	r3, r2
 800db0c:	3392      	adds	r3, #146	; 0x92
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00c      	beq.n	800db2e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db1a:	4619      	mov	r1, r3
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	2334      	movs	r3, #52	; 0x34
 800db20:	fb03 f301 	mul.w	r3, r3, r1
 800db24:	4413      	add	r3, r2
 800db26:	33c1      	adds	r3, #193	; 0xc1
 800db28:	2201      	movs	r2, #1
 800db2a:	701a      	strb	r2, [r3, #0]
 800db2c:	e00b      	b.n	800db46 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db34:	4619      	mov	r1, r3
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	2334      	movs	r3, #52	; 0x34
 800db3a:	fb03 f301 	mul.w	r3, r3, r1
 800db3e:	4413      	add	r3, r2
 800db40:	33c1      	adds	r3, #193	; 0xc1
 800db42:	2200      	movs	r2, #0
 800db44:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db4c:	4619      	mov	r1, r3
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	2334      	movs	r3, #52	; 0x34
 800db52:	fb03 f301 	mul.w	r3, r3, r1
 800db56:	4413      	add	r3, r2
 800db58:	3390      	adds	r3, #144	; 0x90
 800db5a:	2203      	movs	r2, #3
 800db5c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db64:	4619      	mov	r1, r3
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	2334      	movs	r3, #52	; 0x34
 800db6a:	fb03 f301 	mul.w	r3, r3, r1
 800db6e:	4413      	add	r3, r2
 800db70:	3391      	adds	r3, #145	; 0x91
 800db72:	2200      	movs	r2, #0
 800db74:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db7c:	4619      	mov	r1, r3
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	2334      	movs	r3, #52	; 0x34
 800db82:	fb03 f301 	mul.w	r3, r3, r1
 800db86:	4413      	add	r3, r2
 800db88:	3392      	adds	r3, #146	; 0x92
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d14a      	bne.n	800dc2a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800db9a:	4619      	mov	r1, r3
 800db9c:	693a      	ldr	r2, [r7, #16]
 800db9e:	2334      	movs	r3, #52	; 0x34
 800dba0:	fb03 f301 	mul.w	r3, r3, r1
 800dba4:	4413      	add	r3, r2
 800dba6:	3392      	adds	r3, #146	; 0x92
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d00c      	beq.n	800dbc8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	2334      	movs	r3, #52	; 0x34
 800dbba:	fb03 f301 	mul.w	r3, r3, r1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	33c1      	adds	r3, #193	; 0xc1
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	701a      	strb	r2, [r3, #0]
 800dbc6:	e00b      	b.n	800dbe0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dbce:	4619      	mov	r1, r3
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	2334      	movs	r3, #52	; 0x34
 800dbd4:	fb03 f301 	mul.w	r3, r3, r1
 800dbd8:	4413      	add	r3, r2
 800dbda:	33c1      	adds	r3, #193	; 0xc1
 800dbdc:	2200      	movs	r2, #0
 800dbde:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	2334      	movs	r3, #52	; 0x34
 800dbec:	fb03 f301 	mul.w	r3, r3, r1
 800dbf0:	4413      	add	r3, r2
 800dbf2:	3390      	adds	r3, #144	; 0x90
 800dbf4:	2205      	movs	r2, #5
 800dbf6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dbfe:	4619      	mov	r1, r3
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	2334      	movs	r3, #52	; 0x34
 800dc04:	fb03 f301 	mul.w	r3, r3, r1
 800dc08:	4413      	add	r3, r2
 800dc0a:	3391      	adds	r3, #145	; 0x91
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc16:	4619      	mov	r1, r3
 800dc18:	693a      	ldr	r2, [r7, #16]
 800dc1a:	2334      	movs	r3, #52	; 0x34
 800dc1c:	fb03 f301 	mul.w	r3, r3, r1
 800dc20:	4413      	add	r3, r2
 800dc22:	3392      	adds	r3, #146	; 0x92
 800dc24:	2202      	movs	r2, #2
 800dc26:	701a      	strb	r2, [r3, #0]
            break;
 800dc28:	e119      	b.n	800de5e <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	f040 8116 	bne.w	800de5e <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc38:	4619      	mov	r1, r3
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	2334      	movs	r3, #52	; 0x34
 800dc3e:	fb03 f301 	mul.w	r3, r3, r1
 800dc42:	4413      	add	r3, r2
 800dc44:	3390      	adds	r3, #144	; 0x90
 800dc46:	2201      	movs	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc50:	4619      	mov	r1, r3
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	2334      	movs	r3, #52	; 0x34
 800dc56:	fb03 f301 	mul.w	r3, r3, r1
 800dc5a:	4413      	add	r3, r2
 800dc5c:	3391      	adds	r3, #145	; 0x91
 800dc5e:	2202      	movs	r2, #2
 800dc60:	701a      	strb	r2, [r3, #0]
            break;
 800dc62:	e0fc      	b.n	800de5e <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc6a:	b2d9      	uxtb	r1, r3
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc72:	461a      	mov	r2, r3
 800dc74:	2334      	movs	r3, #52	; 0x34
 800dc76:	fb03 f302 	mul.w	r3, r3, r2
 800dc7a:	3390      	adds	r3, #144	; 0x90
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	4413      	add	r3, r2
 800dc80:	3304      	adds	r3, #4
 800dc82:	461a      	mov	r2, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fea8 	bl	800e9da <USBH_MSC_SCSI_ReadCapacity>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d120      	bne.n	800dcd6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	2334      	movs	r3, #52	; 0x34
 800dca0:	fb03 f301 	mul.w	r3, r3, r1
 800dca4:	4413      	add	r3, r2
 800dca6:	3390      	adds	r3, #144	; 0x90
 800dca8:	2201      	movs	r2, #1
 800dcaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	2334      	movs	r3, #52	; 0x34
 800dcb8:	fb03 f301 	mul.w	r3, r3, r1
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3391      	adds	r3, #145	; 0x91
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dcca:	3301      	adds	r3, #1
 800dccc:	b29a      	uxth	r2, r3
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800dcd4:	e0c5      	b.n	800de62 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d10c      	bne.n	800dcf6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dce2:	4619      	mov	r1, r3
 800dce4:	693a      	ldr	r2, [r7, #16]
 800dce6:	2334      	movs	r3, #52	; 0x34
 800dce8:	fb03 f301 	mul.w	r3, r3, r1
 800dcec:	4413      	add	r3, r2
 800dcee:	3390      	adds	r3, #144	; 0x90
 800dcf0:	2205      	movs	r2, #5
 800dcf2:	701a      	strb	r2, [r3, #0]
            break;
 800dcf4:	e0b5      	b.n	800de62 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dcf6:	7bfb      	ldrb	r3, [r7, #15]
 800dcf8:	2b04      	cmp	r3, #4
 800dcfa:	f040 80b2 	bne.w	800de62 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd04:	4619      	mov	r1, r3
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	2334      	movs	r3, #52	; 0x34
 800dd0a:	fb03 f301 	mul.w	r3, r3, r1
 800dd0e:	4413      	add	r3, r2
 800dd10:	3390      	adds	r3, #144	; 0x90
 800dd12:	2201      	movs	r2, #1
 800dd14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	2334      	movs	r3, #52	; 0x34
 800dd22:	fb03 f301 	mul.w	r3, r3, r1
 800dd26:	4413      	add	r3, r2
 800dd28:	3391      	adds	r3, #145	; 0x91
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	701a      	strb	r2, [r3, #0]
            break;
 800dd2e:	e098      	b.n	800de62 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd36:	b2d9      	uxtb	r1, r3
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd3e:	461a      	mov	r2, r3
 800dd40:	2334      	movs	r3, #52	; 0x34
 800dd42:	fb03 f302 	mul.w	r3, r3, r2
 800dd46:	3398      	adds	r3, #152	; 0x98
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	461a      	mov	r2, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 ff62 	bl	800ec1a <USBH_MSC_SCSI_RequestSense>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d145      	bne.n	800ddec <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd66:	4619      	mov	r1, r3
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	2334      	movs	r3, #52	; 0x34
 800dd6c:	fb03 f301 	mul.w	r3, r3, r1
 800dd70:	4413      	add	r3, r2
 800dd72:	339c      	adds	r3, #156	; 0x9c
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	2b06      	cmp	r3, #6
 800dd78:	d00c      	beq.n	800dd94 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dd80:	4619      	mov	r1, r3
 800dd82:	693a      	ldr	r2, [r7, #16]
 800dd84:	2334      	movs	r3, #52	; 0x34
 800dd86:	fb03 f301 	mul.w	r3, r3, r1
 800dd8a:	4413      	add	r3, r2
 800dd8c:	339c      	adds	r3, #156	; 0x9c
 800dd8e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d117      	bne.n	800ddc4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	f242 720f 	movw	r2, #9999	; 0x270f
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d80c      	bhi.n	800ddc4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	2334      	movs	r3, #52	; 0x34
 800ddb6:	fb03 f301 	mul.w	r3, r3, r1
 800ddba:	4413      	add	r3, r2
 800ddbc:	3390      	adds	r3, #144	; 0x90
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	701a      	strb	r2, [r3, #0]
                  break;
 800ddc2:	e051      	b.n	800de68 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ddca:	4619      	mov	r1, r3
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	2334      	movs	r3, #52	; 0x34
 800ddd0:	fb03 f301 	mul.w	r3, r3, r1
 800ddd4:	4413      	add	r3, r2
 800ddd6:	3390      	adds	r3, #144	; 0x90
 800ddd8:	2201      	movs	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800dde2:	3301      	adds	r3, #1
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d10c      	bne.n	800de0c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	693a      	ldr	r2, [r7, #16]
 800ddfc:	2334      	movs	r3, #52	; 0x34
 800ddfe:	fb03 f301 	mul.w	r3, r3, r1
 800de02:	4413      	add	r3, r2
 800de04:	3390      	adds	r3, #144	; 0x90
 800de06:	2208      	movs	r2, #8
 800de08:	701a      	strb	r2, [r3, #0]
            break;
 800de0a:	e02c      	b.n	800de66 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800de0c:	7bfb      	ldrb	r3, [r7, #15]
 800de0e:	2b04      	cmp	r3, #4
 800de10:	d129      	bne.n	800de66 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800de18:	4619      	mov	r1, r3
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	2334      	movs	r3, #52	; 0x34
 800de1e:	fb03 f301 	mul.w	r3, r3, r1
 800de22:	4413      	add	r3, r2
 800de24:	3390      	adds	r3, #144	; 0x90
 800de26:	2201      	movs	r2, #1
 800de28:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800de30:	4619      	mov	r1, r3
 800de32:	693a      	ldr	r2, [r7, #16]
 800de34:	2334      	movs	r3, #52	; 0x34
 800de36:	fb03 f301 	mul.w	r3, r3, r1
 800de3a:	4413      	add	r3, r2
 800de3c:	3391      	adds	r3, #145	; 0x91
 800de3e:	2202      	movs	r2, #2
 800de40:	701a      	strb	r2, [r3, #0]
            break;
 800de42:	e010      	b.n	800de66 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800de4a:	3301      	adds	r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800de54:	e008      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            break;
 800de56:	bf00      	nop
 800de58:	e006      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            break;
 800de5a:	bf00      	nop
 800de5c:	e004      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            break;
 800de5e:	bf00      	nop
 800de60:	e002      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            break;
 800de62:	bf00      	nop
 800de64:	e000      	b.n	800de68 <USBH_MSC_Process+0x4f0>
            break;
 800de66:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2204      	movs	r2, #4
 800de6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de7c:	2300      	movs	r3, #0
 800de7e:	2200      	movs	r2, #0
 800de80:	f002 ffc8 	bl	8010e14 <osMessageQueuePut>
      break;
 800de84:	e01e      	b.n	800dec4 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	2200      	movs	r2, #0
 800de8a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2201      	movs	r2, #1
 800de92:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2204      	movs	r2, #4
 800de98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dea8:	2300      	movs	r3, #0
 800deaa:	2200      	movs	r2, #0
 800deac:	f002 ffb2 	bl	8010e14 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deb6:	2102      	movs	r1, #2
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	4798      	blx	r3
      break;
 800debc:	e002      	b.n	800dec4 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	75fb      	strb	r3, [r7, #23]
      break;
 800dec2:	bf00      	nop
  }
  return error;
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop

0800ded0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b088      	sub	sp, #32
 800deea:	af02      	add	r7, sp, #8
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	460b      	mov	r3, r1
 800def0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800defc:	2301      	movs	r3, #1
 800defe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	2134      	movs	r1, #52	; 0x34
 800df0a:	fb01 f303 	mul.w	r3, r1, r3
 800df0e:	4413      	add	r3, r2
 800df10:	3390      	adds	r3, #144	; 0x90
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	2b07      	cmp	r3, #7
 800df16:	d04b      	beq.n	800dfb0 <USBH_MSC_RdWrProcess+0xca>
 800df18:	2b07      	cmp	r3, #7
 800df1a:	f300 80d2 	bgt.w	800e0c2 <USBH_MSC_RdWrProcess+0x1dc>
 800df1e:	2b05      	cmp	r3, #5
 800df20:	f000 8089 	beq.w	800e036 <USBH_MSC_RdWrProcess+0x150>
 800df24:	2b06      	cmp	r3, #6
 800df26:	f040 80cc 	bne.w	800e0c2 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800df2a:	78f9      	ldrb	r1, [r7, #3]
 800df2c:	2300      	movs	r3, #0
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	2200      	movs	r2, #0
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 ff54 	bl	800ede2 <USBH_MSC_SCSI_Read>
 800df3a:	4603      	mov	r3, r0
 800df3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800df3e:	7bfb      	ldrb	r3, [r7, #15]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10b      	bne.n	800df5c <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800df44:	78fb      	ldrb	r3, [r7, #3]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	2134      	movs	r1, #52	; 0x34
 800df4a:	fb01 f303 	mul.w	r3, r1, r3
 800df4e:	4413      	add	r3, r2
 800df50:	3390      	adds	r3, #144	; 0x90
 800df52:	2201      	movs	r2, #1
 800df54:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	75fb      	strb	r3, [r7, #23]
 800df5a:	e01a      	b.n	800df92 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d109      	bne.n	800df76 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800df62:	78fb      	ldrb	r3, [r7, #3]
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	2134      	movs	r1, #52	; 0x34
 800df68:	fb01 f303 	mul.w	r3, r1, r3
 800df6c:	4413      	add	r3, r2
 800df6e:	3390      	adds	r3, #144	; 0x90
 800df70:	2205      	movs	r2, #5
 800df72:	701a      	strb	r2, [r3, #0]
 800df74:	e00d      	b.n	800df92 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800df76:	7bfb      	ldrb	r3, [r7, #15]
 800df78:	2b04      	cmp	r3, #4
 800df7a:	d10a      	bne.n	800df92 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800df7c:	78fb      	ldrb	r3, [r7, #3]
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	2134      	movs	r1, #52	; 0x34
 800df82:	fb01 f303 	mul.w	r3, r1, r3
 800df86:	4413      	add	r3, r2
 800df88:	3390      	adds	r3, #144	; 0x90
 800df8a:	2208      	movs	r2, #8
 800df8c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800df8e:	2302      	movs	r3, #2
 800df90:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2204      	movs	r2, #4
 800df96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f002 ff33 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800dfae:	e089      	b.n	800e0c4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800dfb0:	78f9      	ldrb	r1, [r7, #3]
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2200      	movs	r2, #0
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fea6 	bl	800ed0c <USBH_MSC_SCSI_Write>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10b      	bne.n	800dfe2 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800dfca:	78fb      	ldrb	r3, [r7, #3]
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	2134      	movs	r1, #52	; 0x34
 800dfd0:	fb01 f303 	mul.w	r3, r1, r3
 800dfd4:	4413      	add	r3, r2
 800dfd6:	3390      	adds	r3, #144	; 0x90
 800dfd8:	2201      	movs	r2, #1
 800dfda:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	75fb      	strb	r3, [r7, #23]
 800dfe0:	e01a      	b.n	800e018 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	d109      	bne.n	800dffc <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800dfe8:	78fb      	ldrb	r3, [r7, #3]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	2134      	movs	r1, #52	; 0x34
 800dfee:	fb01 f303 	mul.w	r3, r1, r3
 800dff2:	4413      	add	r3, r2
 800dff4:	3390      	adds	r3, #144	; 0x90
 800dff6:	2205      	movs	r2, #5
 800dff8:	701a      	strb	r2, [r3, #0]
 800dffa:	e00d      	b.n	800e018 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	2b04      	cmp	r3, #4
 800e000:	d10a      	bne.n	800e018 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800e002:	78fb      	ldrb	r3, [r7, #3]
 800e004:	693a      	ldr	r2, [r7, #16]
 800e006:	2134      	movs	r1, #52	; 0x34
 800e008:	fb01 f303 	mul.w	r3, r1, r3
 800e00c:	4413      	add	r3, r2
 800e00e:	3390      	adds	r3, #144	; 0x90
 800e010:	2208      	movs	r2, #8
 800e012:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800e014:	2302      	movs	r3, #2
 800e016:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2204      	movs	r2, #4
 800e01c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e02c:	2300      	movs	r3, #0
 800e02e:	2200      	movs	r2, #0
 800e030:	f002 fef0 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800e034:	e046      	b.n	800e0c4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800e036:	78fb      	ldrb	r3, [r7, #3]
 800e038:	2234      	movs	r2, #52	; 0x34
 800e03a:	fb02 f303 	mul.w	r3, r2, r3
 800e03e:	3398      	adds	r3, #152	; 0x98
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	4413      	add	r3, r2
 800e044:	1d1a      	adds	r2, r3, #4
 800e046:	78fb      	ldrb	r3, [r7, #3]
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 fde5 	bl	800ec1a <USBH_MSC_SCSI_RequestSense>
 800e050:	4603      	mov	r3, r0
 800e052:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800e054:	7bfb      	ldrb	r3, [r7, #15]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d113      	bne.n	800e082 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800e05a:	78fb      	ldrb	r3, [r7, #3]
 800e05c:	693a      	ldr	r2, [r7, #16]
 800e05e:	2134      	movs	r1, #52	; 0x34
 800e060:	fb01 f303 	mul.w	r3, r1, r3
 800e064:	4413      	add	r3, r2
 800e066:	3390      	adds	r3, #144	; 0x90
 800e068:	2201      	movs	r2, #1
 800e06a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800e06c:	78fb      	ldrb	r3, [r7, #3]
 800e06e:	693a      	ldr	r2, [r7, #16]
 800e070:	2134      	movs	r1, #52	; 0x34
 800e072:	fb01 f303 	mul.w	r3, r1, r3
 800e076:	4413      	add	r3, r2
 800e078:	3391      	adds	r3, #145	; 0x91
 800e07a:	2202      	movs	r2, #2
 800e07c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800e07e:	2302      	movs	r3, #2
 800e080:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	2b02      	cmp	r3, #2
 800e086:	d00d      	beq.n	800e0a4 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800e088:	7bfb      	ldrb	r3, [r7, #15]
 800e08a:	2b04      	cmp	r3, #4
 800e08c:	d10a      	bne.n	800e0a4 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800e08e:	78fb      	ldrb	r3, [r7, #3]
 800e090:	693a      	ldr	r2, [r7, #16]
 800e092:	2134      	movs	r1, #52	; 0x34
 800e094:	fb01 f303 	mul.w	r3, r1, r3
 800e098:	4413      	add	r3, r2
 800e09a:	3390      	adds	r3, #144	; 0x90
 800e09c:	2208      	movs	r2, #8
 800e09e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2204      	movs	r2, #4
 800e0a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f002 feaa 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800e0c0:	e000      	b.n	800e0c4 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800e0c2:	bf00      	nop

  }
  return error;
 800e0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800e0ce:	b480      	push	{r7}
 800e0d0:	b085      	sub	sp, #20
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b0b      	cmp	r3, #11
 800e0ec:	d10c      	bne.n	800e108 <USBH_MSC_UnitIsReady+0x3a>
 800e0ee:	78fb      	ldrb	r3, [r7, #3]
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	2134      	movs	r1, #52	; 0x34
 800e0f4:	fb01 f303 	mul.w	r3, r1, r3
 800e0f8:	4413      	add	r3, r2
 800e0fa:	3391      	adds	r3, #145	; 0x91
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d102      	bne.n	800e108 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800e102:	2301      	movs	r3, #1
 800e104:	73fb      	strb	r3, [r7, #15]
 800e106:	e001      	b.n	800e10c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800e108:	2300      	movs	r3, #0
 800e10a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b086      	sub	sp, #24
 800e11e:	af00      	add	r7, sp, #0
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	460b      	mov	r3, r1
 800e124:	607a      	str	r2, [r7, #4]
 800e126:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e12e:	69db      	ldr	r3, [r3, #28]
 800e130:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b0b      	cmp	r3, #11
 800e13a:	d10d      	bne.n	800e158 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	2234      	movs	r2, #52	; 0x34
 800e140:	fb02 f303 	mul.w	r3, r2, r3
 800e144:	3390      	adds	r3, #144	; 0x90
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	4413      	add	r3, r2
 800e14a:	2234      	movs	r2, #52	; 0x34
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f006 fa64 	bl	801461c <memcpy>
    return USBH_OK;
 800e154:	2300      	movs	r3, #0
 800e156:	e000      	b.n	800e15a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800e158:	2302      	movs	r3, #2
  }
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b088      	sub	sp, #32
 800e166:	af02      	add	r7, sp, #8
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	603b      	str	r3, [r7, #0]
 800e16e:	460b      	mov	r3, r1
 800e170:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00e      	beq.n	800e1a6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800e18e:	2b0b      	cmp	r3, #11
 800e190:	d109      	bne.n	800e1a6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800e192:	7afb      	ldrb	r3, [r7, #11]
 800e194:	697a      	ldr	r2, [r7, #20]
 800e196:	2134      	movs	r1, #52	; 0x34
 800e198:	fb01 f303 	mul.w	r3, r1, r3
 800e19c:	4413      	add	r3, r2
 800e19e:	3390      	adds	r3, #144	; 0x90
 800e1a0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d001      	beq.n	800e1aa <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	e040      	b.n	800e22c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2206      	movs	r2, #6
 800e1ae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	2134      	movs	r1, #52	; 0x34
 800e1b6:	fb01 f303 	mul.w	r3, r1, r3
 800e1ba:	4413      	add	r3, r2
 800e1bc:	3390      	adds	r3, #144	; 0x90
 800e1be:	2206      	movs	r2, #6
 800e1c0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800e1cc:	7af9      	ldrb	r1, [r7, #11]
 800e1ce:	6a3b      	ldr	r3, [r7, #32]
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f000 fe03 	bl	800ede2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e1e2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800e1e4:	e016      	b.n	800e214 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	1ad2      	subs	r2, r2, r3
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	f242 7110 	movw	r1, #10000	; 0x2710
 800e1f6:	fb01 f303 	mul.w	r3, r1, r3
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d805      	bhi.n	800e20a <USBH_MSC_Read+0xa8>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d104      	bne.n	800e214 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2201      	movs	r2, #1
 800e20e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800e210:	2302      	movs	r3, #2
 800e212:	e00b      	b.n	800e22c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800e214:	7afb      	ldrb	r3, [r7, #11]
 800e216:	4619      	mov	r1, r3
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f7ff fe64 	bl	800dee6 <USBH_MSC_RdWrProcess>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b01      	cmp	r3, #1
 800e222:	d0e0      	beq.n	800e1e6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2201      	movs	r2, #1
 800e228:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af02      	add	r7, sp, #8
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	607a      	str	r2, [r7, #4]
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	460b      	mov	r3, r1
 800e242:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00e      	beq.n	800e278 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800e260:	2b0b      	cmp	r3, #11
 800e262:	d109      	bne.n	800e278 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800e264:	7afb      	ldrb	r3, [r7, #11]
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	2134      	movs	r1, #52	; 0x34
 800e26a:	fb01 f303 	mul.w	r3, r1, r3
 800e26e:	4413      	add	r3, r2
 800e270:	3390      	adds	r3, #144	; 0x90
 800e272:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800e274:	2b01      	cmp	r3, #1
 800e276:	d001      	beq.n	800e27c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800e278:	2302      	movs	r3, #2
 800e27a:	e040      	b.n	800e2fe <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2207      	movs	r2, #7
 800e280:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800e282:	7afb      	ldrb	r3, [r7, #11]
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	2134      	movs	r1, #52	; 0x34
 800e288:	fb01 f303 	mul.w	r3, r1, r3
 800e28c:	4413      	add	r3, r2
 800e28e:	3390      	adds	r3, #144	; 0x90
 800e290:	2207      	movs	r2, #7
 800e292:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800e294:	7afb      	ldrb	r3, [r7, #11]
 800e296:	b29a      	uxth	r2, r3
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800e29e:	7af9      	ldrb	r1, [r7, #11]
 800e2a0:	6a3b      	ldr	r3, [r7, #32]
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f000 fd2f 	bl	800ed0c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2b4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800e2b6:	e016      	b.n	800e2e6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	1ad2      	subs	r2, r2, r3
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	f242 7110 	movw	r1, #10000	; 0x2710
 800e2c8:	fb01 f303 	mul.w	r3, r1, r3
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d805      	bhi.n	800e2dc <USBH_MSC_Write+0xa8>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d104      	bne.n	800e2e6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	e00b      	b.n	800e2fe <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800e2e6:	7afb      	ldrb	r3, [r7, #11]
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff fdfb 	bl	800dee6 <USBH_MSC_RdWrProcess>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d0e0      	beq.n	800e2b8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3718      	adds	r7, #24
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2221      	movs	r2, #33	; 0x21
 800e312:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	22ff      	movs	r2, #255	; 0xff
 800e318:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2200      	movs	r2, #0
 800e31e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800e32c:	2200      	movs	r2, #0
 800e32e:	2100      	movs	r1, #0
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f001 ff76 	bl	8010222 <USBH_CtlReq>
 800e336:	4603      	mov	r3, r0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	22a1      	movs	r2, #161	; 0xa1
 800e34e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	22fe      	movs	r2, #254	; 0xfe
 800e354:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2201      	movs	r2, #1
 800e366:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800e368:	2201      	movs	r2, #1
 800e36a:	6839      	ldr	r1, [r7, #0]
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f001 ff58 	bl	8010222 <USBH_CtlReq>
 800e372:	4603      	mov	r3, r0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e38a:	69db      	ldr	r3, [r3, #28]
 800e38c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	4a09      	ldr	r2, [pc, #36]	; (800e3b8 <USBH_MSC_BOT_Init+0x3c>)
 800e392:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	4a09      	ldr	r2, [pc, #36]	; (800e3bc <USBH_MSC_BOT_Init+0x40>)
 800e398:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	43425355 	.word	0x43425355
 800e3bc:	20304050 	.word	0x20304050

0800e3c0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af02      	add	r7, sp, #8
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3e2:	69db      	ldr	r3, [r3, #28]
 800e3e4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	2b0a      	cmp	r3, #10
 800e3f4:	f200 822a 	bhi.w	800e84c <USBH_MSC_BOT_Process+0x48c>
 800e3f8:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <USBH_MSC_BOT_Process+0x40>)
 800e3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fe:	bf00      	nop
 800e400:	0800e42d 	.word	0x0800e42d
 800e404:	0800e455 	.word	0x0800e455
 800e408:	0800e513 	.word	0x0800e513
 800e40c:	0800e531 	.word	0x0800e531
 800e410:	0800e5ed 	.word	0x0800e5ed
 800e414:	0800e60f 	.word	0x0800e60f
 800e418:	0800e6fb 	.word	0x0800e6fb
 800e41c:	0800e717 	.word	0x0800e717
 800e420:	0800e7a1 	.word	0x0800e7a1
 800e424:	0800e7d1 	.word	0x0800e7d1
 800e428:	0800e833 	.word	0x0800e833
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	78fa      	ldrb	r2, [r7, #3]
 800e430:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	795b      	ldrb	r3, [r3, #5]
 800e446:	2201      	movs	r2, #1
 800e448:	9200      	str	r2, [sp, #0]
 800e44a:	221f      	movs	r2, #31
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f002 f9e6 	bl	801081e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800e452:	e20a      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	795b      	ldrb	r3, [r3, #5]
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f005 ffc0 	bl	80143e0 <USBH_LL_GetURBState>
 800e460:	4603      	mov	r3, r0
 800e462:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e464:	7d3b      	ldrb	r3, [r7, #20]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d126      	bne.n	800e4b8 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00f      	beq.n	800e492 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e478:	b25b      	sxtb	r3, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	da04      	bge.n	800e488 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	2203      	movs	r2, #3
 800e482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800e486:	e008      	b.n	800e49a <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	2205      	movs	r2, #5
 800e48c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800e490:	e003      	b.n	800e49a <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2207      	movs	r2, #7
 800e496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2202      	movs	r2, #2
 800e49e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f002 fcaf 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e4b6:	e1cb      	b.n	800e850 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e4b8:	7d3b      	ldrb	r3, [r7, #20]
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d112      	bne.n	800e4e4 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2202      	movs	r2, #2
 800e4ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4da:	2300      	movs	r3, #0
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f002 fc99 	bl	8010e14 <osMessageQueuePut>
      break;
 800e4e2:	e1b5      	b.n	800e850 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800e4e4:	7d3b      	ldrb	r3, [r7, #20]
 800e4e6:	2b05      	cmp	r3, #5
 800e4e8:	f040 81b2 	bne.w	800e850 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	220a      	movs	r2, #10
 800e4f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e508:	2300      	movs	r3, #0
 800e50a:	2200      	movs	r2, #0
 800e50c:	f002 fc82 	bl	8010e14 <osMessageQueuePut>
      break;
 800e510:	e19e      	b.n	800e850 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	895a      	ldrh	r2, [r3, #10]
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	791b      	ldrb	r3, [r3, #4]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f002 f9a1 	bl	8010868 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2204      	movs	r2, #4
 800e52a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800e52e:	e19c      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	791b      	ldrb	r3, [r3, #4]
 800e534:	4619      	mov	r1, r3
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f005 ff52 	bl	80143e0 <USBH_LL_GetURBState>
 800e53c:	4603      	mov	r3, r0
 800e53e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e540:	7d3b      	ldrb	r3, [r7, #20]
 800e542:	2b01      	cmp	r3, #1
 800e544:	d13b      	bne.n	800e5be <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e54a:	693a      	ldr	r2, [r7, #16]
 800e54c:	8952      	ldrh	r2, [r2, #10]
 800e54e:	4293      	cmp	r3, r2
 800e550:	d910      	bls.n	800e574 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e558:	693a      	ldr	r2, [r7, #16]
 800e55a:	8952      	ldrh	r2, [r2, #10]
 800e55c:	441a      	add	r2, r3
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	8952      	ldrh	r2, [r2, #10]
 800e56c:	1a9a      	subs	r2, r3, r2
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	65da      	str	r2, [r3, #92]	; 0x5c
 800e572:	e002      	b.n	800e57a <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	2200      	movs	r2, #0
 800e578:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	895a      	ldrh	r2, [r3, #10]
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	791b      	ldrb	r3, [r3, #4]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f002 f969 	bl	8010868 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800e596:	e15d      	b.n	800e854 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	2207      	movs	r2, #7
 800e59c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2202      	movs	r2, #2
 800e5a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f002 fc2c 	bl	8010e14 <osMessageQueuePut>
      break;
 800e5bc:	e14a      	b.n	800e854 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800e5be:	7d3b      	ldrb	r3, [r7, #20]
 800e5c0:	2b05      	cmp	r3, #5
 800e5c2:	f040 8147 	bne.w	800e854 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	2209      	movs	r2, #9
 800e5ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2202      	movs	r2, #2
 800e5d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f002 fc15 	bl	8010e14 <osMessageQueuePut>
      break;
 800e5ea:	e133      	b.n	800e854 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	891a      	ldrh	r2, [r3, #8]
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	795b      	ldrb	r3, [r3, #5]
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	9000      	str	r0, [sp, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f002 f90d 	bl	801081e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2206      	movs	r2, #6
 800e608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e60c:	e12d      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	795b      	ldrb	r3, [r3, #5]
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f005 fee3 	bl	80143e0 <USBH_LL_GetURBState>
 800e61a:	4603      	mov	r3, r0
 800e61c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800e61e:	7d3b      	ldrb	r3, [r7, #20]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d13d      	bne.n	800e6a0 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e628:	693a      	ldr	r2, [r7, #16]
 800e62a:	8912      	ldrh	r2, [r2, #8]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d910      	bls.n	800e652 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	8912      	ldrh	r2, [r2, #8]
 800e63a:	441a      	add	r2, r3
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	8912      	ldrh	r2, [r2, #8]
 800e64a:	1a9a      	subs	r2, r3, r2
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	65da      	str	r2, [r3, #92]	; 0x5c
 800e650:	e002      	b.n	800e658 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	2200      	movs	r2, #0
 800e656:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00c      	beq.n	800e67a <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	891a      	ldrh	r2, [r3, #8]
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	795b      	ldrb	r3, [r3, #5]
 800e66e:	2001      	movs	r0, #1
 800e670:	9000      	str	r0, [sp, #0]
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f002 f8d3 	bl	801081e <USBH_BulkSendData>
 800e678:	e003      	b.n	800e682 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	2207      	movs	r2, #7
 800e67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2202      	movs	r2, #2
 800e686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e696:	2300      	movs	r3, #0
 800e698:	2200      	movs	r2, #0
 800e69a:	f002 fbbb 	bl	8010e14 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800e69e:	e0db      	b.n	800e858 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e6a0:	7d3b      	ldrb	r3, [r7, #20]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d112      	bne.n	800e6cc <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	2205      	movs	r2, #5
 800e6aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f002 fba5 	bl	8010e14 <osMessageQueuePut>
      break;
 800e6ca:	e0c5      	b.n	800e858 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800e6cc:	7d3b      	ldrb	r3, [r7, #20]
 800e6ce:	2b05      	cmp	r3, #5
 800e6d0:	f040 80c2 	bne.w	800e858 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	220a      	movs	r2, #10
 800e6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f002 fb8e 	bl	8010e14 <osMessageQueuePut>
      break;
 800e6f8:	e0ae      	b.n	800e858 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	791b      	ldrb	r3, [r3, #4]
 800e704:	220d      	movs	r2, #13
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f002 f8ae 	bl	8010868 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	2208      	movs	r2, #8
 800e710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e714:	e0a9      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	791b      	ldrb	r3, [r3, #4]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f005 fe5f 	bl	80143e0 <USBH_LL_GetURBState>
 800e722:	4603      	mov	r3, r0
 800e724:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800e726:	7d3b      	ldrb	r3, [r7, #20]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d123      	bne.n	800e774 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f8c5 	bl	800e8cc <USBH_MSC_DecodeCSW>
 800e742:	4603      	mov	r3, r0
 800e744:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800e746:	7d7b      	ldrb	r3, [r7, #21]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800e74c:	2300      	movs	r3, #0
 800e74e:	75fb      	strb	r3, [r7, #23]
 800e750:	e001      	b.n	800e756 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800e752:	2302      	movs	r3, #2
 800e754:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2202      	movs	r2, #2
 800e75a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e76a:	2300      	movs	r3, #0
 800e76c:	2200      	movs	r2, #0
 800e76e:	f002 fb51 	bl	8010e14 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800e772:	e073      	b.n	800e85c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800e774:	7d3b      	ldrb	r3, [r7, #20]
 800e776:	2b05      	cmp	r3, #5
 800e778:	d170      	bne.n	800e85c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	2209      	movs	r2, #9
 800e77e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2202      	movs	r2, #2
 800e786:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e796:	2300      	movs	r3, #0
 800e798:	2200      	movs	r2, #0
 800e79a:	f002 fb3b 	bl	8010e14 <osMessageQueuePut>
      break;
 800e79e:	e05d      	b.n	800e85c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800e7a0:	78fb      	ldrb	r3, [r7, #3]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f864 	bl	800e874 <USBH_MSC_BOT_Abort>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e7b0:	7dbb      	ldrb	r3, [r7, #22]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d104      	bne.n	800e7c0 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	2207      	movs	r2, #7
 800e7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800e7be:	e04f      	b.n	800e860 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800e7c0:	7dbb      	ldrb	r3, [r7, #22]
 800e7c2:	2b04      	cmp	r3, #4
 800e7c4:	d14c      	bne.n	800e860 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	220b      	movs	r2, #11
 800e7ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e7ce:	e047      	b.n	800e860 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800e7d0:	78fb      	ldrb	r3, [r7, #3]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f84c 	bl	800e874 <USBH_MSC_BOT_Abort>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800e7e0:	7dbb      	ldrb	r3, [r7, #22]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d11d      	bne.n	800e822 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	795b      	ldrb	r3, [r3, #5]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f005 fe54 	bl	801449a <USBH_LL_GetToggle>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	7959      	ldrb	r1, [r3, #5]
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
 800e7fc:	f1c3 0301 	rsb	r3, r3, #1
 800e800:	b2db      	uxtb	r3, r3
 800e802:	461a      	mov	r2, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f005 fe15 	bl	8014434 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	791b      	ldrb	r3, [r3, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	4619      	mov	r1, r3
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f005 fe0e 	bl	8014434 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	2209      	movs	r2, #9
 800e81c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800e820:	e020      	b.n	800e864 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800e822:	7dbb      	ldrb	r3, [r7, #22]
 800e824:	2b04      	cmp	r3, #4
 800e826:	d11d      	bne.n	800e864 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	220b      	movs	r2, #11
 800e82c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800e830:	e018      	b.n	800e864 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fd67 	bl	800e306 <USBH_MSC_BOT_REQ_Reset>
 800e838:	4603      	mov	r3, r0
 800e83a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d112      	bne.n	800e868 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800e84a:	e00d      	b.n	800e868 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800e84c:	bf00      	nop
 800e84e:	e00c      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e850:	bf00      	nop
 800e852:	e00a      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e854:	bf00      	nop
 800e856:	e008      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e858:	bf00      	nop
 800e85a:	e006      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e85c:	bf00      	nop
 800e85e:	e004      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e860:	bf00      	nop
 800e862:	e002      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e864:	bf00      	nop
 800e866:	e000      	b.n	800e86a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800e868:	bf00      	nop
  }
  return status;
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	70fb      	strb	r3, [r7, #3]
 800e880:	4613      	mov	r3, r2
 800e882:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800e884:	2302      	movs	r3, #2
 800e886:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e88e:	69db      	ldr	r3, [r3, #28]
 800e890:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800e892:	78bb      	ldrb	r3, [r7, #2]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <USBH_MSC_BOT_Abort+0x2a>
 800e898:	2b01      	cmp	r3, #1
 800e89a:	d009      	beq.n	800e8b0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800e89c:	e011      	b.n	800e8c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	79db      	ldrb	r3, [r3, #7]
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fadc 	bl	800fe62 <USBH_ClrFeature>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ae:	e008      	b.n	800e8c2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	799b      	ldrb	r3, [r3, #6]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f001 fad3 	bl	800fe62 <USBH_ClrFeature>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73fb      	strb	r3, [r7, #15]
      break;
 800e8c0:	bf00      	nop
  }
  return status;
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8da:	69db      	ldr	r3, [r3, #28]
 800e8dc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	791b      	ldrb	r3, [r3, #4]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f005 fce7 	bl	80142bc <USBH_LL_GetLastXferSize>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b0d      	cmp	r3, #13
 800e8f2:	d002      	beq.n	800e8fa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	73fb      	strb	r3, [r7, #15]
 800e8f8:	e024      	b.n	800e944 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8fe:	4a14      	ldr	r2, [pc, #80]	; (800e950 <USBH_MSC_DecodeCSW+0x84>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d11d      	bne.n	800e940 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d119      	bne.n	800e944 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e916:	2b00      	cmp	r3, #0
 800e918:	d102      	bne.n	800e920 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73fb      	strb	r3, [r7, #15]
 800e91e:	e011      	b.n	800e944 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e926:	2b01      	cmp	r3, #1
 800e928:	d102      	bne.n	800e930 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800e92a:	2301      	movs	r3, #1
 800e92c:	73fb      	strb	r3, [r7, #15]
 800e92e:	e009      	b.n	800e944 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e936:	2b02      	cmp	r3, #2
 800e938:	d104      	bne.n	800e944 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800e93a:	2302      	movs	r3, #2
 800e93c:	73fb      	strb	r3, [r7, #15]
 800e93e:	e001      	b.n	800e944 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800e940:	2302      	movs	r3, #2
 800e942:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800e944:	7bfb      	ldrb	r3, [r7, #15]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	53425355 	.word	0x53425355

0800e954 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	460b      	mov	r3, r1
 800e95e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800e960:	2302      	movs	r3, #2
 800e962:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e974:	2b01      	cmp	r3, #1
 800e976:	d002      	beq.n	800e97e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d021      	beq.n	800e9c0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800e97c:	e028      	b.n	800e9d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	2200      	movs	r2, #0
 800e982:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	220a      	movs	r2, #10
 800e990:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	3363      	adds	r3, #99	; 0x63
 800e998:	2210      	movs	r2, #16
 800e99a:	2100      	movs	r1, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f005 fe4b 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e9be:	e007      	b.n	800e9d0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e9c0:	78fb      	ldrb	r3, [r7, #3]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff fcfb 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e9ce:	bf00      	nop
  }

  return error;
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b086      	sub	sp, #24
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	607a      	str	r2, [r7, #4]
 800e9e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d002      	beq.n	800ea06 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	d027      	beq.n	800ea54 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ea04:	e05f      	b.n	800eac6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	2208      	movs	r2, #8
 800ea0a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2280      	movs	r2, #128	; 0x80
 800ea10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	220a      	movs	r2, #10
 800ea18:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	3363      	adds	r3, #99	; 0x63
 800ea20:	2210      	movs	r2, #16
 800ea22:	2100      	movs	r1, #0
 800ea24:	4618      	mov	r0, r3
 800ea26:	f005 fe07 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2225      	movs	r2, #37	; 0x25
 800ea2e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f103 0210 	add.w	r2, r3, #16
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	75fb      	strb	r3, [r7, #23]
      break;
 800ea52:	e038      	b.n	800eac6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ea54:	7afb      	ldrb	r3, [r7, #11]
 800ea56:	4619      	mov	r1, r3
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff fcb1 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d12d      	bne.n	800eac4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea6e:	3303      	adds	r3, #3
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea7a:	3302      	adds	r3, #2
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	021b      	lsls	r3, r3, #8
 800ea80:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea88:	3301      	adds	r3, #1
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ea8e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	061b      	lsls	r3, r3, #24
 800ea9a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa6:	3307      	adds	r3, #7
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eab2:	3306      	adds	r3, #6
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	021b      	lsls	r3, r3, #8
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	4313      	orrs	r3, r2
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	809a      	strh	r2, [r3, #4]
      break;
 800eac4:	bf00      	nop
  }

  return error;
 800eac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	460b      	mov	r3, r1
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800eade:	2302      	movs	r3, #2
 800eae0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eae8:	69db      	ldr	r3, [r3, #28]
 800eaea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d002      	beq.n	800eafc <USBH_MSC_SCSI_Inquiry+0x2c>
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d03d      	beq.n	800eb76 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800eafa:	e089      	b.n	800ec10 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2224      	movs	r2, #36	; 0x24
 800eb00:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	2280      	movs	r2, #128	; 0x80
 800eb06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	220a      	movs	r2, #10
 800eb0e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	3363      	adds	r3, #99	; 0x63
 800eb16:	220a      	movs	r2, #10
 800eb18:	2100      	movs	r1, #0
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f005 fd8c 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	2212      	movs	r2, #18
 800eb24:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800eb28:	7afb      	ldrb	r3, [r7, #11]
 800eb2a:	015b      	lsls	r3, r3, #5
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	2224      	movs	r2, #36	; 0x24
 800eb48:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f103 0210 	add.w	r2, r3, #16
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800eb70:	2301      	movs	r3, #1
 800eb72:	75fb      	strb	r3, [r7, #23]
      break;
 800eb74:	e04c      	b.n	800ec10 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800eb76:	7afb      	ldrb	r3, [r7, #11]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff fc20 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800eb80:	4603      	mov	r3, r0
 800eb82:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d141      	bne.n	800ec0e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800eb8a:	2222      	movs	r2, #34	; 0x22
 800eb8c:	2100      	movs	r1, #0
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f005 fd52 	bl	8014638 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	f003 031f 	and.w	r3, r3, #31
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	095b      	lsrs	r3, r3, #5
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	b25b      	sxtb	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da03      	bge.n	800ebce <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	709a      	strb	r2, [r3, #2]
 800ebcc:	e002      	b.n	800ebd4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	1cd8      	adds	r0, r3, #3
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebde:	3308      	adds	r3, #8
 800ebe0:	2208      	movs	r2, #8
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	f005 fd1a 	bl	801461c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f103 000c 	add.w	r0, r3, #12
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebf4:	3310      	adds	r3, #16
 800ebf6:	2210      	movs	r2, #16
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	f005 fd0f 	bl	801461c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	331d      	adds	r3, #29
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ec08:	3220      	adds	r2, #32
 800ec0a:	6812      	ldr	r2, [r2, #0]
 800ec0c:	601a      	str	r2, [r3, #0]
      break;
 800ec0e:	bf00      	nop
  }

  return error;
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3718      	adds	r7, #24
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b086      	sub	sp, #24
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	60f8      	str	r0, [r7, #12]
 800ec22:	460b      	mov	r3, r1
 800ec24:	607a      	str	r2, [r7, #4]
 800ec26:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec32:	69db      	ldr	r3, [r3, #28]
 800ec34:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d002      	beq.n	800ec46 <USBH_MSC_SCSI_RequestSense+0x2c>
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d03d      	beq.n	800ecc0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ec44:	e05d      	b.n	800ed02 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	220e      	movs	r2, #14
 800ec4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	2280      	movs	r2, #128	; 0x80
 800ec50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	220a      	movs	r2, #10
 800ec58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	3363      	adds	r3, #99	; 0x63
 800ec60:	2210      	movs	r2, #16
 800ec62:	2100      	movs	r1, #0
 800ec64:	4618      	mov	r0, r3
 800ec66:	f005 fce7 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	2203      	movs	r2, #3
 800ec6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ec72:	7afb      	ldrb	r3, [r7, #11]
 800ec74:	015b      	lsls	r3, r3, #5
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	220e      	movs	r2, #14
 800ec92:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	2202      	movs	r2, #2
 800ecaa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f103 0210 	add.w	r2, r3, #16
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	75fb      	strb	r3, [r7, #23]
      break;
 800ecbe:	e020      	b.n	800ed02 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ecc0:	7afb      	ldrb	r3, [r7, #11]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f7ff fb7b 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800ecca:	4603      	mov	r3, r0
 800eccc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d115      	bne.n	800ed00 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecda:	3302      	adds	r3, #2
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	f003 030f 	and.w	r3, r3, #15
 800ece2:	b2da      	uxtb	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecee:	7b1a      	ldrb	r2, [r3, #12]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecfa:	7b5a      	ldrb	r2, [r3, #13]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	709a      	strb	r2, [r3, #2]
      break;
 800ed00:	bf00      	nop
  }

  return error;
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3718      	adds	r7, #24
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	607a      	str	r2, [r7, #4]
 800ed16:	603b      	str	r3, [r7, #0]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed26:	69db      	ldr	r3, [r3, #28]
 800ed28:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d002      	beq.n	800ed3a <USBH_MSC_SCSI_Write+0x2e>
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d047      	beq.n	800edc8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ed38:	e04e      	b.n	800edd8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ed40:	461a      	mov	r2, r3
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	fb03 f202 	mul.w	r2, r3, r2
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	220a      	movs	r2, #10
 800ed58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3363      	adds	r3, #99	; 0x63
 800ed60:	2210      	movs	r2, #16
 800ed62:	2100      	movs	r1, #0
 800ed64:	4618      	mov	r0, r3
 800ed66:	f005 fc67 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	222a      	movs	r2, #42	; 0x2a
 800ed6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ed72:	79fa      	ldrb	r2, [r7, #7]
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ed7a:	79ba      	ldrb	r2, [r7, #6]
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ed82:	797a      	ldrb	r2, [r7, #5]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ed8a:	1d3b      	adds	r3, r7, #4
 800ed8c:	781a      	ldrb	r2, [r3, #0]
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ed94:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ed9e:	f107 0320 	add.w	r3, r7, #32
 800eda2:	781a      	ldrb	r2, [r3, #0]
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2201      	movs	r2, #1
 800edae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	2202      	movs	r2, #2
 800edb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800edc2:	2301      	movs	r3, #1
 800edc4:	75fb      	strb	r3, [r7, #23]
      break;
 800edc6:	e007      	b.n	800edd8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800edc8:	7afb      	ldrb	r3, [r7, #11]
 800edca:	4619      	mov	r1, r3
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7ff faf7 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800edd2:	4603      	mov	r3, r0
 800edd4:	75fb      	strb	r3, [r7, #23]
      break;
 800edd6:	bf00      	nop
  }

  return error;
 800edd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b086      	sub	sp, #24
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
 800edee:	460b      	mov	r3, r1
 800edf0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800edf2:	2302      	movs	r3, #2
 800edf4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edfc:	69db      	ldr	r3, [r3, #28]
 800edfe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d002      	beq.n	800ee10 <USBH_MSC_SCSI_Read+0x2e>
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d047      	beq.n	800ee9e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ee0e:	e04e      	b.n	800eeae <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ee16:	461a      	mov	r2, r3
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	fb03 f202 	mul.w	r2, r3, r2
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2280      	movs	r2, #128	; 0x80
 800ee26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	220a      	movs	r2, #10
 800ee2e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	3363      	adds	r3, #99	; 0x63
 800ee36:	2210      	movs	r2, #16
 800ee38:	2100      	movs	r1, #0
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f005 fbfc 	bl	8014638 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	2228      	movs	r2, #40	; 0x28
 800ee44:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ee50:	79ba      	ldrb	r2, [r7, #6]
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ee58:	797a      	ldrb	r2, [r7, #5]
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ee60:	1d3b      	adds	r3, r7, #4
 800ee62:	781a      	ldrb	r2, [r3, #0]
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ee6a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ee74:	f107 0320 	add.w	r3, r7, #32
 800ee78:	781a      	ldrb	r2, [r3, #0]
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ee9c:	e007      	b.n	800eeae <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	4619      	mov	r1, r3
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7ff fa8c 	bl	800e3c0 <USBH_MSC_BOT_Process>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	75fb      	strb	r3, [r7, #23]
      break;
 800eeac:	bf00      	nop
  }

  return error;
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3718      	adds	r7, #24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d101      	bne.n	800eed0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800eecc:	2302      	movs	r3, #2
 800eece:	e044      	b.n	800ef5a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	79fa      	ldrb	r2, [r7, #7]
 800eed4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f000 f841 	bl	800ef70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d003      	beq.n	800ef1c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	2104      	movs	r1, #4
 800ef20:	2010      	movs	r0, #16
 800ef22:	f001 fef1 	bl	8010d08 <osMessageQueueNew>
 800ef26:	4602      	mov	r2, r0
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800ef2e:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <USBH_Init+0xac>)
 800ef30:	4a0d      	ldr	r2, [pc, #52]	; (800ef68 <USBH_Init+0xb0>)
 800ef32:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800ef34:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <USBH_Init+0xac>)
 800ef36:	2280      	movs	r2, #128	; 0x80
 800ef38:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800ef3a:	4b0a      	ldr	r3, [pc, #40]	; (800ef64 <USBH_Init+0xac>)
 800ef3c:	2218      	movs	r2, #24
 800ef3e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800ef40:	4a08      	ldr	r2, [pc, #32]	; (800ef64 <USBH_Init+0xac>)
 800ef42:	68f9      	ldr	r1, [r7, #12]
 800ef44:	4809      	ldr	r0, [pc, #36]	; (800ef6c <USBH_Init+0xb4>)
 800ef46:	f001 fe0b 	bl	8010b60 <osThreadNew>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f005 f8f8 	bl	8014148 <USBH_LL_Init>

  return USBH_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	2000538c 	.word	0x2000538c
 800ef68:	08014810 	.word	0x08014810
 800ef6c:	0800fbd9 	.word	0x0800fbd9

0800ef70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	e009      	b.n	800ef96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	33e0      	adds	r3, #224	; 0xe0
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	4413      	add	r3, r2
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	3301      	adds	r3, #1
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b0e      	cmp	r3, #14
 800ef9a:	d9f2      	bls.n	800ef82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	60fb      	str	r3, [r7, #12]
 800efa0:	e009      	b.n	800efb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800efac:	2200      	movs	r2, #0
 800efae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3301      	adds	r3, #1
 800efb4:	60fb      	str	r3, [r7, #12]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efbc:	d3f1      	bcc.n	800efa2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2201      	movs	r2, #1
 800efce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2201      	movs	r2, #1
 800efdc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2240      	movs	r2, #64	; 0x40
 800efe2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2201      	movs	r2, #1
 800eff6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3714      	adds	r7, #20
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d016      	beq.n	800f05a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10e      	bne.n	800f054 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f03c:	1c59      	adds	r1, r3, #1
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	33de      	adds	r3, #222	; 0xde
 800f048:	6839      	ldr	r1, [r7, #0]
 800f04a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f04e:	2300      	movs	r3, #0
 800f050:	73fb      	strb	r3, [r7, #15]
 800f052:	e004      	b.n	800f05e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f054:	2302      	movs	r3, #2
 800f056:	73fb      	strb	r3, [r7, #15]
 800f058:	e001      	b.n	800f05e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f05a:	2302      	movs	r3, #2
 800f05c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f082:	78fa      	ldrb	r2, [r7, #3]
 800f084:	429a      	cmp	r2, r3
 800f086:	d204      	bcs.n	800f092 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	78fa      	ldrb	r2, [r7, #3]
 800f08c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f090:	e001      	b.n	800f096 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f092:	2302      	movs	r3, #2
 800f094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	4611      	mov	r1, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	70fb      	strb	r3, [r7, #3]
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	70bb      	strb	r3, [r7, #2]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f0cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f0ce:	e025      	b.n	800f11c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	221a      	movs	r2, #26
 800f0d4:	fb02 f303 	mul.w	r3, r2, r3
 800f0d8:	3308      	adds	r3, #8
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	4413      	add	r3, r2
 800f0de:	3302      	adds	r3, #2
 800f0e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	795b      	ldrb	r3, [r3, #5]
 800f0e6:	78fa      	ldrb	r2, [r7, #3]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d002      	beq.n	800f0f2 <USBH_FindInterface+0x4e>
 800f0ec:	78fb      	ldrb	r3, [r7, #3]
 800f0ee:	2bff      	cmp	r3, #255	; 0xff
 800f0f0:	d111      	bne.n	800f116 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f0f6:	78ba      	ldrb	r2, [r7, #2]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d002      	beq.n	800f102 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f0fc:	78bb      	ldrb	r3, [r7, #2]
 800f0fe:	2bff      	cmp	r3, #255	; 0xff
 800f100:	d109      	bne.n	800f116 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f106:	787a      	ldrb	r2, [r7, #1]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d002      	beq.n	800f112 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f10c:	787b      	ldrb	r3, [r7, #1]
 800f10e:	2bff      	cmp	r3, #255	; 0xff
 800f110:	d101      	bne.n	800f116 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f112:	7dfb      	ldrb	r3, [r7, #23]
 800f114:	e006      	b.n	800f124 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f116:	7dfb      	ldrb	r3, [r7, #23]
 800f118:	3301      	adds	r3, #1
 800f11a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d9d6      	bls.n	800f0d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f122:	23ff      	movs	r3, #255	; 0xff
}
 800f124:	4618      	mov	r0, r3
 800f126:	371c      	adds	r7, #28
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f005 f847 	bl	80141cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800f13e:	2101      	movs	r1, #1
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f005 f960 	bl	8014406 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b088      	sub	sp, #32
 800f154:	af04      	add	r7, sp, #16
 800f156:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f158:	2302      	movs	r3, #2
 800f15a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d102      	bne.n	800f172 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2203      	movs	r2, #3
 800f170:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b0b      	cmp	r3, #11
 800f17a:	f200 823c 	bhi.w	800f5f6 <USBH_Process+0x4a6>
 800f17e:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <USBH_Process+0x34>)
 800f180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f184:	0800f1b5 	.word	0x0800f1b5
 800f188:	0800f203 	.word	0x0800f203
 800f18c:	0800f287 	.word	0x0800f287
 800f190:	0800f575 	.word	0x0800f575
 800f194:	0800f5f7 	.word	0x0800f5f7
 800f198:	0800f347 	.word	0x0800f347
 800f19c:	0800f4ff 	.word	0x0800f4ff
 800f1a0:	0800f399 	.word	0x0800f399
 800f1a4:	0800f3d5 	.word	0x0800f3d5
 800f1a8:	0800f40f 	.word	0x0800f40f
 800f1ac:	0800f457 	.word	0x0800f457
 800f1b0:	0800f55d 	.word	0x0800f55d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f1ba:	b2db      	uxtb	r3, r3
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 821c 	beq.w	800f5fa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f1c8:	20c8      	movs	r0, #200	; 0xc8
 800f1ca:	f005 f999 	bl	8014500 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f005 f859 	bl	8014286 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f001 fe0a 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800f200:	e1fb      	b.n	800f5fa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d107      	bne.n	800f21c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2202      	movs	r2, #2
 800f218:	701a      	strb	r2, [r3, #0]
 800f21a:	e025      	b.n	800f268 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f226:	d914      	bls.n	800f252 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f22e:	3301      	adds	r3, #1
 800f230:	b2da      	uxtb	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f23e:	2b03      	cmp	r3, #3
 800f240:	d903      	bls.n	800f24a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	220d      	movs	r2, #13
 800f246:	701a      	strb	r2, [r3, #0]
 800f248:	e00e      	b.n	800f268 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	701a      	strb	r2, [r3, #0]
 800f250:	e00a      	b.n	800f268 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f258:	f103 020a 	add.w	r2, r3, #10
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f262:	200a      	movs	r0, #10
 800f264:	f005 f94c 	bl	8014500 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f27c:	2300      	movs	r3, #0
 800f27e:	2200      	movs	r2, #0
 800f280:	f001 fdc8 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f284:	e1c0      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d005      	beq.n	800f29c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f296:	2104      	movs	r1, #4
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f29c:	2064      	movs	r0, #100	; 0x64
 800f29e:	f005 f92f 	bl	8014500 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f004 ffc8 	bl	8014238 <USBH_LL_GetSpeed>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2205      	movs	r2, #5
 800f2b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f001 fb21 	bl	8010902 <USBH_AllocPipe>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f2c8:	2180      	movs	r1, #128	; 0x80
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f001 fb19 	bl	8010902 <USBH_AllocPipe>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7919      	ldrb	r1, [r3, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	9202      	str	r2, [sp, #8]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	9201      	str	r2, [sp, #4]
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2280      	movs	r2, #128	; 0x80
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f001 fad2 	bl	80108a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	7959      	ldrb	r1, [r3, #5]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f314:	b292      	uxth	r2, r2
 800f316:	9202      	str	r2, [sp, #8]
 800f318:	2200      	movs	r2, #0
 800f31a:	9201      	str	r2, [sp, #4]
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	4603      	mov	r3, r0
 800f320:	2200      	movs	r2, #0
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f001 fabe 	bl	80108a4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f33c:	2300      	movs	r3, #0
 800f33e:	2200      	movs	r2, #0
 800f340:	f001 fd68 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f344:	e160      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f964 	bl	800f614 <USBH_HandleEnum>
 800f34c:	4603      	mov	r3, r0
 800f34e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f350:	7bbb      	ldrb	r3, [r7, #14]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b00      	cmp	r3, #0
 800f356:	f040 8152 	bne.w	800f5fe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d103      	bne.n	800f374 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2208      	movs	r2, #8
 800f370:	701a      	strb	r2, [r3, #0]
 800f372:	e002      	b.n	800f37a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2207      	movs	r2, #7
 800f378:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2205      	movs	r2, #5
 800f37e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f38e:	2300      	movs	r3, #0
 800f390:	2200      	movs	r2, #0
 800f392:	f001 fd3f 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800f396:	e132      	b.n	800f5fe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 812f 	beq.w	800f602 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2208      	movs	r2, #8
 800f3b4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2205      	movs	r2, #5
 800f3ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f001 fd21 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800f3d2:	e116      	b.n	800f602 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fcf8 	bl	800fdd4 <USBH_SetCfg>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d102      	bne.n	800f3f0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2209      	movs	r2, #9
 800f3ee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f404:	2300      	movs	r3, #0
 800f406:	2200      	movs	r2, #0
 800f408:	f001 fd04 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f40c:	e0fc      	b.n	800f608 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f414:	f003 0320 	and.w	r3, r3, #32
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00a      	beq.n	800f432 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f41c:	2101      	movs	r1, #1
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 fcfb 	bl	800fe1a <USBH_SetFeature>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d106      	bne.n	800f438 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	220a      	movs	r2, #10
 800f42e:	701a      	strb	r2, [r3, #0]
 800f430:	e002      	b.n	800f438 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	220a      	movs	r2, #10
 800f436:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f44c:	2300      	movs	r3, #0
 800f44e:	2200      	movs	r2, #0
 800f450:	f001 fce0 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f454:	e0d8      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d03f      	beq.n	800f4e0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f468:	2300      	movs	r3, #0
 800f46a:	73fb      	strb	r3, [r7, #15]
 800f46c:	e016      	b.n	800f49c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f46e:	7bfa      	ldrb	r2, [r7, #15]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	32de      	adds	r2, #222	; 0xde
 800f474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f478:	791a      	ldrb	r2, [r3, #4]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f480:	429a      	cmp	r2, r3
 800f482:	d108      	bne.n	800f496 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f484:	7bfa      	ldrb	r2, [r7, #15]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	32de      	adds	r2, #222	; 0xde
 800f48a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f494:	e005      	b.n	800f4a2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	3301      	adds	r3, #1
 800f49a:	73fb      	strb	r3, [r7, #15]
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d0e5      	beq.n	800f46e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d016      	beq.n	800f4da <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	4798      	blx	r3
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d109      	bne.n	800f4d2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2206      	movs	r2, #6
 800f4c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4ca:	2103      	movs	r1, #3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	4798      	blx	r3
 800f4d0:	e006      	b.n	800f4e0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	220d      	movs	r2, #13
 800f4d6:	701a      	strb	r2, [r3, #0]
 800f4d8:	e002      	b.n	800f4e0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	220d      	movs	r2, #13
 800f4de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2205      	movs	r2, #5
 800f4e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f001 fc8c 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f4fc:	e084      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d017      	beq.n	800f538 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	4798      	blx	r3
 800f514:	4603      	mov	r3, r0
 800f516:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d103      	bne.n	800f528 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	220b      	movs	r2, #11
 800f524:	701a      	strb	r2, [r3, #0]
 800f526:	e00a      	b.n	800f53e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800f528:	7bbb      	ldrb	r3, [r7, #14]
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d106      	bne.n	800f53e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	220d      	movs	r2, #13
 800f534:	701a      	strb	r2, [r3, #0]
 800f536:	e002      	b.n	800f53e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	220d      	movs	r2, #13
 800f53c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2205      	movs	r2, #5
 800f542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f552:	2300      	movs	r3, #0
 800f554:	2200      	movs	r2, #0
 800f556:	f001 fc5d 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f55a:	e055      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f562:	2b00      	cmp	r3, #0
 800f564:	d04f      	beq.n	800f606 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
      }
      break;
 800f572:	e048      	b.n	800f606 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff fcf7 	bl	800ef70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d009      	beq.n	800f5a0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d005      	beq.n	800f5b6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f5b0:	2105      	movs	r1, #5
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d107      	bne.n	800f5d2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f7ff fdb0 	bl	800f130 <USBH_Start>
 800f5d0:	e002      	b.n	800f5d8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f004 fdfa 	bl	80141cc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f001 fc10 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      break;
 800f5f4:	e008      	b.n	800f608 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f5f6:	bf00      	nop
 800f5f8:	e006      	b.n	800f608 <USBH_Process+0x4b8>
      break;
 800f5fa:	bf00      	nop
 800f5fc:	e004      	b.n	800f608 <USBH_Process+0x4b8>
      break;
 800f5fe:	bf00      	nop
 800f600:	e002      	b.n	800f608 <USBH_Process+0x4b8>
    break;
 800f602:	bf00      	nop
 800f604:	e000      	b.n	800f608 <USBH_Process+0x4b8>
      break;
 800f606:	bf00      	nop
  }
  return USBH_OK;
 800f608:	2300      	movs	r3, #0
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop

0800f614 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af04      	add	r7, sp, #16
 800f61a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f61c:	2301      	movs	r3, #1
 800f61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f620:	2301      	movs	r3, #1
 800f622:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	785b      	ldrb	r3, [r3, #1]
 800f628:	2b07      	cmp	r3, #7
 800f62a:	f200 8208 	bhi.w	800fa3e <USBH_HandleEnum+0x42a>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <USBH_HandleEnum+0x20>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f655 	.word	0x0800f655
 800f638:	0800f713 	.word	0x0800f713
 800f63c:	0800f77d 	.word	0x0800f77d
 800f640:	0800f80b 	.word	0x0800f80b
 800f644:	0800f875 	.word	0x0800f875
 800f648:	0800f8e5 	.word	0x0800f8e5
 800f64c:	0800f981 	.word	0x0800f981
 800f650:	0800f9ff 	.word	0x0800f9ff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f654:	2108      	movs	r1, #8
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 faec 	bl	800fc34 <USBH_Get_DevDesc>
 800f65c:	4603      	mov	r3, r0
 800f65e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f660:	7bbb      	ldrb	r3, [r7, #14]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d130      	bne.n	800f6c8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	7919      	ldrb	r1, [r3, #4]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f68a:	b292      	uxth	r2, r2
 800f68c:	9202      	str	r2, [sp, #8]
 800f68e:	2200      	movs	r2, #0
 800f690:	9201      	str	r2, [sp, #4]
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	4603      	mov	r3, r0
 800f696:	2280      	movs	r2, #128	; 0x80
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 f903 	bl	80108a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	7959      	ldrb	r1, [r3, #5]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f6b2:	b292      	uxth	r2, r2
 800f6b4:	9202      	str	r2, [sp, #8]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	9201      	str	r2, [sp, #4]
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2200      	movs	r2, #0
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f001 f8ef 	bl	80108a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f6c6:	e1bc      	b.n	800fa42 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f6c8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	f040 81b9 	bne.w	800fa42 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	b2da      	uxtb	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f6e6:	2b03      	cmp	r3, #3
 800f6e8:	d903      	bls.n	800f6f2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	220d      	movs	r2, #13
 800f6ee:	701a      	strb	r2, [r3, #0]
      break;
 800f6f0:	e1a7      	b.n	800fa42 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	795b      	ldrb	r3, [r3, #5]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f001 f923 	bl	8010944 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	791b      	ldrb	r3, [r3, #4]
 800f702:	4619      	mov	r1, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f001 f91d 	bl	8010944 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	701a      	strb	r2, [r3, #0]
      break;
 800f710:	e197      	b.n	800fa42 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f712:	2112      	movs	r1, #18
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 fa8d 	bl	800fc34 <USBH_Get_DevDesc>
 800f71a:	4603      	mov	r3, r0
 800f71c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d103      	bne.n	800f72c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2202      	movs	r2, #2
 800f728:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f72a:	e18c      	b.n	800fa46 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f72c:	7bbb      	ldrb	r3, [r7, #14]
 800f72e:	2b03      	cmp	r3, #3
 800f730:	f040 8189 	bne.w	800fa46 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f73a:	3301      	adds	r3, #1
 800f73c:	b2da      	uxtb	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d903      	bls.n	800f756 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	220d      	movs	r2, #13
 800f752:	701a      	strb	r2, [r3, #0]
      break;
 800f754:	e177      	b.n	800fa46 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	795b      	ldrb	r3, [r3, #5]
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f001 f8f1 	bl	8010944 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	791b      	ldrb	r3, [r3, #4]
 800f766:	4619      	mov	r1, r3
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f001 f8eb 	bl	8010944 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	701a      	strb	r2, [r3, #0]
      break;
 800f77a:	e164      	b.n	800fa46 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f77c:	2101      	movs	r1, #1
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 fb04 	bl	800fd8c <USBH_SetAddress>
 800f784:	4603      	mov	r3, r0
 800f786:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f788:	7bbb      	ldrb	r3, [r7, #14]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d132      	bne.n	800f7f4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f78e:	2002      	movs	r0, #2
 800f790:	f004 feb6 	bl	8014500 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2203      	movs	r2, #3
 800f7a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	7919      	ldrb	r1, [r3, #4]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f7b6:	b292      	uxth	r2, r2
 800f7b8:	9202      	str	r2, [sp, #8]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	9201      	str	r2, [sp, #4]
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2280      	movs	r2, #128	; 0x80
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f001 f86d 	bl	80108a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	7959      	ldrb	r1, [r3, #5]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f7de:	b292      	uxth	r2, r2
 800f7e0:	9202      	str	r2, [sp, #8]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	9201      	str	r2, [sp, #4]
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 f859 	bl	80108a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f7f2:	e12a      	b.n	800fa4a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f7f4:	7bbb      	ldrb	r3, [r7, #14]
 800f7f6:	2b03      	cmp	r3, #3
 800f7f8:	f040 8127 	bne.w	800fa4a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	220d      	movs	r2, #13
 800f800:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	705a      	strb	r2, [r3, #1]
      break;
 800f808:	e11f      	b.n	800fa4a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f80a:	2109      	movs	r1, #9
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fa39 	bl	800fc84 <USBH_Get_CfgDesc>
 800f812:	4603      	mov	r3, r0
 800f814:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f816:	7bbb      	ldrb	r3, [r7, #14]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d103      	bne.n	800f824 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2204      	movs	r2, #4
 800f820:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f822:	e114      	b.n	800fa4e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f824:	7bbb      	ldrb	r3, [r7, #14]
 800f826:	2b03      	cmp	r3, #3
 800f828:	f040 8111 	bne.w	800fa4e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f832:	3301      	adds	r3, #1
 800f834:	b2da      	uxtb	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f842:	2b03      	cmp	r3, #3
 800f844:	d903      	bls.n	800f84e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	220d      	movs	r2, #13
 800f84a:	701a      	strb	r2, [r3, #0]
      break;
 800f84c:	e0ff      	b.n	800fa4e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	795b      	ldrb	r3, [r3, #5]
 800f852:	4619      	mov	r1, r3
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f001 f875 	bl	8010944 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	791b      	ldrb	r3, [r3, #4]
 800f85e:	4619      	mov	r1, r3
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f001 f86f 	bl	8010944 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	701a      	strb	r2, [r3, #0]
      break;
 800f872:	e0ec      	b.n	800fa4e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f87a:	4619      	mov	r1, r3
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 fa01 	bl	800fc84 <USBH_Get_CfgDesc>
 800f882:	4603      	mov	r3, r0
 800f884:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f886:	7bbb      	ldrb	r3, [r7, #14]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d103      	bne.n	800f894 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2205      	movs	r2, #5
 800f890:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f892:	e0de      	b.n	800fa52 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	2b03      	cmp	r3, #3
 800f898:	f040 80db 	bne.w	800fa52 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	d903      	bls.n	800f8be <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	220d      	movs	r2, #13
 800f8ba:	701a      	strb	r2, [r3, #0]
      break;
 800f8bc:	e0c9      	b.n	800fa52 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	795b      	ldrb	r3, [r3, #5]
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f001 f83d 	bl	8010944 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	791b      	ldrb	r3, [r3, #4]
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f001 f837 	bl	8010944 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	701a      	strb	r2, [r3, #0]
      break;
 800f8e2:	e0b6      	b.n	800fa52 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d036      	beq.n	800f95c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f8fa:	23ff      	movs	r3, #255	; 0xff
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 f9e5 	bl	800fccc <USBH_Get_StringDesc>
 800f902:	4603      	mov	r3, r0
 800f904:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d111      	bne.n	800f930 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2206      	movs	r2, #6
 800f910:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2205      	movs	r2, #5
 800f916:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f926:	2300      	movs	r3, #0
 800f928:	2200      	movs	r2, #0
 800f92a:	f001 fa73 	bl	8010e14 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f92e:	e092      	b.n	800fa56 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f930:	7bbb      	ldrb	r3, [r7, #14]
 800f932:	2b03      	cmp	r3, #3
 800f934:	f040 808f 	bne.w	800fa56 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2206      	movs	r2, #6
 800f93c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2205      	movs	r2, #5
 800f942:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f952:	2300      	movs	r3, #0
 800f954:	2200      	movs	r2, #0
 800f956:	f001 fa5d 	bl	8010e14 <osMessageQueuePut>
      break;
 800f95a:	e07c      	b.n	800fa56 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2206      	movs	r2, #6
 800f960:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2205      	movs	r2, #5
 800f966:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f976:	2300      	movs	r3, #0
 800f978:	2200      	movs	r2, #0
 800f97a:	f001 fa4b 	bl	8010e14 <osMessageQueuePut>
      break;
 800f97e:	e06a      	b.n	800fa56 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f986:	2b00      	cmp	r3, #0
 800f988:	d027      	beq.n	800f9da <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f996:	23ff      	movs	r3, #255	; 0xff
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 f997 	bl	800fccc <USBH_Get_StringDesc>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f9a2:	7bbb      	ldrb	r3, [r7, #14]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d103      	bne.n	800f9b0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2207      	movs	r2, #7
 800f9ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f9ae:	e054      	b.n	800fa5a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d151      	bne.n	800fa5a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2207      	movs	r2, #7
 800f9ba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2205      	movs	r2, #5
 800f9c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f001 fa1e 	bl	8010e14 <osMessageQueuePut>
      break;
 800f9d8:	e03f      	b.n	800fa5a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2207      	movs	r2, #7
 800f9de:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2205      	movs	r2, #5
 800f9e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f001 fa0c 	bl	8010e14 <osMessageQueuePut>
      break;
 800f9fc:	e02d      	b.n	800fa5a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d017      	beq.n	800fa38 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fa14:	23ff      	movs	r3, #255	; 0xff
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f958 	bl	800fccc <USBH_Get_StringDesc>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fa26:	2300      	movs	r3, #0
 800fa28:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fa2a:	e018      	b.n	800fa5e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa2c:	7bbb      	ldrb	r3, [r7, #14]
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	d115      	bne.n	800fa5e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	73fb      	strb	r3, [r7, #15]
      break;
 800fa36:	e012      	b.n	800fa5e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa3c:	e00f      	b.n	800fa5e <USBH_HandleEnum+0x44a>

    default:
      break;
 800fa3e:	bf00      	nop
 800fa40:	e00e      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa42:	bf00      	nop
 800fa44:	e00c      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa46:	bf00      	nop
 800fa48:	e00a      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa4a:	bf00      	nop
 800fa4c:	e008      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa4e:	bf00      	nop
 800fa50:	e006      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa52:	bf00      	nop
 800fa54:	e004      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa56:	bf00      	nop
 800fa58:	e002      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa5a:	bf00      	nop
 800fa5c:	e000      	b.n	800fa60 <USBH_HandleEnum+0x44c>
      break;
 800fa5e:	bf00      	nop
  }
  return Status;
 800fa60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop

0800fa6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800fa7e:	bf00      	nop
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f804 	bl	800faae <USBH_HandleSof>
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b082      	sub	sp, #8
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b0b      	cmp	r3, #11
 800fabe:	d10a      	bne.n	800fad6 <USBH_HandleSof+0x28>
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d005      	beq.n	800fad6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fad0:	699b      	ldr	r3, [r3, #24]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	4798      	blx	r3
  }
}
 800fad6:	bf00      	nop
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b082      	sub	sp, #8
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fb02:	2300      	movs	r3, #0
 800fb04:	2200      	movs	r2, #0
 800fb06:	f001 f985 	bl	8010e14 <osMessageQueuePut>
#endif
#endif

  return;
 800fb0a:	bf00      	nop
}
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fb22:	bf00      	nop
}
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2c:	4770      	bx	lr

0800fb2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2201      	movs	r2, #1
 800fb52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fb62:	2300      	movs	r3, #0
 800fb64:	2200      	movs	r2, #0
 800fb66:	f001 f955 	bl	8010e14 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f004 fb34 	bl	8014202 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	791b      	ldrb	r3, [r3, #4]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fecf 	bl	8010944 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	795b      	ldrb	r3, [r3, #5]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 fec9 	bl	8010944 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f001 f923 	bl	8010e14 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800fbce:	2300      	movs	r3, #0
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fbec:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f001 f983 	bl	8010efc <osMessageQueueGet>
 800fbf6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1f0      	bne.n	800fbe0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7ff faa6 	bl	800f150 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800fc04:	e7ec      	b.n	800fbe0 <USBH_Process_OS+0x8>

0800fc06 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2201      	movs	r2, #1
 800fc12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fc22:	2300      	movs	r3, #0
 800fc24:	2200      	movs	r2, #0
 800fc26:	f001 f8f5 	bl	8010e14 <osMessageQueuePut>
#endif

  return USBH_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fc46:	78fb      	ldrb	r3, [r7, #3]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc52:	2100      	movs	r1, #0
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f864 	bl	800fd22 <USBH_GetDescriptor>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73fb      	strb	r3, [r7, #15]
 800fc5e:	7bfb      	ldrb	r3, [r7, #15]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10a      	bne.n	800fc7a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f203 3026 	addw	r0, r3, #806	; 0x326
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fc70:	78fa      	ldrb	r2, [r7, #3]
 800fc72:	b292      	uxth	r2, r2
 800fc74:	4619      	mov	r1, r3
 800fc76:	f000 f918 	bl	800feaa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af02      	add	r7, sp, #8
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	331c      	adds	r3, #28
 800fc94:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800fc96:	887b      	ldrh	r3, [r7, #2]
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fca0:	2100      	movs	r1, #0
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f83d 	bl	800fd22 <USBH_GetDescriptor>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	72fb      	strb	r3, [r7, #11]
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d107      	bne.n	800fcc2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800fcb8:	887a      	ldrh	r2, [r7, #2]
 800fcba:	68f9      	ldr	r1, [r7, #12]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f000 f964 	bl	800ff8a <USBH_ParseCfgDesc>
  }

  return status;
 800fcc2:	7afb      	ldrb	r3, [r7, #11]
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3710      	adds	r7, #16
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b088      	sub	sp, #32
 800fcd0:	af02      	add	r7, sp, #8
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	607a      	str	r2, [r7, #4]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	460b      	mov	r3, r1
 800fcda:	72fb      	strb	r3, [r7, #11]
 800fcdc:	4613      	mov	r3, r2
 800fcde:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800fce0:	7afb      	ldrb	r3, [r7, #11]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800fce8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800fcf0:	893b      	ldrh	r3, [r7, #8]
 800fcf2:	9300      	str	r3, [sp, #0]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f000 f812 	bl	800fd22 <USBH_GetDescriptor>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	75fb      	strb	r3, [r7, #23]
 800fd02:	7dfb      	ldrb	r3, [r7, #23]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d107      	bne.n	800fd18 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fd0e:	893a      	ldrh	r2, [r7, #8]
 800fd10:	6879      	ldr	r1, [r7, #4]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fa37 	bl	8010186 <USBH_ParseStringDesc>
  }

  return status;
 800fd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3718      	adds	r7, #24
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b084      	sub	sp, #16
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	60f8      	str	r0, [r7, #12]
 800fd2a:	607b      	str	r3, [r7, #4]
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	72fb      	strb	r3, [r7, #11]
 800fd30:	4613      	mov	r3, r2
 800fd32:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	789b      	ldrb	r3, [r3, #2]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d11c      	bne.n	800fd76 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fd3c:	7afb      	ldrb	r3, [r7, #11]
 800fd3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2206      	movs	r2, #6
 800fd4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	893a      	ldrh	r2, [r7, #8]
 800fd52:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fd54:	893b      	ldrh	r3, [r7, #8]
 800fd56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd5e:	d104      	bne.n	800fd6a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f240 4209 	movw	r2, #1033	; 0x409
 800fd66:	829a      	strh	r2, [r3, #20]
 800fd68:	e002      	b.n	800fd70 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	8b3a      	ldrh	r2, [r7, #24]
 800fd74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fd76:	8b3b      	ldrh	r3, [r7, #24]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f000 fa50 	bl	8010222 <USBH_CtlReq>
 800fd82:	4603      	mov	r3, r0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	460b      	mov	r3, r1
 800fd96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	789b      	ldrb	r3, [r3, #2]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d10f      	bne.n	800fdc0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2205      	movs	r2, #5
 800fdaa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fdac:	78fb      	ldrb	r3, [r7, #3]
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2100      	movs	r1, #0
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 fa2c 	bl	8010222 <USBH_CtlReq>
 800fdca:	4603      	mov	r3, r0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3708      	adds	r7, #8
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	460b      	mov	r3, r1
 800fdde:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	789b      	ldrb	r3, [r3, #2]
 800fde4:	2b01      	cmp	r3, #1
 800fde6:	d10e      	bne.n	800fe06 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2200      	movs	r2, #0
 800fdec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2209      	movs	r2, #9
 800fdf2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	887a      	ldrh	r2, [r7, #2]
 800fdf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fe06:	2200      	movs	r2, #0
 800fe08:	2100      	movs	r1, #0
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fa09 	bl	8010222 <USBH_CtlReq>
 800fe10:	4603      	mov	r3, r0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b082      	sub	sp, #8
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	460b      	mov	r3, r1
 800fe24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	789b      	ldrb	r3, [r3, #2]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d10f      	bne.n	800fe4e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2203      	movs	r2, #3
 800fe38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fe3a:	78fb      	ldrb	r3, [r7, #3]
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2100      	movs	r1, #0
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f9e5 	bl	8010222 <USBH_CtlReq>
 800fe58:	4603      	mov	r3, r0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	789b      	ldrb	r3, [r3, #2]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d10f      	bne.n	800fe96 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2202      	movs	r2, #2
 800fe7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fe88:	78fb      	ldrb	r3, [r7, #3]
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2200      	movs	r2, #0
 800fe94:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800fe96:	2200      	movs	r2, #0
 800fe98:	2100      	movs	r1, #0
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 f9c1 	bl	8010222 <USBH_CtlReq>
 800fea0:	4603      	mov	r3, r0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800feaa:	b480      	push	{r7}
 800feac:	b085      	sub	sp, #20
 800feae:	af00      	add	r7, sp, #0
 800feb0:	60f8      	str	r0, [r7, #12]
 800feb2:	60b9      	str	r1, [r7, #8]
 800feb4:	4613      	mov	r3, r2
 800feb6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	781a      	ldrb	r2, [r3, #0]
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	785a      	ldrb	r2, [r3, #1]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	3302      	adds	r3, #2
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	b29a      	uxth	r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	3303      	adds	r3, #3
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	021b      	lsls	r3, r3, #8
 800feda:	b29b      	uxth	r3, r3
 800fedc:	4313      	orrs	r3, r2
 800fede:	b29a      	uxth	r2, r3
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	791a      	ldrb	r2, [r3, #4]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	795a      	ldrb	r2, [r3, #5]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	799a      	ldrb	r2, [r3, #6]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	79da      	ldrb	r2, [r3, #7]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ff04:	88fb      	ldrh	r3, [r7, #6]
 800ff06:	2b08      	cmp	r3, #8
 800ff08:	d939      	bls.n	800ff7e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	3308      	adds	r3, #8
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	3309      	adds	r3, #9
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	021b      	lsls	r3, r3, #8
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	330a      	adds	r3, #10
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	330b      	adds	r3, #11
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	b29b      	uxth	r3, r3
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	330c      	adds	r3, #12
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	330d      	adds	r3, #13
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	021b      	lsls	r3, r3, #8
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	4313      	orrs	r3, r2
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	7b9a      	ldrb	r2, [r3, #14]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	7bda      	ldrb	r2, [r3, #15]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	7c1a      	ldrb	r2, [r3, #16]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	7c5a      	ldrb	r2, [r3, #17]
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	745a      	strb	r2, [r3, #17]
  }
}
 800ff7e:	bf00      	nop
 800ff80:	3714      	adds	r7, #20
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b08a      	sub	sp, #40	; 0x28
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	60f8      	str	r0, [r7, #12]
 800ff92:	60b9      	str	r1, [r7, #8]
 800ff94:	4613      	mov	r3, r2
 800ff96:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	781a      	ldrb	r2, [r3, #0]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	785a      	ldrb	r2, [r3, #1]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	3302      	adds	r3, #2
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	b29a      	uxth	r2, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3303      	adds	r3, #3
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	021b      	lsls	r3, r3, #8
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	791a      	ldrb	r2, [r3, #4]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	795a      	ldrb	r2, [r3, #5]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	799a      	ldrb	r2, [r3, #6]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	79da      	ldrb	r2, [r3, #7]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	7a1a      	ldrb	r2, [r3, #8]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010000:	88fb      	ldrh	r3, [r7, #6]
 8010002:	2b09      	cmp	r3, #9
 8010004:	d95f      	bls.n	80100c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8010006:	2309      	movs	r3, #9
 8010008:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 801000a:	2300      	movs	r3, #0
 801000c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801000e:	e051      	b.n	80100b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010010:	f107 0316 	add.w	r3, r7, #22
 8010014:	4619      	mov	r1, r3
 8010016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010018:	f000 f8e8 	bl	80101ec <USBH_GetNextDesc>
 801001c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	785b      	ldrb	r3, [r3, #1]
 8010022:	2b04      	cmp	r3, #4
 8010024:	d146      	bne.n	80100b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8010026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801002a:	221a      	movs	r2, #26
 801002c:	fb02 f303 	mul.w	r3, r2, r3
 8010030:	3308      	adds	r3, #8
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	4413      	add	r3, r2
 8010036:	3302      	adds	r3, #2
 8010038:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801003a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801003c:	69f8      	ldr	r0, [r7, #28]
 801003e:	f000 f846 	bl	80100ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010042:	2300      	movs	r3, #0
 8010044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8010048:	2300      	movs	r3, #0
 801004a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801004c:	e022      	b.n	8010094 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801004e:	f107 0316 	add.w	r3, r7, #22
 8010052:	4619      	mov	r1, r3
 8010054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010056:	f000 f8c9 	bl	80101ec <USBH_GetNextDesc>
 801005a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 801005c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005e:	785b      	ldrb	r3, [r3, #1]
 8010060:	2b05      	cmp	r3, #5
 8010062:	d117      	bne.n	8010094 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010068:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801006c:	3201      	adds	r2, #1
 801006e:	00d2      	lsls	r2, r2, #3
 8010070:	211a      	movs	r1, #26
 8010072:	fb01 f303 	mul.w	r3, r1, r3
 8010076:	4413      	add	r3, r2
 8010078:	3308      	adds	r3, #8
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	4413      	add	r3, r2
 801007e:	3304      	adds	r3, #4
 8010080:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8010082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010084:	69b8      	ldr	r0, [r7, #24]
 8010086:	f000 f851 	bl	801012c <USBH_ParseEPDesc>
            ep_ix++;
 801008a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801008e:	3301      	adds	r3, #1
 8010090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	791b      	ldrb	r3, [r3, #4]
 8010098:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801009c:	429a      	cmp	r2, r3
 801009e:	d204      	bcs.n	80100aa <USBH_ParseCfgDesc+0x120>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	885a      	ldrh	r2, [r3, #2]
 80100a4:	8afb      	ldrh	r3, [r7, #22]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d8d1      	bhi.n	801004e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80100aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80100ae:	3301      	adds	r3, #1
 80100b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80100b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d804      	bhi.n	80100c6 <USBH_ParseCfgDesc+0x13c>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	885a      	ldrh	r2, [r3, #2]
 80100c0:	8afb      	ldrh	r3, [r7, #22]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d8a4      	bhi.n	8010010 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80100c6:	bf00      	nop
 80100c8:	3728      	adds	r7, #40	; 0x28
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80100ce:	b480      	push	{r7}
 80100d0:	b083      	sub	sp, #12
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
 80100d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	781a      	ldrb	r2, [r3, #0]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	785a      	ldrb	r2, [r3, #1]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	789a      	ldrb	r2, [r3, #2]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	78da      	ldrb	r2, [r3, #3]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	791a      	ldrb	r2, [r3, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	795a      	ldrb	r2, [r3, #5]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	799a      	ldrb	r2, [r3, #6]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	79da      	ldrb	r2, [r3, #7]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	7a1a      	ldrb	r2, [r3, #8]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	721a      	strb	r2, [r3, #8]
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	781a      	ldrb	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	785a      	ldrb	r2, [r3, #1]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	789a      	ldrb	r2, [r3, #2]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	78da      	ldrb	r2, [r3, #3]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	3304      	adds	r3, #4
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	b29a      	uxth	r2, r3
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	3305      	adds	r3, #5
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	b29b      	uxth	r3, r3
 8010166:	021b      	lsls	r3, r3, #8
 8010168:	b29b      	uxth	r3, r3
 801016a:	4313      	orrs	r3, r2
 801016c:	b29a      	uxth	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	799a      	ldrb	r2, [r3, #6]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	719a      	strb	r2, [r3, #6]
}
 801017a:	bf00      	nop
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr

08010186 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010186:	b480      	push	{r7}
 8010188:	b087      	sub	sp, #28
 801018a:	af00      	add	r7, sp, #0
 801018c:	60f8      	str	r0, [r7, #12]
 801018e:	60b9      	str	r1, [r7, #8]
 8010190:	4613      	mov	r3, r2
 8010192:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3301      	adds	r3, #1
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2b03      	cmp	r3, #3
 801019c:	d120      	bne.n	80101e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	1e9a      	subs	r2, r3, #2
 80101a4:	88fb      	ldrh	r3, [r7, #6]
 80101a6:	4293      	cmp	r3, r2
 80101a8:	bf28      	it	cs
 80101aa:	4613      	movcs	r3, r2
 80101ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3302      	adds	r3, #2
 80101b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80101b4:	2300      	movs	r3, #0
 80101b6:	82fb      	strh	r3, [r7, #22]
 80101b8:	e00b      	b.n	80101d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80101ba:	8afb      	ldrh	r3, [r7, #22]
 80101bc:	68fa      	ldr	r2, [r7, #12]
 80101be:	4413      	add	r3, r2
 80101c0:	781a      	ldrb	r2, [r3, #0]
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	3301      	adds	r3, #1
 80101ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80101cc:	8afb      	ldrh	r3, [r7, #22]
 80101ce:	3302      	adds	r3, #2
 80101d0:	82fb      	strh	r3, [r7, #22]
 80101d2:	8afa      	ldrh	r2, [r7, #22]
 80101d4:	8abb      	ldrh	r3, [r7, #20]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d3ef      	bcc.n	80101ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	2200      	movs	r2, #0
 80101de:	701a      	strb	r2, [r3, #0]
  }
}
 80101e0:	bf00      	nop
 80101e2:	371c      	adds	r7, #28
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	881a      	ldrh	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	4413      	add	r3, r2
 8010202:	b29a      	uxth	r2, r3
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4413      	add	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010214:	68fb      	ldr	r3, [r7, #12]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3714      	adds	r7, #20
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr

08010222 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b086      	sub	sp, #24
 8010226:	af00      	add	r7, sp, #0
 8010228:	60f8      	str	r0, [r7, #12]
 801022a:	60b9      	str	r1, [r7, #8]
 801022c:	4613      	mov	r3, r2
 801022e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010230:	2301      	movs	r3, #1
 8010232:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	789b      	ldrb	r3, [r3, #2]
 8010238:	2b01      	cmp	r3, #1
 801023a:	d002      	beq.n	8010242 <USBH_CtlReq+0x20>
 801023c:	2b02      	cmp	r3, #2
 801023e:	d01d      	beq.n	801027c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8010240:	e043      	b.n	80102ca <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	88fa      	ldrh	r2, [r7, #6]
 801024c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2201      	movs	r2, #1
 8010252:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2202      	movs	r2, #2
 8010258:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801025a:	2301      	movs	r3, #1
 801025c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2203      	movs	r2, #3
 8010262:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010272:	2300      	movs	r3, #0
 8010274:	2200      	movs	r2, #0
 8010276:	f000 fdcd 	bl	8010e14 <osMessageQueuePut>
      break;
 801027a:	e026      	b.n	80102ca <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f000 f829 	bl	80102d4 <USBH_HandleControl>
 8010282:	4603      	mov	r3, r0
 8010284:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d002      	beq.n	8010292 <USBH_CtlReq+0x70>
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	2b03      	cmp	r3, #3
 8010290:	d106      	bne.n	80102a0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2201      	movs	r2, #1
 8010296:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	761a      	strb	r2, [r3, #24]
 801029e:	e005      	b.n	80102ac <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80102a0:	7dfb      	ldrb	r3, [r7, #23]
 80102a2:	2b02      	cmp	r3, #2
 80102a4:	d102      	bne.n	80102ac <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2201      	movs	r2, #1
 80102aa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2203      	movs	r2, #3
 80102b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80102c0:	2300      	movs	r3, #0
 80102c2:	2200      	movs	r2, #0
 80102c4:	f000 fda6 	bl	8010e14 <osMessageQueuePut>
      break;
 80102c8:	bf00      	nop
  }
  return status;
 80102ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b086      	sub	sp, #24
 80102d8:	af02      	add	r7, sp, #8
 80102da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80102dc:	2301      	movs	r3, #1
 80102de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80102e0:	2300      	movs	r3, #0
 80102e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	7e1b      	ldrb	r3, [r3, #24]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	2b0a      	cmp	r3, #10
 80102ec:	f200 8229 	bhi.w	8010742 <USBH_HandleControl+0x46e>
 80102f0:	a201      	add	r2, pc, #4	; (adr r2, 80102f8 <USBH_HandleControl+0x24>)
 80102f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f6:	bf00      	nop
 80102f8:	08010325 	.word	0x08010325
 80102fc:	0801033f 	.word	0x0801033f
 8010300:	080103e1 	.word	0x080103e1
 8010304:	08010407 	.word	0x08010407
 8010308:	08010493 	.word	0x08010493
 801030c:	080104bd 	.word	0x080104bd
 8010310:	0801057f 	.word	0x0801057f
 8010314:	080105a1 	.word	0x080105a1
 8010318:	08010633 	.word	0x08010633
 801031c:	08010659 	.word	0x08010659
 8010320:	080106eb 	.word	0x080106eb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f103 0110 	add.w	r1, r3, #16
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	795b      	ldrb	r3, [r3, #5]
 801032e:	461a      	mov	r2, r3
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fa17 	bl	8010764 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2202      	movs	r2, #2
 801033a:	761a      	strb	r2, [r3, #24]
      break;
 801033c:	e20c      	b.n	8010758 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	795b      	ldrb	r3, [r3, #5]
 8010342:	4619      	mov	r1, r3
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f004 f84b 	bl	80143e0 <USBH_LL_GetURBState>
 801034a:	4603      	mov	r3, r0
 801034c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801034e:	7bbb      	ldrb	r3, [r7, #14]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d12c      	bne.n	80103ae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7c1b      	ldrb	r3, [r3, #16]
 8010358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801035c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	8adb      	ldrh	r3, [r3, #22]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00a      	beq.n	801037c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010366:	7b7b      	ldrb	r3, [r7, #13]
 8010368:	2b80      	cmp	r3, #128	; 0x80
 801036a:	d103      	bne.n	8010374 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2203      	movs	r2, #3
 8010370:	761a      	strb	r2, [r3, #24]
 8010372:	e00d      	b.n	8010390 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2205      	movs	r2, #5
 8010378:	761a      	strb	r2, [r3, #24]
 801037a:	e009      	b.n	8010390 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 801037c:	7b7b      	ldrb	r3, [r7, #13]
 801037e:	2b80      	cmp	r3, #128	; 0x80
 8010380:	d103      	bne.n	801038a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2209      	movs	r2, #9
 8010386:	761a      	strb	r2, [r3, #24]
 8010388:	e002      	b.n	8010390 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2207      	movs	r2, #7
 801038e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2203      	movs	r2, #3
 8010394:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80103a4:	2300      	movs	r3, #0
 80103a6:	2200      	movs	r2, #0
 80103a8:	f000 fd34 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80103ac:	e1cb      	b.n	8010746 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
 80103b0:	2b04      	cmp	r3, #4
 80103b2:	d003      	beq.n	80103bc <USBH_HandleControl+0xe8>
 80103b4:	7bbb      	ldrb	r3, [r7, #14]
 80103b6:	2b02      	cmp	r3, #2
 80103b8:	f040 81c5 	bne.w	8010746 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	220b      	movs	r2, #11
 80103c0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2203      	movs	r2, #3
 80103c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80103d6:	2300      	movs	r3, #0
 80103d8:	2200      	movs	r2, #0
 80103da:	f000 fd1b 	bl	8010e14 <osMessageQueuePut>
      break;
 80103de:	e1b2      	b.n	8010746 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6899      	ldr	r1, [r3, #8]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	899a      	ldrh	r2, [r3, #12]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	791b      	ldrb	r3, [r3, #4]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f9f2 	bl	80107e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2204      	movs	r2, #4
 8010402:	761a      	strb	r2, [r3, #24]
      break;
 8010404:	e1a8      	b.n	8010758 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	791b      	ldrb	r3, [r3, #4]
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f003 ffe7 	bl	80143e0 <USBH_LL_GetURBState>
 8010412:	4603      	mov	r3, r0
 8010414:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010416:	7bbb      	ldrb	r3, [r7, #14]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d110      	bne.n	801043e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2209      	movs	r2, #9
 8010420:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2203      	movs	r2, #3
 8010426:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010436:	2300      	movs	r3, #0
 8010438:	2200      	movs	r2, #0
 801043a:	f000 fceb 	bl	8010e14 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801043e:	7bbb      	ldrb	r3, [r7, #14]
 8010440:	2b05      	cmp	r3, #5
 8010442:	d110      	bne.n	8010466 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010444:	2303      	movs	r3, #3
 8010446:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2203      	movs	r2, #3
 801044c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801045c:	2300      	movs	r3, #0
 801045e:	2200      	movs	r2, #0
 8010460:	f000 fcd8 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010464:	e171      	b.n	801074a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010466:	7bbb      	ldrb	r3, [r7, #14]
 8010468:	2b04      	cmp	r3, #4
 801046a:	f040 816e 	bne.w	801074a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	220b      	movs	r2, #11
 8010472:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2203      	movs	r2, #3
 8010478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010488:	2300      	movs	r3, #0
 801048a:	2200      	movs	r2, #0
 801048c:	f000 fcc2 	bl	8010e14 <osMessageQueuePut>
      break;
 8010490:	e15b      	b.n	801074a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6899      	ldr	r1, [r3, #8]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	899a      	ldrh	r2, [r3, #12]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	795b      	ldrb	r3, [r3, #5]
 801049e:	2001      	movs	r0, #1
 80104a0:	9000      	str	r0, [sp, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f978 	bl	8010798 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2206      	movs	r2, #6
 80104b8:	761a      	strb	r2, [r3, #24]
      break;
 80104ba:	e14d      	b.n	8010758 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	795b      	ldrb	r3, [r3, #5]
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f003 ff8c 	bl	80143e0 <USBH_LL_GetURBState>
 80104c8:	4603      	mov	r3, r0
 80104ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80104cc:	7bbb      	ldrb	r3, [r7, #14]
 80104ce:	2b01      	cmp	r3, #1
 80104d0:	d111      	bne.n	80104f6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2207      	movs	r2, #7
 80104d6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2203      	movs	r2, #3
 80104dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80104ec:	2300      	movs	r3, #0
 80104ee:	2200      	movs	r2, #0
 80104f0:	f000 fc90 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80104f4:	e12b      	b.n	801074e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80104f6:	7bbb      	ldrb	r3, [r7, #14]
 80104f8:	2b05      	cmp	r3, #5
 80104fa:	d113      	bne.n	8010524 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	220c      	movs	r2, #12
 8010500:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010502:	2303      	movs	r3, #3
 8010504:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2203      	movs	r2, #3
 801050a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801051a:	2300      	movs	r3, #0
 801051c:	2200      	movs	r2, #0
 801051e:	f000 fc79 	bl	8010e14 <osMessageQueuePut>
      break;
 8010522:	e114      	b.n	801074e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010524:	7bbb      	ldrb	r3, [r7, #14]
 8010526:	2b02      	cmp	r3, #2
 8010528:	d111      	bne.n	801054e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2205      	movs	r2, #5
 801052e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2203      	movs	r2, #3
 8010534:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010544:	2300      	movs	r3, #0
 8010546:	2200      	movs	r2, #0
 8010548:	f000 fc64 	bl	8010e14 <osMessageQueuePut>
      break;
 801054c:	e0ff      	b.n	801074e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 801054e:	7bbb      	ldrb	r3, [r7, #14]
 8010550:	2b04      	cmp	r3, #4
 8010552:	f040 80fc 	bne.w	801074e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	220b      	movs	r2, #11
 801055a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801055c:	2302      	movs	r3, #2
 801055e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2203      	movs	r2, #3
 8010564:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010574:	2300      	movs	r3, #0
 8010576:	2200      	movs	r2, #0
 8010578:	f000 fc4c 	bl	8010e14 <osMessageQueuePut>
      break;
 801057c:	e0e7      	b.n	801074e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	791b      	ldrb	r3, [r3, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	2100      	movs	r1, #0
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f92b 	bl	80107e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2208      	movs	r2, #8
 801059c:	761a      	strb	r2, [r3, #24]

      break;
 801059e:	e0db      	b.n	8010758 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	791b      	ldrb	r3, [r3, #4]
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f003 ff1a 	bl	80143e0 <USBH_LL_GetURBState>
 80105ac:	4603      	mov	r3, r0
 80105ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80105b0:	7bbb      	ldrb	r3, [r7, #14]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d113      	bne.n	80105de <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	220d      	movs	r2, #13
 80105ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2203      	movs	r2, #3
 80105c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80105d4:	2300      	movs	r3, #0
 80105d6:	2200      	movs	r2, #0
 80105d8:	f000 fc1c 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80105dc:	e0b9      	b.n	8010752 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80105de:	7bbb      	ldrb	r3, [r7, #14]
 80105e0:	2b04      	cmp	r3, #4
 80105e2:	d111      	bne.n	8010608 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	220b      	movs	r2, #11
 80105e8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2203      	movs	r2, #3
 80105ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80105fe:	2300      	movs	r3, #0
 8010600:	2200      	movs	r2, #0
 8010602:	f000 fc07 	bl	8010e14 <osMessageQueuePut>
      break;
 8010606:	e0a4      	b.n	8010752 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8010608:	7bbb      	ldrb	r3, [r7, #14]
 801060a:	2b05      	cmp	r3, #5
 801060c:	f040 80a1 	bne.w	8010752 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010610:	2303      	movs	r3, #3
 8010612:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2203      	movs	r2, #3
 8010618:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010628:	2300      	movs	r3, #0
 801062a:	2200      	movs	r2, #0
 801062c:	f000 fbf2 	bl	8010e14 <osMessageQueuePut>
      break;
 8010630:	e08f      	b.n	8010752 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	795b      	ldrb	r3, [r3, #5]
 8010636:	2201      	movs	r2, #1
 8010638:	9200      	str	r2, [sp, #0]
 801063a:	2200      	movs	r2, #0
 801063c:	2100      	movs	r1, #0
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 f8aa 	bl	8010798 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	220a      	movs	r2, #10
 8010654:	761a      	strb	r2, [r3, #24]
      break;
 8010656:	e07f      	b.n	8010758 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	795b      	ldrb	r3, [r3, #5]
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f003 febe 	bl	80143e0 <USBH_LL_GetURBState>
 8010664:	4603      	mov	r3, r0
 8010666:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010668:	7bbb      	ldrb	r3, [r7, #14]
 801066a:	2b01      	cmp	r3, #1
 801066c:	d113      	bne.n	8010696 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 801066e:	2300      	movs	r3, #0
 8010670:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	220d      	movs	r2, #13
 8010676:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2203      	movs	r2, #3
 801067c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801068c:	2300      	movs	r3, #0
 801068e:	2200      	movs	r2, #0
 8010690:	f000 fbc0 	bl	8010e14 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010694:	e05f      	b.n	8010756 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010696:	7bbb      	ldrb	r3, [r7, #14]
 8010698:	2b02      	cmp	r3, #2
 801069a:	d111      	bne.n	80106c0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2209      	movs	r2, #9
 80106a0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2203      	movs	r2, #3
 80106a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80106b6:	2300      	movs	r3, #0
 80106b8:	2200      	movs	r2, #0
 80106ba:	f000 fbab 	bl	8010e14 <osMessageQueuePut>
      break;
 80106be:	e04a      	b.n	8010756 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80106c0:	7bbb      	ldrb	r3, [r7, #14]
 80106c2:	2b04      	cmp	r3, #4
 80106c4:	d147      	bne.n	8010756 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	220b      	movs	r2, #11
 80106ca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2203      	movs	r2, #3
 80106d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80106e0:	2300      	movs	r3, #0
 80106e2:	2200      	movs	r2, #0
 80106e4:	f000 fb96 	bl	8010e14 <osMessageQueuePut>
      break;
 80106e8:	e035      	b.n	8010756 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	7e5b      	ldrb	r3, [r3, #25]
 80106ee:	3301      	adds	r3, #1
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	765a      	strb	r2, [r3, #25]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	7e5b      	ldrb	r3, [r3, #25]
 80106fa:	2b02      	cmp	r3, #2
 80106fc:	d806      	bhi.n	801070c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2201      	movs	r2, #1
 8010702:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801070a:	e025      	b.n	8010758 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010712:	2106      	movs	r1, #6
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	795b      	ldrb	r3, [r3, #5]
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f90d 	bl	8010944 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	791b      	ldrb	r3, [r3, #4]
 801072e:	4619      	mov	r1, r3
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 f907 	bl	8010944 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801073c:	2302      	movs	r3, #2
 801073e:	73fb      	strb	r3, [r7, #15]
      break;
 8010740:	e00a      	b.n	8010758 <USBH_HandleControl+0x484>

    default:
      break;
 8010742:	bf00      	nop
 8010744:	e008      	b.n	8010758 <USBH_HandleControl+0x484>
      break;
 8010746:	bf00      	nop
 8010748:	e006      	b.n	8010758 <USBH_HandleControl+0x484>
      break;
 801074a:	bf00      	nop
 801074c:	e004      	b.n	8010758 <USBH_HandleControl+0x484>
      break;
 801074e:	bf00      	nop
 8010750:	e002      	b.n	8010758 <USBH_HandleControl+0x484>
      break;
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <USBH_HandleControl+0x484>
      break;
 8010756:	bf00      	nop
  }

  return status;
 8010758:	7bfb      	ldrb	r3, [r7, #15]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop

08010764 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af04      	add	r7, sp, #16
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	60b9      	str	r1, [r7, #8]
 801076e:	4613      	mov	r3, r2
 8010770:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010772:	79f9      	ldrb	r1, [r7, #7]
 8010774:	2300      	movs	r3, #0
 8010776:	9303      	str	r3, [sp, #12]
 8010778:	2308      	movs	r3, #8
 801077a:	9302      	str	r3, [sp, #8]
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	2300      	movs	r3, #0
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	2300      	movs	r3, #0
 8010786:	2200      	movs	r2, #0
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f003 fdf8 	bl	801437e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b088      	sub	sp, #32
 801079c:	af04      	add	r7, sp, #16
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	4611      	mov	r1, r2
 80107a4:	461a      	mov	r2, r3
 80107a6:	460b      	mov	r3, r1
 80107a8:	80fb      	strh	r3, [r7, #6]
 80107aa:	4613      	mov	r3, r2
 80107ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80107b8:	2300      	movs	r3, #0
 80107ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107bc:	7979      	ldrb	r1, [r7, #5]
 80107be:	7e3b      	ldrb	r3, [r7, #24]
 80107c0:	9303      	str	r3, [sp, #12]
 80107c2:	88fb      	ldrh	r3, [r7, #6]
 80107c4:	9302      	str	r3, [sp, #8]
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	2301      	movs	r3, #1
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	2300      	movs	r3, #0
 80107d0:	2200      	movs	r2, #0
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f003 fdd3 	bl	801437e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b088      	sub	sp, #32
 80107e6:	af04      	add	r7, sp, #16
 80107e8:	60f8      	str	r0, [r7, #12]
 80107ea:	60b9      	str	r1, [r7, #8]
 80107ec:	4611      	mov	r1, r2
 80107ee:	461a      	mov	r2, r3
 80107f0:	460b      	mov	r3, r1
 80107f2:	80fb      	strh	r3, [r7, #6]
 80107f4:	4613      	mov	r3, r2
 80107f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80107f8:	7979      	ldrb	r1, [r7, #5]
 80107fa:	2300      	movs	r3, #0
 80107fc:	9303      	str	r3, [sp, #12]
 80107fe:	88fb      	ldrh	r3, [r7, #6]
 8010800:	9302      	str	r3, [sp, #8]
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	2301      	movs	r3, #1
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	2300      	movs	r3, #0
 801080c:	2201      	movs	r2, #1
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f003 fdb5 	bl	801437e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010814:	2300      	movs	r3, #0

}
 8010816:	4618      	mov	r0, r3
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b088      	sub	sp, #32
 8010822:	af04      	add	r7, sp, #16
 8010824:	60f8      	str	r0, [r7, #12]
 8010826:	60b9      	str	r1, [r7, #8]
 8010828:	4611      	mov	r1, r2
 801082a:	461a      	mov	r2, r3
 801082c:	460b      	mov	r3, r1
 801082e:	80fb      	strh	r3, [r7, #6]
 8010830:	4613      	mov	r3, r2
 8010832:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801083a:	2b00      	cmp	r3, #0
 801083c:	d001      	beq.n	8010842 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801083e:	2300      	movs	r3, #0
 8010840:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010842:	7979      	ldrb	r1, [r7, #5]
 8010844:	7e3b      	ldrb	r3, [r7, #24]
 8010846:	9303      	str	r3, [sp, #12]
 8010848:	88fb      	ldrh	r3, [r7, #6]
 801084a:	9302      	str	r3, [sp, #8]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	9301      	str	r3, [sp, #4]
 8010850:	2301      	movs	r3, #1
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	2302      	movs	r3, #2
 8010856:	2200      	movs	r2, #0
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f003 fd90 	bl	801437e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3710      	adds	r7, #16
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b088      	sub	sp, #32
 801086c:	af04      	add	r7, sp, #16
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	4611      	mov	r1, r2
 8010874:	461a      	mov	r2, r3
 8010876:	460b      	mov	r3, r1
 8010878:	80fb      	strh	r3, [r7, #6]
 801087a:	4613      	mov	r3, r2
 801087c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801087e:	7979      	ldrb	r1, [r7, #5]
 8010880:	2300      	movs	r3, #0
 8010882:	9303      	str	r3, [sp, #12]
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	9302      	str	r3, [sp, #8]
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	9301      	str	r3, [sp, #4]
 801088c:	2301      	movs	r3, #1
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	2302      	movs	r3, #2
 8010892:	2201      	movs	r2, #1
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f003 fd72 	bl	801437e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af04      	add	r7, sp, #16
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	4608      	mov	r0, r1
 80108ae:	4611      	mov	r1, r2
 80108b0:	461a      	mov	r2, r3
 80108b2:	4603      	mov	r3, r0
 80108b4:	70fb      	strb	r3, [r7, #3]
 80108b6:	460b      	mov	r3, r1
 80108b8:	70bb      	strb	r3, [r7, #2]
 80108ba:	4613      	mov	r3, r2
 80108bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80108be:	7878      	ldrb	r0, [r7, #1]
 80108c0:	78ba      	ldrb	r2, [r7, #2]
 80108c2:	78f9      	ldrb	r1, [r7, #3]
 80108c4:	8b3b      	ldrh	r3, [r7, #24]
 80108c6:	9302      	str	r3, [sp, #8]
 80108c8:	7d3b      	ldrb	r3, [r7, #20]
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	7c3b      	ldrb	r3, [r7, #16]
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	4603      	mov	r3, r0
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f003 fd05 	bl	80142e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
 80108ea:	460b      	mov	r3, r1
 80108ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	4619      	mov	r1, r3
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f003 fd24 	bl	8014340 <USBH_LL_ClosePipe>

  return USBH_OK;
 80108f8:	2300      	movs	r3, #0
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3708      	adds	r7, #8
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010902:	b580      	push	{r7, lr}
 8010904:	b084      	sub	sp, #16
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	460b      	mov	r3, r1
 801090c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f836 	bl	8010980 <USBH_GetFreePipe>
 8010914:	4603      	mov	r3, r0
 8010916:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010918:	89fb      	ldrh	r3, [r7, #14]
 801091a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801091e:	4293      	cmp	r3, r2
 8010920:	d00a      	beq.n	8010938 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010922:	78fa      	ldrb	r2, [r7, #3]
 8010924:	89fb      	ldrh	r3, [r7, #14]
 8010926:	f003 030f 	and.w	r3, r3, #15
 801092a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801092e:	6879      	ldr	r1, [r7, #4]
 8010930:	33e0      	adds	r3, #224	; 0xe0
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	440b      	add	r3, r1
 8010936:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010938:	89fb      	ldrh	r3, [r7, #14]
 801093a:	b2db      	uxtb	r3, r3
}
 801093c:	4618      	mov	r0, r3
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	460b      	mov	r3, r1
 801094e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010950:	78fb      	ldrb	r3, [r7, #3]
 8010952:	2b0a      	cmp	r3, #10
 8010954:	d80d      	bhi.n	8010972 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010956:	78fb      	ldrb	r3, [r7, #3]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	33e0      	adds	r3, #224	; 0xe0
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	78fb      	ldrb	r3, [r7, #3]
 8010964:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010968:	6879      	ldr	r1, [r7, #4]
 801096a:	33e0      	adds	r3, #224	; 0xe0
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	440b      	add	r3, r1
 8010970:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801098c:	2300      	movs	r3, #0
 801098e:	73fb      	strb	r3, [r7, #15]
 8010990:	e00f      	b.n	80109b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010992:	7bfb      	ldrb	r3, [r7, #15]
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	33e0      	adds	r3, #224	; 0xe0
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4413      	add	r3, r2
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d102      	bne.n	80109ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	e007      	b.n	80109bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80109ac:	7bfb      	ldrb	r3, [r7, #15]
 80109ae:	3301      	adds	r3, #1
 80109b0:	73fb      	strb	r3, [r7, #15]
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	2b0a      	cmp	r3, #10
 80109b6:	d9ec      	bls.n	8010992 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80109b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3714      	adds	r7, #20
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b087      	sub	sp, #28
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	4613      	mov	r3, r2
 80109d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109d6:	2301      	movs	r3, #1
 80109d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109de:	4b1f      	ldr	r3, [pc, #124]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 80109e0:	7a5b      	ldrb	r3, [r3, #9]
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d131      	bne.n	8010a4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80109e8:	4b1c      	ldr	r3, [pc, #112]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 80109ea:	7a5b      	ldrb	r3, [r3, #9]
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	461a      	mov	r2, r3
 80109f0:	4b1a      	ldr	r3, [pc, #104]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 80109f2:	2100      	movs	r1, #0
 80109f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80109f6:	4b19      	ldr	r3, [pc, #100]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 80109f8:	7a5b      	ldrb	r3, [r3, #9]
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	4a17      	ldr	r2, [pc, #92]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a06:	4b15      	ldr	r3, [pc, #84]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 8010a08:	7a5b      	ldrb	r3, [r3, #9]
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 8010a10:	4413      	add	r3, r2
 8010a12:	79fa      	ldrb	r2, [r7, #7]
 8010a14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a16:	4b11      	ldr	r3, [pc, #68]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 8010a18:	7a5b      	ldrb	r3, [r3, #9]
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	1c5a      	adds	r2, r3, #1
 8010a1e:	b2d1      	uxtb	r1, r2
 8010a20:	4a0e      	ldr	r2, [pc, #56]	; (8010a5c <FATFS_LinkDriverEx+0x94>)
 8010a22:	7251      	strb	r1, [r2, #9]
 8010a24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a26:	7dbb      	ldrb	r3, [r7, #22]
 8010a28:	3330      	adds	r3, #48	; 0x30
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	3301      	adds	r3, #1
 8010a34:	223a      	movs	r2, #58	; 0x3a
 8010a36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	3302      	adds	r3, #2
 8010a3c:	222f      	movs	r2, #47	; 0x2f
 8010a3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	3303      	adds	r3, #3
 8010a44:	2200      	movs	r2, #0
 8010a46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	371c      	adds	r7, #28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	2000014c 	.word	0x2000014c

08010a60 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b082      	sub	sp, #8
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	6839      	ldr	r1, [r7, #0]
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff ffaa 	bl	80109c8 <FATFS_LinkDriverEx>
 8010a74:	4603      	mov	r3, r0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010a7e:	b480      	push	{r7}
 8010a80:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010a82:	bf00      	nop
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a92:	f3ef 8305 	mrs	r3, IPSR
 8010a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d10f      	bne.n	8010abe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8010aa2:	607b      	str	r3, [r7, #4]
  return(result);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d105      	bne.n	8010ab6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8010aae:	603b      	str	r3, [r7, #0]
  return(result);
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d007      	beq.n	8010ac6 <osKernelInitialize+0x3a>
 8010ab6:	4b0e      	ldr	r3, [pc, #56]	; (8010af0 <osKernelInitialize+0x64>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d103      	bne.n	8010ac6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010abe:	f06f 0305 	mvn.w	r3, #5
 8010ac2:	60fb      	str	r3, [r7, #12]
 8010ac4:	e00c      	b.n	8010ae0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010ac6:	4b0a      	ldr	r3, [pc, #40]	; (8010af0 <osKernelInitialize+0x64>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d105      	bne.n	8010ada <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010ace:	4b08      	ldr	r3, [pc, #32]	; (8010af0 <osKernelInitialize+0x64>)
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	60fb      	str	r3, [r7, #12]
 8010ad8:	e002      	b.n	8010ae0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010ada:	f04f 33ff 	mov.w	r3, #4294967295
 8010ade:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	20000158 	.word	0x20000158

08010af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010afa:	f3ef 8305 	mrs	r3, IPSR
 8010afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d10f      	bne.n	8010b26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b06:	f3ef 8310 	mrs	r3, PRIMASK
 8010b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d105      	bne.n	8010b1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b12:	f3ef 8311 	mrs	r3, BASEPRI
 8010b16:	603b      	str	r3, [r7, #0]
  return(result);
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d007      	beq.n	8010b2e <osKernelStart+0x3a>
 8010b1e:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <osKernelStart+0x68>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b02      	cmp	r3, #2
 8010b24:	d103      	bne.n	8010b2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8010b26:	f06f 0305 	mvn.w	r3, #5
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	e010      	b.n	8010b50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010b2e:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <osKernelStart+0x68>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d109      	bne.n	8010b4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010b36:	f7ff ffa2 	bl	8010a7e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010b3a:	4b08      	ldr	r3, [pc, #32]	; (8010b5c <osKernelStart+0x68>)
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010b40:	f001 fc66 	bl	8012410 <vTaskStartScheduler>
      stat = osOK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	60fb      	str	r3, [r7, #12]
 8010b48:	e002      	b.n	8010b50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010b50:	68fb      	ldr	r3, [r7, #12]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20000158 	.word	0x20000158

08010b60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b090      	sub	sp, #64	; 0x40
 8010b64:	af04      	add	r7, sp, #16
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b70:	f3ef 8305 	mrs	r3, IPSR
 8010b74:	61fb      	str	r3, [r7, #28]
  return(result);
 8010b76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f040 808f 	bne.w	8010c9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8010b82:	61bb      	str	r3, [r7, #24]
  return(result);
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d105      	bne.n	8010b96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8010b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d003      	beq.n	8010b9e <osThreadNew+0x3e>
 8010b96:	4b44      	ldr	r3, [pc, #272]	; (8010ca8 <osThreadNew+0x148>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b02      	cmp	r3, #2
 8010b9c:	d07e      	beq.n	8010c9c <osThreadNew+0x13c>
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d07b      	beq.n	8010c9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010ba4:	2380      	movs	r3, #128	; 0x80
 8010ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010ba8:	2318      	movs	r3, #24
 8010baa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010bac:	2300      	movs	r3, #0
 8010bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d045      	beq.n	8010c48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <osThreadNew+0x6a>
        name = attr->name;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	699b      	ldr	r3, [r3, #24]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	699b      	ldr	r3, [r3, #24]
 8010bd6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d008      	beq.n	8010bf0 <osThreadNew+0x90>
 8010bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be0:	2b38      	cmp	r3, #56	; 0x38
 8010be2:	d805      	bhi.n	8010bf0 <osThreadNew+0x90>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	685b      	ldr	r3, [r3, #4]
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d001      	beq.n	8010bf4 <osThreadNew+0x94>
        return (NULL);
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	e054      	b.n	8010c9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	695b      	ldr	r3, [r3, #20]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d003      	beq.n	8010c04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	695b      	ldr	r3, [r3, #20]
 8010c00:	089b      	lsrs	r3, r3, #2
 8010c02:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00e      	beq.n	8010c2a <osThreadNew+0xca>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	2b5b      	cmp	r3, #91	; 0x5b
 8010c12:	d90a      	bls.n	8010c2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d006      	beq.n	8010c2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	695b      	ldr	r3, [r3, #20]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d002      	beq.n	8010c2a <osThreadNew+0xca>
        mem = 1;
 8010c24:	2301      	movs	r3, #1
 8010c26:	623b      	str	r3, [r7, #32]
 8010c28:	e010      	b.n	8010c4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	689b      	ldr	r3, [r3, #8]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10c      	bne.n	8010c4c <osThreadNew+0xec>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	68db      	ldr	r3, [r3, #12]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d108      	bne.n	8010c4c <osThreadNew+0xec>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d104      	bne.n	8010c4c <osThreadNew+0xec>
          mem = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	623b      	str	r3, [r7, #32]
 8010c46:	e001      	b.n	8010c4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d110      	bne.n	8010c74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010c5a:	9202      	str	r2, [sp, #8]
 8010c5c:	9301      	str	r3, [sp, #4]
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f001 f9fb 	bl	8012064 <xTaskCreateStatic>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	613b      	str	r3, [r7, #16]
 8010c72:	e013      	b.n	8010c9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d110      	bne.n	8010c9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	f107 0310 	add.w	r3, r7, #16
 8010c82:	9301      	str	r3, [sp, #4]
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f001 fa46 	bl	801211e <xTaskCreate>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d001      	beq.n	8010c9c <osThreadNew+0x13c>
          hTask = NULL;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010c9c:	693b      	ldr	r3, [r7, #16]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3730      	adds	r7, #48	; 0x30
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	20000158 	.word	0x20000158

08010cac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b086      	sub	sp, #24
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cb4:	f3ef 8305 	mrs	r3, IPSR
 8010cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8010cba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10f      	bne.n	8010ce0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8010cc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d105      	bne.n	8010cd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ccc:	f3ef 8311 	mrs	r3, BASEPRI
 8010cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <osDelay+0x3c>
 8010cd8:	4b0a      	ldr	r3, [pc, #40]	; (8010d04 <osDelay+0x58>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d103      	bne.n	8010ce8 <osDelay+0x3c>
    stat = osErrorISR;
 8010ce0:	f06f 0305 	mvn.w	r3, #5
 8010ce4:	617b      	str	r3, [r7, #20]
 8010ce6:	e007      	b.n	8010cf8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d002      	beq.n	8010cf8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 fb58 	bl	80123a8 <vTaskDelay>
    }
  }

  return (stat);
 8010cf8:	697b      	ldr	r3, [r7, #20]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	20000158 	.word	0x20000158

08010d08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08c      	sub	sp, #48	; 0x30
 8010d0c:	af02      	add	r7, sp, #8
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010d14:	2300      	movs	r3, #0
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d18:	f3ef 8305 	mrs	r3, IPSR
 8010d1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d16f      	bne.n	8010e04 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d24:	f3ef 8310 	mrs	r3, PRIMASK
 8010d28:	617b      	str	r3, [r7, #20]
  return(result);
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d105      	bne.n	8010d3c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d30:	f3ef 8311 	mrs	r3, BASEPRI
 8010d34:	613b      	str	r3, [r7, #16]
  return(result);
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <osMessageQueueNew+0x3c>
 8010d3c:	4b34      	ldr	r3, [pc, #208]	; (8010e10 <osMessageQueueNew+0x108>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d05f      	beq.n	8010e04 <osMessageQueueNew+0xfc>
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d05c      	beq.n	8010e04 <osMessageQueueNew+0xfc>
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d059      	beq.n	8010e04 <osMessageQueueNew+0xfc>
    mem = -1;
 8010d50:	f04f 33ff 	mov.w	r3, #4294967295
 8010d54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d029      	beq.n	8010db0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d012      	beq.n	8010d8a <osMessageQueueNew+0x82>
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	2b4f      	cmp	r3, #79	; 0x4f
 8010d6a:	d90e      	bls.n	8010d8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00a      	beq.n	8010d8a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	695a      	ldr	r2, [r3, #20]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	68b9      	ldr	r1, [r7, #8]
 8010d7c:	fb01 f303 	mul.w	r3, r1, r3
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d302      	bcc.n	8010d8a <osMessageQueueNew+0x82>
        mem = 1;
 8010d84:	2301      	movs	r3, #1
 8010d86:	623b      	str	r3, [r7, #32]
 8010d88:	e014      	b.n	8010db4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	689b      	ldr	r3, [r3, #8]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d110      	bne.n	8010db4 <osMessageQueueNew+0xac>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10c      	bne.n	8010db4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d108      	bne.n	8010db4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d104      	bne.n	8010db4 <osMessageQueueNew+0xac>
          mem = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	623b      	str	r3, [r7, #32]
 8010dae:	e001      	b.n	8010db4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010db0:	2300      	movs	r3, #0
 8010db2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010db4:	6a3b      	ldr	r3, [r7, #32]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d10b      	bne.n	8010dd2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	691a      	ldr	r2, [r3, #16]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	9100      	str	r1, [sp, #0]
 8010dc6:	68b9      	ldr	r1, [r7, #8]
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f000 fa59 	bl	8011280 <xQueueGenericCreateStatic>
 8010dce:	6278      	str	r0, [r7, #36]	; 0x24
 8010dd0:	e008      	b.n	8010de4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8010dd2:	6a3b      	ldr	r3, [r7, #32]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d105      	bne.n	8010de4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010dd8:	2200      	movs	r2, #0
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 fac7 	bl	8011370 <xQueueGenericCreate>
 8010de2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00c      	beq.n	8010e04 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d003      	beq.n	8010df8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	61fb      	str	r3, [r7, #28]
 8010df6:	e001      	b.n	8010dfc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010dfc:	69f9      	ldr	r1, [r7, #28]
 8010dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e00:	f001 f8d2 	bl	8011fa8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3728      	adds	r7, #40	; 0x28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	20000158 	.word	0x20000158

08010e14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08a      	sub	sp, #40	; 0x28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	603b      	str	r3, [r7, #0]
 8010e20:	4613      	mov	r3, r2
 8010e22:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e2c:	f3ef 8305 	mrs	r3, IPSR
 8010e30:	61fb      	str	r3, [r7, #28]
  return(result);
 8010e32:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10f      	bne.n	8010e58 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e38:	f3ef 8310 	mrs	r3, PRIMASK
 8010e3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e3e:	69bb      	ldr	r3, [r7, #24]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d105      	bne.n	8010e50 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e44:	f3ef 8311 	mrs	r3, BASEPRI
 8010e48:	617b      	str	r3, [r7, #20]
  return(result);
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d02c      	beq.n	8010eaa <osMessageQueuePut+0x96>
 8010e50:	4b28      	ldr	r3, [pc, #160]	; (8010ef4 <osMessageQueuePut+0xe0>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d128      	bne.n	8010eaa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e58:	6a3b      	ldr	r3, [r7, #32]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d005      	beq.n	8010e6a <osMessageQueuePut+0x56>
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <osMessageQueuePut+0x56>
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010e6a:	f06f 0303 	mvn.w	r3, #3
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e70:	e039      	b.n	8010ee6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010e72:	2300      	movs	r3, #0
 8010e74:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010e76:	f107 0210 	add.w	r2, r7, #16
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	68b9      	ldr	r1, [r7, #8]
 8010e7e:	6a38      	ldr	r0, [r7, #32]
 8010e80:	f000 fbd8 	bl	8011634 <xQueueGenericSendFromISR>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d003      	beq.n	8010e92 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010e8a:	f06f 0302 	mvn.w	r3, #2
 8010e8e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e90:	e029      	b.n	8010ee6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d026      	beq.n	8010ee6 <osMessageQueuePut+0xd2>
 8010e98:	4b17      	ldr	r3, [pc, #92]	; (8010ef8 <osMessageQueuePut+0xe4>)
 8010e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	f3bf 8f4f 	dsb	sy
 8010ea4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ea8:	e01d      	b.n	8010ee6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010eaa:	6a3b      	ldr	r3, [r7, #32]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <osMessageQueuePut+0xa2>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d103      	bne.n	8010ebe <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010eb6:	f06f 0303 	mvn.w	r3, #3
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
 8010ebc:	e014      	b.n	8010ee8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	683a      	ldr	r2, [r7, #0]
 8010ec2:	68b9      	ldr	r1, [r7, #8]
 8010ec4:	6a38      	ldr	r0, [r7, #32]
 8010ec6:	f000 fab7 	bl	8011438 <xQueueGenericSend>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d00b      	beq.n	8010ee8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010ed6:	f06f 0301 	mvn.w	r3, #1
 8010eda:	627b      	str	r3, [r7, #36]	; 0x24
 8010edc:	e004      	b.n	8010ee8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010ede:	f06f 0302 	mvn.w	r3, #2
 8010ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8010ee4:	e000      	b.n	8010ee8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ee6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3728      	adds	r7, #40	; 0x28
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	20000158 	.word	0x20000158
 8010ef8:	e000ed04 	.word	0xe000ed04

08010efc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b08a      	sub	sp, #40	; 0x28
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f12:	f3ef 8305 	mrs	r3, IPSR
 8010f16:	61fb      	str	r3, [r7, #28]
  return(result);
 8010f18:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d10f      	bne.n	8010f3e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8010f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d105      	bne.n	8010f36 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8010f2e:	617b      	str	r3, [r7, #20]
  return(result);
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d02c      	beq.n	8010f90 <osMessageQueueGet+0x94>
 8010f36:	4b28      	ldr	r3, [pc, #160]	; (8010fd8 <osMessageQueueGet+0xdc>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d128      	bne.n	8010f90 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f3e:	6a3b      	ldr	r3, [r7, #32]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d005      	beq.n	8010f50 <osMessageQueueGet+0x54>
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d002      	beq.n	8010f50 <osMessageQueueGet+0x54>
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d003      	beq.n	8010f58 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010f50:	f06f 0303 	mvn.w	r3, #3
 8010f54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f56:	e038      	b.n	8010fca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010f5c:	f107 0310 	add.w	r3, r7, #16
 8010f60:	461a      	mov	r2, r3
 8010f62:	68b9      	ldr	r1, [r7, #8]
 8010f64:	6a38      	ldr	r0, [r7, #32]
 8010f66:	f000 fe77 	bl	8011c58 <xQueueReceiveFromISR>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d003      	beq.n	8010f78 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010f70:	f06f 0302 	mvn.w	r3, #2
 8010f74:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f76:	e028      	b.n	8010fca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d025      	beq.n	8010fca <osMessageQueueGet+0xce>
 8010f7e:	4b17      	ldr	r3, [pc, #92]	; (8010fdc <osMessageQueueGet+0xe0>)
 8010f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f84:	601a      	str	r2, [r3, #0]
 8010f86:	f3bf 8f4f 	dsb	sy
 8010f8a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f8e:	e01c      	b.n	8010fca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010f90:	6a3b      	ldr	r3, [r7, #32]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <osMessageQueueGet+0xa0>
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d103      	bne.n	8010fa4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010f9c:	f06f 0303 	mvn.w	r3, #3
 8010fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8010fa2:	e013      	b.n	8010fcc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	68b9      	ldr	r1, [r7, #8]
 8010fa8:	6a38      	ldr	r0, [r7, #32]
 8010faa:	f000 fc69 	bl	8011880 <xQueueReceive>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d00b      	beq.n	8010fcc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d003      	beq.n	8010fc2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010fba:	f06f 0301 	mvn.w	r3, #1
 8010fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc0:	e004      	b.n	8010fcc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010fc2:	f06f 0302 	mvn.w	r3, #2
 8010fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8010fc8:	e000      	b.n	8010fcc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010fca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3728      	adds	r7, #40	; 0x28
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20000158 	.word	0x20000158
 8010fdc:	e000ed04 	.word	0xe000ed04

08010fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010fe0:	b480      	push	{r7}
 8010fe2:	b085      	sub	sp, #20
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	4a07      	ldr	r2, [pc, #28]	; (801100c <vApplicationGetIdleTaskMemory+0x2c>)
 8010ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	4a06      	ldr	r2, [pc, #24]	; (8011010 <vApplicationGetIdleTaskMemory+0x30>)
 8010ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2280      	movs	r2, #128	; 0x80
 8010ffc:	601a      	str	r2, [r3, #0]
}
 8010ffe:	bf00      	nop
 8011000:	3714      	adds	r7, #20
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	2000015c 	.word	0x2000015c
 8011010:	200001b8 	.word	0x200001b8

08011014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	4a07      	ldr	r2, [pc, #28]	; (8011040 <vApplicationGetTimerTaskMemory+0x2c>)
 8011024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	4a06      	ldr	r2, [pc, #24]	; (8011044 <vApplicationGetTimerTaskMemory+0x30>)
 801102a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011032:	601a      	str	r2, [r3, #0]
}
 8011034:	bf00      	nop
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	200003b8 	.word	0x200003b8
 8011044:	20000414 	.word	0x20000414

08011048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f103 0208 	add.w	r2, r3, #8
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f04f 32ff 	mov.w	r2, #4294967295
 8011060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f103 0208 	add.w	r2, r3, #8
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f103 0208 	add.w	r2, r3, #8
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801107c:	bf00      	nop
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr

080110a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110a2:	b480      	push	{r7}
 80110a4:	b085      	sub	sp, #20
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
 80110aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	689a      	ldr	r2, [r3, #8]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
}
 80110de:	bf00      	nop
 80110e0:	3714      	adds	r7, #20
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110ea:	b480      	push	{r7}
 80110ec:	b085      	sub	sp, #20
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011100:	d103      	bne.n	801110a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	e00c      	b.n	8011124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	3308      	adds	r3, #8
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e002      	b.n	8011118 <vListInsert+0x2e>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	68ba      	ldr	r2, [r7, #8]
 8011120:	429a      	cmp	r2, r3
 8011122:	d2f6      	bcs.n	8011112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	683a      	ldr	r2, [r7, #0]
 8011132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	601a      	str	r2, [r3, #0]
}
 8011150:	bf00      	nop
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	691b      	ldr	r3, [r3, #16]
 8011168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	6892      	ldr	r2, [r2, #8]
 8011172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	6852      	ldr	r2, [r2, #4]
 801117c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	429a      	cmp	r2, r3
 8011186:	d103      	bne.n	8011190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	689a      	ldr	r2, [r3, #8]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	1e5a      	subs	r2, r3, #1
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3714      	adds	r7, #20
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10a      	bne.n	80111da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80111c4:	f04f 0310 	mov.w	r3, #16
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80111d6:	bf00      	nop
 80111d8:	e7fe      	b.n	80111d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80111da:	f002 fbbb 	bl	8013954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681a      	ldr	r2, [r3, #0]
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111e6:	68f9      	ldr	r1, [r7, #12]
 80111e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111ea:	fb01 f303 	mul.w	r3, r1, r3
 80111ee:	441a      	add	r2, r3
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2200      	movs	r2, #0
 80111f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801120a:	3b01      	subs	r3, #1
 801120c:	68f9      	ldr	r1, [r7, #12]
 801120e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011210:	fb01 f303 	mul.w	r3, r1, r3
 8011214:	441a      	add	r2, r3
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	22ff      	movs	r2, #255	; 0xff
 801121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	22ff      	movs	r2, #255	; 0xff
 8011226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d114      	bne.n	801125a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d01a      	beq.n	801126e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	3310      	adds	r3, #16
 801123c:	4618      	mov	r0, r3
 801123e:	f001 fb71 	bl	8012924 <xTaskRemoveFromEventList>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d012      	beq.n	801126e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011248:	4b0c      	ldr	r3, [pc, #48]	; (801127c <xQueueGenericReset+0xcc>)
 801124a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	e009      	b.n	801126e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	3310      	adds	r3, #16
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff fef2 	bl	8011048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3324      	adds	r3, #36	; 0x24
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff feed 	bl	8011048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801126e:	f002 fba1 	bl	80139b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011272:	2301      	movs	r3, #1
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	e000ed04 	.word	0xe000ed04

08011280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011280:	b580      	push	{r7, lr}
 8011282:	b08e      	sub	sp, #56	; 0x38
 8011284:	af02      	add	r7, sp, #8
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	607a      	str	r2, [r7, #4]
 801128c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10a      	bne.n	80112aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011294:	f04f 0310 	mov.w	r3, #16
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80112a6:	bf00      	nop
 80112a8:	e7fe      	b.n	80112a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d10a      	bne.n	80112c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80112b0:	f04f 0310 	mov.w	r3, #16
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80112c2:	bf00      	nop
 80112c4:	e7fe      	b.n	80112c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d002      	beq.n	80112d2 <xQueueGenericCreateStatic+0x52>
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d001      	beq.n	80112d6 <xQueueGenericCreateStatic+0x56>
 80112d2:	2301      	movs	r3, #1
 80112d4:	e000      	b.n	80112d8 <xQueueGenericCreateStatic+0x58>
 80112d6:	2300      	movs	r3, #0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d10a      	bne.n	80112f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80112dc:	f04f 0310 	mov.w	r3, #16
 80112e0:	f383 8811 	msr	BASEPRI, r3
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	623b      	str	r3, [r7, #32]
}
 80112ee:	bf00      	nop
 80112f0:	e7fe      	b.n	80112f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <xQueueGenericCreateStatic+0x7e>
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <xQueueGenericCreateStatic+0x82>
 80112fe:	2301      	movs	r3, #1
 8011300:	e000      	b.n	8011304 <xQueueGenericCreateStatic+0x84>
 8011302:	2300      	movs	r3, #0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d10a      	bne.n	801131e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011308:	f04f 0310 	mov.w	r3, #16
 801130c:	f383 8811 	msr	BASEPRI, r3
 8011310:	f3bf 8f6f 	isb	sy
 8011314:	f3bf 8f4f 	dsb	sy
 8011318:	61fb      	str	r3, [r7, #28]
}
 801131a:	bf00      	nop
 801131c:	e7fe      	b.n	801131c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801131e:	2350      	movs	r3, #80	; 0x50
 8011320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	2b50      	cmp	r3, #80	; 0x50
 8011326:	d00a      	beq.n	801133e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011328:	f04f 0310 	mov.w	r3, #16
 801132c:	f383 8811 	msr	BASEPRI, r3
 8011330:	f3bf 8f6f 	isb	sy
 8011334:	f3bf 8f4f 	dsb	sy
 8011338:	61bb      	str	r3, [r7, #24]
}
 801133a:	bf00      	nop
 801133c:	e7fe      	b.n	801133c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801133e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00d      	beq.n	8011366 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801134a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134c:	2201      	movs	r2, #1
 801134e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011352:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	4613      	mov	r3, r2
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	68b9      	ldr	r1, [r7, #8]
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f000 f845 	bl	80113f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011368:	4618      	mov	r0, r3
 801136a:	3730      	adds	r7, #48	; 0x30
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011370:	b580      	push	{r7, lr}
 8011372:	b08a      	sub	sp, #40	; 0x28
 8011374:	af02      	add	r7, sp, #8
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	4613      	mov	r3, r2
 801137c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10a      	bne.n	801139a <xQueueGenericCreate+0x2a>
	__asm volatile
 8011384:	f04f 0310 	mov.w	r3, #16
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	613b      	str	r3, [r7, #16]
}
 8011396:	bf00      	nop
 8011398:	e7fe      	b.n	8011398 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80113a0:	2300      	movs	r3, #0
 80113a2:	61fb      	str	r3, [r7, #28]
 80113a4:	e004      	b.n	80113b0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	68ba      	ldr	r2, [r7, #8]
 80113aa:	fb02 f303 	mul.w	r3, r2, r3
 80113ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113b0:	69fb      	ldr	r3, [r7, #28]
 80113b2:	3350      	adds	r3, #80	; 0x50
 80113b4:	4618      	mov	r0, r3
 80113b6:	f002 fbef 	bl	8013b98 <pvPortMalloc>
 80113ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d011      	beq.n	80113e6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	3350      	adds	r3, #80	; 0x50
 80113ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	2200      	movs	r2, #0
 80113d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113d4:	79fa      	ldrb	r2, [r7, #7]
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	4613      	mov	r3, r2
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f000 f805 	bl	80113f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80113e6:	69bb      	ldr	r3, [r7, #24]
	}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3720      	adds	r7, #32
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
 80113fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d103      	bne.n	801140c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	69ba      	ldr	r2, [r7, #24]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	e002      	b.n	8011412 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	68fa      	ldr	r2, [r7, #12]
 8011416:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801141e:	2101      	movs	r1, #1
 8011420:	69b8      	ldr	r0, [r7, #24]
 8011422:	f7ff fec5 	bl	80111b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	78fa      	ldrb	r2, [r7, #3]
 801142a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801142e:	bf00      	nop
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08e      	sub	sp, #56	; 0x38
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011446:	2300      	movs	r3, #0
 8011448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	2b00      	cmp	r3, #0
 8011452:	d10a      	bne.n	801146a <xQueueGenericSend+0x32>
	__asm volatile
 8011454:	f04f 0310 	mov.w	r3, #16
 8011458:	f383 8811 	msr	BASEPRI, r3
 801145c:	f3bf 8f6f 	isb	sy
 8011460:	f3bf 8f4f 	dsb	sy
 8011464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011466:	bf00      	nop
 8011468:	e7fe      	b.n	8011468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d103      	bne.n	8011478 <xQueueGenericSend+0x40>
 8011470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011474:	2b00      	cmp	r3, #0
 8011476:	d101      	bne.n	801147c <xQueueGenericSend+0x44>
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <xQueueGenericSend+0x46>
 801147c:	2300      	movs	r3, #0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d10a      	bne.n	8011498 <xQueueGenericSend+0x60>
	__asm volatile
 8011482:	f04f 0310 	mov.w	r3, #16
 8011486:	f383 8811 	msr	BASEPRI, r3
 801148a:	f3bf 8f6f 	isb	sy
 801148e:	f3bf 8f4f 	dsb	sy
 8011492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011494:	bf00      	nop
 8011496:	e7fe      	b.n	8011496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2b02      	cmp	r3, #2
 801149c:	d103      	bne.n	80114a6 <xQueueGenericSend+0x6e>
 801149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d101      	bne.n	80114aa <xQueueGenericSend+0x72>
 80114a6:	2301      	movs	r3, #1
 80114a8:	e000      	b.n	80114ac <xQueueGenericSend+0x74>
 80114aa:	2300      	movs	r3, #0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10a      	bne.n	80114c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80114b0:	f04f 0310 	mov.w	r3, #16
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	623b      	str	r3, [r7, #32]
}
 80114c2:	bf00      	nop
 80114c4:	e7fe      	b.n	80114c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114c6:	f001 fbeb 	bl	8012ca0 <xTaskGetSchedulerState>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d102      	bne.n	80114d6 <xQueueGenericSend+0x9e>
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d101      	bne.n	80114da <xQueueGenericSend+0xa2>
 80114d6:	2301      	movs	r3, #1
 80114d8:	e000      	b.n	80114dc <xQueueGenericSend+0xa4>
 80114da:	2300      	movs	r3, #0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10a      	bne.n	80114f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80114e0:	f04f 0310 	mov.w	r3, #16
 80114e4:	f383 8811 	msr	BASEPRI, r3
 80114e8:	f3bf 8f6f 	isb	sy
 80114ec:	f3bf 8f4f 	dsb	sy
 80114f0:	61fb      	str	r3, [r7, #28]
}
 80114f2:	bf00      	nop
 80114f4:	e7fe      	b.n	80114f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114f6:	f002 fa2d 	bl	8013954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011502:	429a      	cmp	r2, r3
 8011504:	d302      	bcc.n	801150c <xQueueGenericSend+0xd4>
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	2b02      	cmp	r3, #2
 801150a:	d129      	bne.n	8011560 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801150c:	683a      	ldr	r2, [r7, #0]
 801150e:	68b9      	ldr	r1, [r7, #8]
 8011510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011512:	f000 fc39 	bl	8011d88 <prvCopyDataToQueue>
 8011516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	d010      	beq.n	8011542 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	3324      	adds	r3, #36	; 0x24
 8011524:	4618      	mov	r0, r3
 8011526:	f001 f9fd 	bl	8012924 <xTaskRemoveFromEventList>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d013      	beq.n	8011558 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011530:	4b3f      	ldr	r3, [pc, #252]	; (8011630 <xQueueGenericSend+0x1f8>)
 8011532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011536:	601a      	str	r2, [r3, #0]
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	e00a      	b.n	8011558 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d007      	beq.n	8011558 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011548:	4b39      	ldr	r3, [pc, #228]	; (8011630 <xQueueGenericSend+0x1f8>)
 801154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801154e:	601a      	str	r2, [r3, #0]
 8011550:	f3bf 8f4f 	dsb	sy
 8011554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011558:	f002 fa2c 	bl	80139b4 <vPortExitCritical>
				return pdPASS;
 801155c:	2301      	movs	r3, #1
 801155e:	e063      	b.n	8011628 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d103      	bne.n	801156e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011566:	f002 fa25 	bl	80139b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801156a:	2300      	movs	r3, #0
 801156c:	e05c      	b.n	8011628 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011570:	2b00      	cmp	r3, #0
 8011572:	d106      	bne.n	8011582 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011574:	f107 0314 	add.w	r3, r7, #20
 8011578:	4618      	mov	r0, r3
 801157a:	f001 fa37 	bl	80129ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801157e:	2301      	movs	r3, #1
 8011580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011582:	f002 fa17 	bl	80139b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011586:	f000 ffa9 	bl	80124dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801158a:	f002 f9e3 	bl	8013954 <vPortEnterCritical>
 801158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011594:	b25b      	sxtb	r3, r3
 8011596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801159a:	d103      	bne.n	80115a4 <xQueueGenericSend+0x16c>
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115aa:	b25b      	sxtb	r3, r3
 80115ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b0:	d103      	bne.n	80115ba <xQueueGenericSend+0x182>
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	2200      	movs	r2, #0
 80115b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115ba:	f002 f9fb 	bl	80139b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115be:	1d3a      	adds	r2, r7, #4
 80115c0:	f107 0314 	add.w	r3, r7, #20
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f001 fa26 	bl	8012a18 <xTaskCheckForTimeOut>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d124      	bne.n	801161c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80115d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115d4:	f000 fcd0 	bl	8011f78 <prvIsQueueFull>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d018      	beq.n	8011610 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	3310      	adds	r3, #16
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f001 f94c 	bl	8012884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80115ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ee:	f000 fc5b 	bl	8011ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80115f2:	f000 ff81 	bl	80124f8 <xTaskResumeAll>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f47f af7c 	bne.w	80114f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80115fe:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <xQueueGenericSend+0x1f8>)
 8011600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	e772      	b.n	80114f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011612:	f000 fc49 	bl	8011ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011616:	f000 ff6f 	bl	80124f8 <xTaskResumeAll>
 801161a:	e76c      	b.n	80114f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801161c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801161e:	f000 fc43 	bl	8011ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011622:	f000 ff69 	bl	80124f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011628:	4618      	mov	r0, r3
 801162a:	3738      	adds	r7, #56	; 0x38
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	e000ed04 	.word	0xe000ed04

08011634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b08e      	sub	sp, #56	; 0x38
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
 8011640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	2b00      	cmp	r3, #0
 801164a:	d10a      	bne.n	8011662 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801164c:	f04f 0310 	mov.w	r3, #16
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801165e:	bf00      	nop
 8011660:	e7fe      	b.n	8011660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d103      	bne.n	8011670 <xQueueGenericSendFromISR+0x3c>
 8011668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <xQueueGenericSendFromISR+0x40>
 8011670:	2301      	movs	r3, #1
 8011672:	e000      	b.n	8011676 <xQueueGenericSendFromISR+0x42>
 8011674:	2300      	movs	r3, #0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10a      	bne.n	8011690 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801167a:	f04f 0310 	mov.w	r3, #16
 801167e:	f383 8811 	msr	BASEPRI, r3
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	f3bf 8f4f 	dsb	sy
 801168a:	623b      	str	r3, [r7, #32]
}
 801168c:	bf00      	nop
 801168e:	e7fe      	b.n	801168e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	2b02      	cmp	r3, #2
 8011694:	d103      	bne.n	801169e <xQueueGenericSendFromISR+0x6a>
 8011696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801169a:	2b01      	cmp	r3, #1
 801169c:	d101      	bne.n	80116a2 <xQueueGenericSendFromISR+0x6e>
 801169e:	2301      	movs	r3, #1
 80116a0:	e000      	b.n	80116a4 <xQueueGenericSendFromISR+0x70>
 80116a2:	2300      	movs	r3, #0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10a      	bne.n	80116be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80116a8:	f04f 0310 	mov.w	r3, #16
 80116ac:	f383 8811 	msr	BASEPRI, r3
 80116b0:	f3bf 8f6f 	isb	sy
 80116b4:	f3bf 8f4f 	dsb	sy
 80116b8:	61fb      	str	r3, [r7, #28]
}
 80116ba:	bf00      	nop
 80116bc:	e7fe      	b.n	80116bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116be:	f002 fa2b 	bl	8013b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80116c2:	f3ef 8211 	mrs	r2, BASEPRI
 80116c6:	f04f 0310 	mov.w	r3, #16
 80116ca:	f383 8811 	msr	BASEPRI, r3
 80116ce:	f3bf 8f6f 	isb	sy
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	61ba      	str	r2, [r7, #24]
 80116d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80116da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d302      	bcc.n	80116f0 <xQueueGenericSendFromISR+0xbc>
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	d12c      	bne.n	801174a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	68b9      	ldr	r1, [r7, #8]
 80116fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011700:	f000 fb42 	bl	8011d88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011704:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801170c:	d112      	bne.n	8011734 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011712:	2b00      	cmp	r3, #0
 8011714:	d016      	beq.n	8011744 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011718:	3324      	adds	r3, #36	; 0x24
 801171a:	4618      	mov	r0, r3
 801171c:	f001 f902 	bl	8012924 <xTaskRemoveFromEventList>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00e      	beq.n	8011744 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d00b      	beq.n	8011744 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	e007      	b.n	8011744 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011738:	3301      	adds	r3, #1
 801173a:	b2db      	uxtb	r3, r3
 801173c:	b25a      	sxtb	r2, r3
 801173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011744:	2301      	movs	r3, #1
 8011746:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011748:	e001      	b.n	801174e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801174a:	2300      	movs	r3, #0
 801174c:	637b      	str	r3, [r7, #52]	; 0x34
 801174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011750:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011758:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801175a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801175c:	4618      	mov	r0, r3
 801175e:	3738      	adds	r7, #56	; 0x38
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08e      	sub	sp, #56	; 0x38
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10a      	bne.n	801178e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011778:	f04f 0310 	mov.w	r3, #16
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	623b      	str	r3, [r7, #32]
}
 801178a:	bf00      	nop
 801178c:	e7fe      	b.n	801178c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00a      	beq.n	80117ac <xQueueGiveFromISR+0x48>
	__asm volatile
 8011796:	f04f 0310 	mov.w	r3, #16
 801179a:	f383 8811 	msr	BASEPRI, r3
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f3bf 8f4f 	dsb	sy
 80117a6:	61fb      	str	r3, [r7, #28]
}
 80117a8:	bf00      	nop
 80117aa:	e7fe      	b.n	80117aa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d103      	bne.n	80117bc <xQueueGiveFromISR+0x58>
 80117b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d101      	bne.n	80117c0 <xQueueGiveFromISR+0x5c>
 80117bc:	2301      	movs	r3, #1
 80117be:	e000      	b.n	80117c2 <xQueueGiveFromISR+0x5e>
 80117c0:	2300      	movs	r3, #0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10a      	bne.n	80117dc <xQueueGiveFromISR+0x78>
	__asm volatile
 80117c6:	f04f 0310 	mov.w	r3, #16
 80117ca:	f383 8811 	msr	BASEPRI, r3
 80117ce:	f3bf 8f6f 	isb	sy
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	61bb      	str	r3, [r7, #24]
}
 80117d8:	bf00      	nop
 80117da:	e7fe      	b.n	80117da <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117dc:	f002 f99c 	bl	8013b18 <vPortValidateInterruptPriority>
	__asm volatile
 80117e0:	f3ef 8211 	mrs	r2, BASEPRI
 80117e4:	f04f 0310 	mov.w	r3, #16
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	617a      	str	r2, [r7, #20]
 80117f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80117f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011800:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011808:	429a      	cmp	r2, r3
 801180a:	d22b      	bcs.n	8011864 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011818:	1c5a      	adds	r2, r3, #1
 801181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801181e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011826:	d112      	bne.n	801184e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182c:	2b00      	cmp	r3, #0
 801182e:	d016      	beq.n	801185e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	3324      	adds	r3, #36	; 0x24
 8011834:	4618      	mov	r0, r3
 8011836:	f001 f875 	bl	8012924 <xTaskRemoveFromEventList>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00e      	beq.n	801185e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00b      	beq.n	801185e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2201      	movs	r2, #1
 801184a:	601a      	str	r2, [r3, #0]
 801184c:	e007      	b.n	801185e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801184e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011852:	3301      	adds	r3, #1
 8011854:	b2db      	uxtb	r3, r3
 8011856:	b25a      	sxtb	r2, r3
 8011858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801185e:	2301      	movs	r3, #1
 8011860:	637b      	str	r3, [r7, #52]	; 0x34
 8011862:	e001      	b.n	8011868 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011864:	2300      	movs	r3, #0
 8011866:	637b      	str	r3, [r7, #52]	; 0x34
 8011868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f383 8811 	msr	BASEPRI, r3
}
 8011872:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011876:	4618      	mov	r0, r3
 8011878:	3738      	adds	r7, #56	; 0x38
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
	...

08011880 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b08c      	sub	sp, #48	; 0x30
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801188c:	2300      	movs	r3, #0
 801188e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011896:	2b00      	cmp	r3, #0
 8011898:	d10a      	bne.n	80118b0 <xQueueReceive+0x30>
	__asm volatile
 801189a:	f04f 0310 	mov.w	r3, #16
 801189e:	f383 8811 	msr	BASEPRI, r3
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	f3bf 8f4f 	dsb	sy
 80118aa:	623b      	str	r3, [r7, #32]
}
 80118ac:	bf00      	nop
 80118ae:	e7fe      	b.n	80118ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d103      	bne.n	80118be <xQueueReceive+0x3e>
 80118b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d101      	bne.n	80118c2 <xQueueReceive+0x42>
 80118be:	2301      	movs	r3, #1
 80118c0:	e000      	b.n	80118c4 <xQueueReceive+0x44>
 80118c2:	2300      	movs	r3, #0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d10a      	bne.n	80118de <xQueueReceive+0x5e>
	__asm volatile
 80118c8:	f04f 0310 	mov.w	r3, #16
 80118cc:	f383 8811 	msr	BASEPRI, r3
 80118d0:	f3bf 8f6f 	isb	sy
 80118d4:	f3bf 8f4f 	dsb	sy
 80118d8:	61fb      	str	r3, [r7, #28]
}
 80118da:	bf00      	nop
 80118dc:	e7fe      	b.n	80118dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118de:	f001 f9df 	bl	8012ca0 <xTaskGetSchedulerState>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d102      	bne.n	80118ee <xQueueReceive+0x6e>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d101      	bne.n	80118f2 <xQueueReceive+0x72>
 80118ee:	2301      	movs	r3, #1
 80118f0:	e000      	b.n	80118f4 <xQueueReceive+0x74>
 80118f2:	2300      	movs	r3, #0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10a      	bne.n	801190e <xQueueReceive+0x8e>
	__asm volatile
 80118f8:	f04f 0310 	mov.w	r3, #16
 80118fc:	f383 8811 	msr	BASEPRI, r3
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	61bb      	str	r3, [r7, #24]
}
 801190a:	bf00      	nop
 801190c:	e7fe      	b.n	801190c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801190e:	f002 f821 	bl	8013954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011916:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	2b00      	cmp	r3, #0
 801191c:	d01f      	beq.n	801195e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801191e:	68b9      	ldr	r1, [r7, #8]
 8011920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011922:	f000 fa9b 	bl	8011e5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011928:	1e5a      	subs	r2, r3, #1
 801192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801192c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00f      	beq.n	8011956 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011938:	3310      	adds	r3, #16
 801193a:	4618      	mov	r0, r3
 801193c:	f000 fff2 	bl	8012924 <xTaskRemoveFromEventList>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d007      	beq.n	8011956 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011946:	4b3d      	ldr	r3, [pc, #244]	; (8011a3c <xQueueReceive+0x1bc>)
 8011948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011956:	f002 f82d 	bl	80139b4 <vPortExitCritical>
				return pdPASS;
 801195a:	2301      	movs	r3, #1
 801195c:	e069      	b.n	8011a32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d103      	bne.n	801196c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011964:	f002 f826 	bl	80139b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011968:	2300      	movs	r3, #0
 801196a:	e062      	b.n	8011a32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	2b00      	cmp	r3, #0
 8011970:	d106      	bne.n	8011980 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011972:	f107 0310 	add.w	r3, r7, #16
 8011976:	4618      	mov	r0, r3
 8011978:	f001 f838 	bl	80129ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801197c:	2301      	movs	r3, #1
 801197e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011980:	f002 f818 	bl	80139b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011984:	f000 fdaa 	bl	80124dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011988:	f001 ffe4 	bl	8013954 <vPortEnterCritical>
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011992:	b25b      	sxtb	r3, r3
 8011994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011998:	d103      	bne.n	80119a2 <xQueueReceive+0x122>
 801199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199c:	2200      	movs	r2, #0
 801199e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119a8:	b25b      	sxtb	r3, r3
 80119aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ae:	d103      	bne.n	80119b8 <xQueueReceive+0x138>
 80119b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119b8:	f001 fffc 	bl	80139b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119bc:	1d3a      	adds	r2, r7, #4
 80119be:	f107 0310 	add.w	r3, r7, #16
 80119c2:	4611      	mov	r1, r2
 80119c4:	4618      	mov	r0, r3
 80119c6:	f001 f827 	bl	8012a18 <xTaskCheckForTimeOut>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d123      	bne.n	8011a18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119d2:	f000 fabb 	bl	8011f4c <prvIsQueueEmpty>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d017      	beq.n	8011a0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80119dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119de:	3324      	adds	r3, #36	; 0x24
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	4611      	mov	r1, r2
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 ff4d 	bl	8012884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80119ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119ec:	f000 fa5c 	bl	8011ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119f0:	f000 fd82 	bl	80124f8 <xTaskResumeAll>
 80119f4:	4603      	mov	r3, r0
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d189      	bne.n	801190e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80119fa:	4b10      	ldr	r3, [pc, #64]	; (8011a3c <xQueueReceive+0x1bc>)
 80119fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a00:	601a      	str	r2, [r3, #0]
 8011a02:	f3bf 8f4f 	dsb	sy
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	e780      	b.n	801190e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a0e:	f000 fa4b 	bl	8011ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a12:	f000 fd71 	bl	80124f8 <xTaskResumeAll>
 8011a16:	e77a      	b.n	801190e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a1a:	f000 fa45 	bl	8011ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a1e:	f000 fd6b 	bl	80124f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a24:	f000 fa92 	bl	8011f4c <prvIsQueueEmpty>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f43f af6f 	beq.w	801190e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3730      	adds	r7, #48	; 0x30
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
 8011a3a:	bf00      	nop
 8011a3c:	e000ed04 	.word	0xe000ed04

08011a40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08e      	sub	sp, #56	; 0x38
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
 8011a48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a52:	2300      	movs	r3, #0
 8011a54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d10a      	bne.n	8011a72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011a5c:	f04f 0310 	mov.w	r3, #16
 8011a60:	f383 8811 	msr	BASEPRI, r3
 8011a64:	f3bf 8f6f 	isb	sy
 8011a68:	f3bf 8f4f 	dsb	sy
 8011a6c:	623b      	str	r3, [r7, #32]
}
 8011a6e:	bf00      	nop
 8011a70:	e7fe      	b.n	8011a70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011a7a:	f04f 0310 	mov.w	r3, #16
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	61fb      	str	r3, [r7, #28]
}
 8011a8c:	bf00      	nop
 8011a8e:	e7fe      	b.n	8011a8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a90:	f001 f906 	bl	8012ca0 <xTaskGetSchedulerState>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <xQueueSemaphoreTake+0x60>
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d101      	bne.n	8011aa4 <xQueueSemaphoreTake+0x64>
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e000      	b.n	8011aa6 <xQueueSemaphoreTake+0x66>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d10a      	bne.n	8011ac0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011aaa:	f04f 0310 	mov.w	r3, #16
 8011aae:	f383 8811 	msr	BASEPRI, r3
 8011ab2:	f3bf 8f6f 	isb	sy
 8011ab6:	f3bf 8f4f 	dsb	sy
 8011aba:	61bb      	str	r3, [r7, #24]
}
 8011abc:	bf00      	nop
 8011abe:	e7fe      	b.n	8011abe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ac0:	f001 ff48 	bl	8013954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ac8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d024      	beq.n	8011b1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad2:	1e5a      	subs	r2, r3, #1
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d104      	bne.n	8011aea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011ae0:	f001 fa54 	bl	8012f8c <pvTaskIncrementMutexHeldCount>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00f      	beq.n	8011b12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	3310      	adds	r3, #16
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 ff14 	bl	8012924 <xTaskRemoveFromEventList>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d007      	beq.n	8011b12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b02:	4b54      	ldr	r3, [pc, #336]	; (8011c54 <xQueueSemaphoreTake+0x214>)
 8011b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	f3bf 8f4f 	dsb	sy
 8011b0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b12:	f001 ff4f 	bl	80139b4 <vPortExitCritical>
				return pdPASS;
 8011b16:	2301      	movs	r3, #1
 8011b18:	e097      	b.n	8011c4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d111      	bne.n	8011b44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00a      	beq.n	8011b3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011b26:	f04f 0310 	mov.w	r3, #16
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	617b      	str	r3, [r7, #20]
}
 8011b38:	bf00      	nop
 8011b3a:	e7fe      	b.n	8011b3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b3c:	f001 ff3a 	bl	80139b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b40:	2300      	movs	r3, #0
 8011b42:	e082      	b.n	8011c4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d106      	bne.n	8011b58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b4a:	f107 030c 	add.w	r3, r7, #12
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f000 ff4c 	bl	80129ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b54:	2301      	movs	r3, #1
 8011b56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b58:	f001 ff2c 	bl	80139b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b5c:	f000 fcbe 	bl	80124dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b60:	f001 fef8 	bl	8013954 <vPortEnterCritical>
 8011b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b6a:	b25b      	sxtb	r3, r3
 8011b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b70:	d103      	bne.n	8011b7a <xQueueSemaphoreTake+0x13a>
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b80:	b25b      	sxtb	r3, r3
 8011b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b86:	d103      	bne.n	8011b90 <xQueueSemaphoreTake+0x150>
 8011b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b90:	f001 ff10 	bl	80139b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b94:	463a      	mov	r2, r7
 8011b96:	f107 030c 	add.w	r3, r7, #12
 8011b9a:	4611      	mov	r1, r2
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 ff3b 	bl	8012a18 <xTaskCheckForTimeOut>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d132      	bne.n	8011c0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011baa:	f000 f9cf 	bl	8011f4c <prvIsQueueEmpty>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d026      	beq.n	8011c02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d109      	bne.n	8011bd0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011bbc:	f001 feca 	bl	8013954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f001 f889 	bl	8012cdc <xTaskPriorityInherit>
 8011bca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011bcc:	f001 fef2 	bl	80139b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd2:	3324      	adds	r3, #36	; 0x24
 8011bd4:	683a      	ldr	r2, [r7, #0]
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f000 fe53 	bl	8012884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011be0:	f000 f962 	bl	8011ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011be4:	f000 fc88 	bl	80124f8 <xTaskResumeAll>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f47f af68 	bne.w	8011ac0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011bf0:	4b18      	ldr	r3, [pc, #96]	; (8011c54 <xQueueSemaphoreTake+0x214>)
 8011bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf6:	601a      	str	r2, [r3, #0]
 8011bf8:	f3bf 8f4f 	dsb	sy
 8011bfc:	f3bf 8f6f 	isb	sy
 8011c00:	e75e      	b.n	8011ac0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c04:	f000 f950 	bl	8011ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c08:	f000 fc76 	bl	80124f8 <xTaskResumeAll>
 8011c0c:	e758      	b.n	8011ac0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c10:	f000 f94a 	bl	8011ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c14:	f000 fc70 	bl	80124f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c1a:	f000 f997 	bl	8011f4c <prvIsQueueEmpty>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f43f af4d 	beq.w	8011ac0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d00d      	beq.n	8011c48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011c2c:	f001 fe92 	bl	8013954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c32:	f000 f891 	bl	8011d58 <prvGetDisinheritPriorityAfterTimeout>
 8011c36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f001 f922 	bl	8012e88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c44:	f001 feb6 	bl	80139b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3738      	adds	r7, #56	; 0x38
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	e000ed04 	.word	0xe000ed04

08011c58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08e      	sub	sp, #56	; 0x38
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d10a      	bne.n	8011c84 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011c6e:	f04f 0310 	mov.w	r3, #16
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	623b      	str	r3, [r7, #32]
}
 8011c80:	bf00      	nop
 8011c82:	e7fe      	b.n	8011c82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d103      	bne.n	8011c92 <xQueueReceiveFromISR+0x3a>
 8011c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d101      	bne.n	8011c96 <xQueueReceiveFromISR+0x3e>
 8011c92:	2301      	movs	r3, #1
 8011c94:	e000      	b.n	8011c98 <xQueueReceiveFromISR+0x40>
 8011c96:	2300      	movs	r3, #0
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10a      	bne.n	8011cb2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011c9c:	f04f 0310 	mov.w	r3, #16
 8011ca0:	f383 8811 	msr	BASEPRI, r3
 8011ca4:	f3bf 8f6f 	isb	sy
 8011ca8:	f3bf 8f4f 	dsb	sy
 8011cac:	61fb      	str	r3, [r7, #28]
}
 8011cae:	bf00      	nop
 8011cb0:	e7fe      	b.n	8011cb0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cb2:	f001 ff31 	bl	8013b18 <vPortValidateInterruptPriority>
	__asm volatile
 8011cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8011cba:	f04f 0310 	mov.w	r3, #16
 8011cbe:	f383 8811 	msr	BASEPRI, r3
 8011cc2:	f3bf 8f6f 	isb	sy
 8011cc6:	f3bf 8f4f 	dsb	sy
 8011cca:	61ba      	str	r2, [r7, #24]
 8011ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d02f      	beq.n	8011d3e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cec:	f000 f8b6 	bl	8011e5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf2:	1e5a      	subs	r2, r3, #1
 8011cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d00:	d112      	bne.n	8011d28 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d016      	beq.n	8011d38 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0c:	3310      	adds	r3, #16
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f000 fe08 	bl	8012924 <xTaskRemoveFromEventList>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00e      	beq.n	8011d38 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2201      	movs	r2, #1
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	e007      	b.n	8011d38 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	b25a      	sxtb	r2, r3
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8011d3c:	e001      	b.n	8011d42 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	637b      	str	r3, [r7, #52]	; 0x34
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f383 8811 	msr	BASEPRI, r3
}
 8011d4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3738      	adds	r7, #56	; 0x38
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d006      	beq.n	8011d76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011d72:	60fb      	str	r3, [r7, #12]
 8011d74:	e001      	b.n	8011d7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011d76:	2300      	movs	r3, #0
 8011d78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
	}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3714      	adds	r7, #20
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr

08011d88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011d94:	2300      	movs	r3, #0
 8011d96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d10d      	bne.n	8011dc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d14d      	bne.n	8011e4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	689b      	ldr	r3, [r3, #8]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fffa 	bl	8012dac <xTaskPriorityDisinherit>
 8011db8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	609a      	str	r2, [r3, #8]
 8011dc0:	e043      	b.n	8011e4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d119      	bne.n	8011dfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6858      	ldr	r0, [r3, #4]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	68b9      	ldr	r1, [r7, #8]
 8011dd4:	f002 fc22 	bl	801461c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	685a      	ldr	r2, [r3, #4]
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011de0:	441a      	add	r2, r3
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	685a      	ldr	r2, [r3, #4]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d32b      	bcc.n	8011e4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	605a      	str	r2, [r3, #4]
 8011dfa:	e026      	b.n	8011e4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	68d8      	ldr	r0, [r3, #12]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e04:	461a      	mov	r2, r3
 8011e06:	68b9      	ldr	r1, [r7, #8]
 8011e08:	f002 fc08 	bl	801461c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	68da      	ldr	r2, [r3, #12]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e14:	425b      	negs	r3, r3
 8011e16:	441a      	add	r2, r3
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	68da      	ldr	r2, [r3, #12]
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d207      	bcs.n	8011e38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	689a      	ldr	r2, [r3, #8]
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e30:	425b      	negs	r3, r3
 8011e32:	441a      	add	r2, r3
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	d105      	bne.n	8011e4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	1c5a      	adds	r2, r3, #1
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011e52:	697b      	ldr	r3, [r7, #20]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3718      	adds	r7, #24
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d018      	beq.n	8011ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68da      	ldr	r2, [r3, #12]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e76:	441a      	add	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	68da      	ldr	r2, [r3, #12]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d303      	bcc.n	8011e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68d9      	ldr	r1, [r3, #12]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e98:	461a      	mov	r2, r3
 8011e9a:	6838      	ldr	r0, [r7, #0]
 8011e9c:	f002 fbbe 	bl	801461c <memcpy>
	}
}
 8011ea0:	bf00      	nop
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011eb0:	f001 fd50 	bl	8013954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ebc:	e011      	b.n	8011ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d012      	beq.n	8011eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	3324      	adds	r3, #36	; 0x24
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 fd2a 	bl	8012924 <xTaskRemoveFromEventList>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011ed6:	f000 fe01 	bl	8012adc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011eda:	7bfb      	ldrb	r3, [r7, #15]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	dce9      	bgt.n	8011ebe <prvUnlockQueue+0x16>
 8011eea:	e000      	b.n	8011eee <prvUnlockQueue+0x46>
					break;
 8011eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	22ff      	movs	r2, #255	; 0xff
 8011ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011ef6:	f001 fd5d 	bl	80139b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011efa:	f001 fd2b 	bl	8013954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f06:	e011      	b.n	8011f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d012      	beq.n	8011f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3310      	adds	r3, #16
 8011f14:	4618      	mov	r0, r3
 8011f16:	f000 fd05 	bl	8012924 <xTaskRemoveFromEventList>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d001      	beq.n	8011f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f20:	f000 fddc 	bl	8012adc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f24:	7bbb      	ldrb	r3, [r7, #14]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	dce9      	bgt.n	8011f08 <prvUnlockQueue+0x60>
 8011f34:	e000      	b.n	8011f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	22ff      	movs	r2, #255	; 0xff
 8011f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011f40:	f001 fd38 	bl	80139b4 <vPortExitCritical>
}
 8011f44:	bf00      	nop
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f54:	f001 fcfe 	bl	8013954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011f60:	2301      	movs	r3, #1
 8011f62:	60fb      	str	r3, [r7, #12]
 8011f64:	e001      	b.n	8011f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011f66:	2300      	movs	r3, #0
 8011f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f6a:	f001 fd23 	bl	80139b4 <vPortExitCritical>

	return xReturn;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f80:	f001 fce8 	bl	8013954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d102      	bne.n	8011f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011f90:	2301      	movs	r3, #1
 8011f92:	60fb      	str	r3, [r7, #12]
 8011f94:	e001      	b.n	8011f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011f96:	2300      	movs	r3, #0
 8011f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f9a:	f001 fd0b 	bl	80139b4 <vPortExitCritical>

	return xReturn;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011fa8:	b480      	push	{r7}
 8011faa:	b085      	sub	sp, #20
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60fb      	str	r3, [r7, #12]
 8011fb6:	e014      	b.n	8011fe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011fb8:	4a0f      	ldr	r2, [pc, #60]	; (8011ff8 <vQueueAddToRegistry+0x50>)
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10b      	bne.n	8011fdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011fc4:	490c      	ldr	r1, [pc, #48]	; (8011ff8 <vQueueAddToRegistry+0x50>)
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	683a      	ldr	r2, [r7, #0]
 8011fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011fce:	4a0a      	ldr	r2, [pc, #40]	; (8011ff8 <vQueueAddToRegistry+0x50>)
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	00db      	lsls	r3, r3, #3
 8011fd4:	4413      	add	r3, r2
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011fda:	e006      	b.n	8011fea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b07      	cmp	r3, #7
 8011fe6:	d9e7      	bls.n	8011fb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011fe8:	bf00      	nop
 8011fea:	bf00      	nop
 8011fec:	3714      	adds	r7, #20
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop
 8011ff8:	200053b0 	.word	0x200053b0

08011ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b086      	sub	sp, #24
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801200c:	f001 fca2 	bl	8013954 <vPortEnterCritical>
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012016:	b25b      	sxtb	r3, r3
 8012018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201c:	d103      	bne.n	8012026 <vQueueWaitForMessageRestricted+0x2a>
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2200      	movs	r2, #0
 8012022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801202c:	b25b      	sxtb	r3, r3
 801202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012032:	d103      	bne.n	801203c <vQueueWaitForMessageRestricted+0x40>
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	2200      	movs	r2, #0
 8012038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801203c:	f001 fcba 	bl	80139b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012044:	2b00      	cmp	r3, #0
 8012046:	d106      	bne.n	8012056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	3324      	adds	r3, #36	; 0x24
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	68b9      	ldr	r1, [r7, #8]
 8012050:	4618      	mov	r0, r3
 8012052:	f000 fc3b 	bl	80128cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012056:	6978      	ldr	r0, [r7, #20]
 8012058:	f7ff ff26 	bl	8011ea8 <prvUnlockQueue>
	}
 801205c:	bf00      	nop
 801205e:	3718      	adds	r7, #24
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012064:	b580      	push	{r7, lr}
 8012066:	b08e      	sub	sp, #56	; 0x38
 8012068:	af04      	add	r7, sp, #16
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
 8012070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012074:	2b00      	cmp	r3, #0
 8012076:	d10a      	bne.n	801208e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012078:	f04f 0310 	mov.w	r3, #16
 801207c:	f383 8811 	msr	BASEPRI, r3
 8012080:	f3bf 8f6f 	isb	sy
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	623b      	str	r3, [r7, #32]
}
 801208a:	bf00      	nop
 801208c:	e7fe      	b.n	801208c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012090:	2b00      	cmp	r3, #0
 8012092:	d10a      	bne.n	80120aa <xTaskCreateStatic+0x46>
	__asm volatile
 8012094:	f04f 0310 	mov.w	r3, #16
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	61fb      	str	r3, [r7, #28]
}
 80120a6:	bf00      	nop
 80120a8:	e7fe      	b.n	80120a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80120aa:	235c      	movs	r3, #92	; 0x5c
 80120ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	2b5c      	cmp	r3, #92	; 0x5c
 80120b2:	d00a      	beq.n	80120ca <xTaskCreateStatic+0x66>
	__asm volatile
 80120b4:	f04f 0310 	mov.w	r3, #16
 80120b8:	f383 8811 	msr	BASEPRI, r3
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	f3bf 8f4f 	dsb	sy
 80120c4:	61bb      	str	r3, [r7, #24]
}
 80120c6:	bf00      	nop
 80120c8:	e7fe      	b.n	80120c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80120ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d01e      	beq.n	8012110 <xTaskCreateStatic+0xac>
 80120d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d01b      	beq.n	8012110 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80120e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e4:	2202      	movs	r2, #2
 80120e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80120ea:	2300      	movs	r3, #0
 80120ec:	9303      	str	r3, [sp, #12]
 80120ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f0:	9302      	str	r3, [sp, #8]
 80120f2:	f107 0314 	add.w	r3, r7, #20
 80120f6:	9301      	str	r3, [sp, #4]
 80120f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	68b9      	ldr	r1, [r7, #8]
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f000 f850 	bl	80121a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801210a:	f000 f8dd 	bl	80122c8 <prvAddNewTaskToReadyList>
 801210e:	e001      	b.n	8012114 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012110:	2300      	movs	r3, #0
 8012112:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012114:	697b      	ldr	r3, [r7, #20]
	}
 8012116:	4618      	mov	r0, r3
 8012118:	3728      	adds	r7, #40	; 0x28
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801211e:	b580      	push	{r7, lr}
 8012120:	b08c      	sub	sp, #48	; 0x30
 8012122:	af04      	add	r7, sp, #16
 8012124:	60f8      	str	r0, [r7, #12]
 8012126:	60b9      	str	r1, [r7, #8]
 8012128:	603b      	str	r3, [r7, #0]
 801212a:	4613      	mov	r3, r2
 801212c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801212e:	88fb      	ldrh	r3, [r7, #6]
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4618      	mov	r0, r3
 8012134:	f001 fd30 	bl	8013b98 <pvPortMalloc>
 8012138:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00e      	beq.n	801215e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012140:	205c      	movs	r0, #92	; 0x5c
 8012142:	f001 fd29 	bl	8013b98 <pvPortMalloc>
 8012146:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d003      	beq.n	8012156 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	631a      	str	r2, [r3, #48]	; 0x30
 8012154:	e005      	b.n	8012162 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012156:	6978      	ldr	r0, [r7, #20]
 8012158:	f001 fde2 	bl	8013d20 <vPortFree>
 801215c:	e001      	b.n	8012162 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d017      	beq.n	8012198 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	2200      	movs	r2, #0
 801216c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012170:	88fa      	ldrh	r2, [r7, #6]
 8012172:	2300      	movs	r3, #0
 8012174:	9303      	str	r3, [sp, #12]
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	9302      	str	r3, [sp, #8]
 801217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	68b9      	ldr	r1, [r7, #8]
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f000 f80e 	bl	80121a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801218c:	69f8      	ldr	r0, [r7, #28]
 801218e:	f000 f89b 	bl	80122c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012192:	2301      	movs	r3, #1
 8012194:	61bb      	str	r3, [r7, #24]
 8012196:	e002      	b.n	801219e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012198:	f04f 33ff 	mov.w	r3, #4294967295
 801219c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801219e:	69bb      	ldr	r3, [r7, #24]
	}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3720      	adds	r7, #32
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b088      	sub	sp, #32
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
 80121b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	461a      	mov	r2, r3
 80121c0:	21a5      	movs	r1, #165	; 0xa5
 80121c2:	f002 fa39 	bl	8014638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80121c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80121ca:	6879      	ldr	r1, [r7, #4]
 80121cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80121d0:	440b      	add	r3, r1
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4413      	add	r3, r2
 80121d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	f023 0307 	bic.w	r3, r3, #7
 80121de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	f003 0307 	and.w	r3, r3, #7
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00a      	beq.n	8012200 <prvInitialiseNewTask+0x58>
	__asm volatile
 80121ea:	f04f 0310 	mov.w	r3, #16
 80121ee:	f383 8811 	msr	BASEPRI, r3
 80121f2:	f3bf 8f6f 	isb	sy
 80121f6:	f3bf 8f4f 	dsb	sy
 80121fa:	617b      	str	r3, [r7, #20]
}
 80121fc:	bf00      	nop
 80121fe:	e7fe      	b.n	80121fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d01f      	beq.n	8012246 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012206:	2300      	movs	r3, #0
 8012208:	61fb      	str	r3, [r7, #28]
 801220a:	e012      	b.n	8012232 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801220c:	68ba      	ldr	r2, [r7, #8]
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	4413      	add	r3, r2
 8012212:	7819      	ldrb	r1, [r3, #0]
 8012214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	4413      	add	r3, r2
 801221a:	3334      	adds	r3, #52	; 0x34
 801221c:	460a      	mov	r2, r1
 801221e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012220:	68ba      	ldr	r2, [r7, #8]
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	4413      	add	r3, r2
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d006      	beq.n	801223a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	3301      	adds	r3, #1
 8012230:	61fb      	str	r3, [r7, #28]
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	2b0f      	cmp	r3, #15
 8012236:	d9e9      	bls.n	801220c <prvInitialiseNewTask+0x64>
 8012238:	e000      	b.n	801223c <prvInitialiseNewTask+0x94>
			{
				break;
 801223a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223e:	2200      	movs	r2, #0
 8012240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012244:	e003      	b.n	801224e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012248:	2200      	movs	r2, #0
 801224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012250:	2b37      	cmp	r3, #55	; 0x37
 8012252:	d901      	bls.n	8012258 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012254:	2337      	movs	r3, #55	; 0x37
 8012256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801225c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012262:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	2200      	movs	r2, #0
 8012268:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	3304      	adds	r3, #4
 801226e:	4618      	mov	r0, r3
 8012270:	f7fe ff0a 	bl	8011088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012276:	3318      	adds	r3, #24
 8012278:	4618      	mov	r0, r3
 801227a:	f7fe ff05 	bl	8011088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012296:	2200      	movs	r2, #0
 8012298:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229c:	2200      	movs	r2, #0
 801229e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	68f9      	ldr	r1, [r7, #12]
 80122a6:	69b8      	ldr	r0, [r7, #24]
 80122a8:	f001 fa26 	bl	80136f8 <pxPortInitialiseStack>
 80122ac:	4602      	mov	r2, r0
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80122b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d002      	beq.n	80122be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80122b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122be:	bf00      	nop
 80122c0:	3720      	adds	r7, #32
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
	...

080122c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80122d0:	f001 fb40 	bl	8013954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80122d4:	4b2d      	ldr	r3, [pc, #180]	; (801238c <prvAddNewTaskToReadyList+0xc4>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	3301      	adds	r3, #1
 80122da:	4a2c      	ldr	r2, [pc, #176]	; (801238c <prvAddNewTaskToReadyList+0xc4>)
 80122dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80122de:	4b2c      	ldr	r3, [pc, #176]	; (8012390 <prvAddNewTaskToReadyList+0xc8>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d109      	bne.n	80122fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80122e6:	4a2a      	ldr	r2, [pc, #168]	; (8012390 <prvAddNewTaskToReadyList+0xc8>)
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80122ec:	4b27      	ldr	r3, [pc, #156]	; (801238c <prvAddNewTaskToReadyList+0xc4>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d110      	bne.n	8012316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80122f4:	f000 fc16 	bl	8012b24 <prvInitialiseTaskLists>
 80122f8:	e00d      	b.n	8012316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80122fa:	4b26      	ldr	r3, [pc, #152]	; (8012394 <prvAddNewTaskToReadyList+0xcc>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d109      	bne.n	8012316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012302:	4b23      	ldr	r3, [pc, #140]	; (8012390 <prvAddNewTaskToReadyList+0xc8>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230c:	429a      	cmp	r2, r3
 801230e:	d802      	bhi.n	8012316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012310:	4a1f      	ldr	r2, [pc, #124]	; (8012390 <prvAddNewTaskToReadyList+0xc8>)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012316:	4b20      	ldr	r3, [pc, #128]	; (8012398 <prvAddNewTaskToReadyList+0xd0>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	3301      	adds	r3, #1
 801231c:	4a1e      	ldr	r2, [pc, #120]	; (8012398 <prvAddNewTaskToReadyList+0xd0>)
 801231e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012320:	4b1d      	ldr	r3, [pc, #116]	; (8012398 <prvAddNewTaskToReadyList+0xd0>)
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232c:	4b1b      	ldr	r3, [pc, #108]	; (801239c <prvAddNewTaskToReadyList+0xd4>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d903      	bls.n	801233c <prvAddNewTaskToReadyList+0x74>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012338:	4a18      	ldr	r2, [pc, #96]	; (801239c <prvAddNewTaskToReadyList+0xd4>)
 801233a:	6013      	str	r3, [r2, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012340:	4613      	mov	r3, r2
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	4413      	add	r3, r2
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	4a15      	ldr	r2, [pc, #84]	; (80123a0 <prvAddNewTaskToReadyList+0xd8>)
 801234a:	441a      	add	r2, r3
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	3304      	adds	r3, #4
 8012350:	4619      	mov	r1, r3
 8012352:	4610      	mov	r0, r2
 8012354:	f7fe fea5 	bl	80110a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012358:	f001 fb2c 	bl	80139b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801235c:	4b0d      	ldr	r3, [pc, #52]	; (8012394 <prvAddNewTaskToReadyList+0xcc>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00e      	beq.n	8012382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012364:	4b0a      	ldr	r3, [pc, #40]	; (8012390 <prvAddNewTaskToReadyList+0xc8>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236e:	429a      	cmp	r2, r3
 8012370:	d207      	bcs.n	8012382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012372:	4b0c      	ldr	r3, [pc, #48]	; (80123a4 <prvAddNewTaskToReadyList+0xdc>)
 8012374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012382:	bf00      	nop
 8012384:	3708      	adds	r7, #8
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	20000ce8 	.word	0x20000ce8
 8012390:	20000814 	.word	0x20000814
 8012394:	20000cf4 	.word	0x20000cf4
 8012398:	20000d04 	.word	0x20000d04
 801239c:	20000cf0 	.word	0x20000cf0
 80123a0:	20000818 	.word	0x20000818
 80123a4:	e000ed04 	.word	0xe000ed04

080123a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80123b0:	2300      	movs	r3, #0
 80123b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d017      	beq.n	80123ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80123ba:	4b13      	ldr	r3, [pc, #76]	; (8012408 <vTaskDelay+0x60>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00a      	beq.n	80123d8 <vTaskDelay+0x30>
	__asm volatile
 80123c2:	f04f 0310 	mov.w	r3, #16
 80123c6:	f383 8811 	msr	BASEPRI, r3
 80123ca:	f3bf 8f6f 	isb	sy
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	60bb      	str	r3, [r7, #8]
}
 80123d4:	bf00      	nop
 80123d6:	e7fe      	b.n	80123d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80123d8:	f000 f880 	bl	80124dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80123dc:	2100      	movs	r1, #0
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 fde8 	bl	8012fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80123e4:	f000 f888 	bl	80124f8 <xTaskResumeAll>
 80123e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d107      	bne.n	8012400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80123f0:	4b06      	ldr	r3, [pc, #24]	; (801240c <vTaskDelay+0x64>)
 80123f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012400:	bf00      	nop
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	20000d10 	.word	0x20000d10
 801240c:	e000ed04 	.word	0xe000ed04

08012410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b08a      	sub	sp, #40	; 0x28
 8012414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012416:	2300      	movs	r3, #0
 8012418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801241a:	2300      	movs	r3, #0
 801241c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801241e:	463a      	mov	r2, r7
 8012420:	1d39      	adds	r1, r7, #4
 8012422:	f107 0308 	add.w	r3, r7, #8
 8012426:	4618      	mov	r0, r3
 8012428:	f7fe fdda 	bl	8010fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801242c:	6839      	ldr	r1, [r7, #0]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	68ba      	ldr	r2, [r7, #8]
 8012432:	9202      	str	r2, [sp, #8]
 8012434:	9301      	str	r3, [sp, #4]
 8012436:	2300      	movs	r3, #0
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	2300      	movs	r3, #0
 801243c:	460a      	mov	r2, r1
 801243e:	4921      	ldr	r1, [pc, #132]	; (80124c4 <vTaskStartScheduler+0xb4>)
 8012440:	4821      	ldr	r0, [pc, #132]	; (80124c8 <vTaskStartScheduler+0xb8>)
 8012442:	f7ff fe0f 	bl	8012064 <xTaskCreateStatic>
 8012446:	4603      	mov	r3, r0
 8012448:	4a20      	ldr	r2, [pc, #128]	; (80124cc <vTaskStartScheduler+0xbc>)
 801244a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801244c:	4b1f      	ldr	r3, [pc, #124]	; (80124cc <vTaskStartScheduler+0xbc>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d002      	beq.n	801245a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012454:	2301      	movs	r3, #1
 8012456:	617b      	str	r3, [r7, #20]
 8012458:	e001      	b.n	801245e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801245a:	2300      	movs	r3, #0
 801245c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	2b01      	cmp	r3, #1
 8012462:	d102      	bne.n	801246a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012464:	f000 fdfa 	bl	801305c <xTimerCreateTimerTask>
 8012468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d116      	bne.n	801249e <vTaskStartScheduler+0x8e>
	__asm volatile
 8012470:	f04f 0310 	mov.w	r3, #16
 8012474:	f383 8811 	msr	BASEPRI, r3
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	613b      	str	r3, [r7, #16]
}
 8012482:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012484:	4b12      	ldr	r3, [pc, #72]	; (80124d0 <vTaskStartScheduler+0xc0>)
 8012486:	f04f 32ff 	mov.w	r2, #4294967295
 801248a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801248c:	4b11      	ldr	r3, [pc, #68]	; (80124d4 <vTaskStartScheduler+0xc4>)
 801248e:	2201      	movs	r2, #1
 8012490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012492:	4b11      	ldr	r3, [pc, #68]	; (80124d8 <vTaskStartScheduler+0xc8>)
 8012494:	2200      	movs	r2, #0
 8012496:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012498:	f001 f9ba 	bl	8013810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801249c:	e00e      	b.n	80124bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a4:	d10a      	bne.n	80124bc <vTaskStartScheduler+0xac>
	__asm volatile
 80124a6:	f04f 0310 	mov.w	r3, #16
 80124aa:	f383 8811 	msr	BASEPRI, r3
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f3bf 8f4f 	dsb	sy
 80124b6:	60fb      	str	r3, [r7, #12]
}
 80124b8:	bf00      	nop
 80124ba:	e7fe      	b.n	80124ba <vTaskStartScheduler+0xaa>
}
 80124bc:	bf00      	nop
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	0801481c 	.word	0x0801481c
 80124c8:	08012af5 	.word	0x08012af5
 80124cc:	20000d0c 	.word	0x20000d0c
 80124d0:	20000d08 	.word	0x20000d08
 80124d4:	20000cf4 	.word	0x20000cf4
 80124d8:	20000cec 	.word	0x20000cec

080124dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80124dc:	b480      	push	{r7}
 80124de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80124e0:	4b04      	ldr	r3, [pc, #16]	; (80124f4 <vTaskSuspendAll+0x18>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	3301      	adds	r3, #1
 80124e6:	4a03      	ldr	r2, [pc, #12]	; (80124f4 <vTaskSuspendAll+0x18>)
 80124e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80124ea:	bf00      	nop
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr
 80124f4:	20000d10 	.word	0x20000d10

080124f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012502:	2300      	movs	r3, #0
 8012504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012506:	4b42      	ldr	r3, [pc, #264]	; (8012610 <xTaskResumeAll+0x118>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d10a      	bne.n	8012524 <xTaskResumeAll+0x2c>
	__asm volatile
 801250e:	f04f 0310 	mov.w	r3, #16
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	603b      	str	r3, [r7, #0]
}
 8012520:	bf00      	nop
 8012522:	e7fe      	b.n	8012522 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012524:	f001 fa16 	bl	8013954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012528:	4b39      	ldr	r3, [pc, #228]	; (8012610 <xTaskResumeAll+0x118>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	3b01      	subs	r3, #1
 801252e:	4a38      	ldr	r2, [pc, #224]	; (8012610 <xTaskResumeAll+0x118>)
 8012530:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012532:	4b37      	ldr	r3, [pc, #220]	; (8012610 <xTaskResumeAll+0x118>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d162      	bne.n	8012600 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801253a:	4b36      	ldr	r3, [pc, #216]	; (8012614 <xTaskResumeAll+0x11c>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d05e      	beq.n	8012600 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012542:	e02f      	b.n	80125a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012544:	4b34      	ldr	r3, [pc, #208]	; (8012618 <xTaskResumeAll+0x120>)
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	68db      	ldr	r3, [r3, #12]
 801254a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	3318      	adds	r3, #24
 8012550:	4618      	mov	r0, r3
 8012552:	f7fe fe03 	bl	801115c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	3304      	adds	r3, #4
 801255a:	4618      	mov	r0, r3
 801255c:	f7fe fdfe 	bl	801115c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012564:	4b2d      	ldr	r3, [pc, #180]	; (801261c <xTaskResumeAll+0x124>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	429a      	cmp	r2, r3
 801256a:	d903      	bls.n	8012574 <xTaskResumeAll+0x7c>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012570:	4a2a      	ldr	r2, [pc, #168]	; (801261c <xTaskResumeAll+0x124>)
 8012572:	6013      	str	r3, [r2, #0]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012578:	4613      	mov	r3, r2
 801257a:	009b      	lsls	r3, r3, #2
 801257c:	4413      	add	r3, r2
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	4a27      	ldr	r2, [pc, #156]	; (8012620 <xTaskResumeAll+0x128>)
 8012582:	441a      	add	r2, r3
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	3304      	adds	r3, #4
 8012588:	4619      	mov	r1, r3
 801258a:	4610      	mov	r0, r2
 801258c:	f7fe fd89 	bl	80110a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012594:	4b23      	ldr	r3, [pc, #140]	; (8012624 <xTaskResumeAll+0x12c>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801259a:	429a      	cmp	r2, r3
 801259c:	d302      	bcc.n	80125a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801259e:	4b22      	ldr	r3, [pc, #136]	; (8012628 <xTaskResumeAll+0x130>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125a4:	4b1c      	ldr	r3, [pc, #112]	; (8012618 <xTaskResumeAll+0x120>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1cb      	bne.n	8012544 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d001      	beq.n	80125b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80125b2:	f000 fb55 	bl	8012c60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80125b6:	4b1d      	ldr	r3, [pc, #116]	; (801262c <xTaskResumeAll+0x134>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d010      	beq.n	80125e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80125c2:	f000 f847 	bl	8012654 <xTaskIncrementTick>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80125cc:	4b16      	ldr	r3, [pc, #88]	; (8012628 <xTaskResumeAll+0x130>)
 80125ce:	2201      	movs	r2, #1
 80125d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1f1      	bne.n	80125c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80125de:	4b13      	ldr	r3, [pc, #76]	; (801262c <xTaskResumeAll+0x134>)
 80125e0:	2200      	movs	r2, #0
 80125e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80125e4:	4b10      	ldr	r3, [pc, #64]	; (8012628 <xTaskResumeAll+0x130>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d009      	beq.n	8012600 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80125ec:	2301      	movs	r3, #1
 80125ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80125f0:	4b0f      	ldr	r3, [pc, #60]	; (8012630 <xTaskResumeAll+0x138>)
 80125f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	f3bf 8f4f 	dsb	sy
 80125fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012600:	f001 f9d8 	bl	80139b4 <vPortExitCritical>

	return xAlreadyYielded;
 8012604:	68bb      	ldr	r3, [r7, #8]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	20000d10 	.word	0x20000d10
 8012614:	20000ce8 	.word	0x20000ce8
 8012618:	20000ca8 	.word	0x20000ca8
 801261c:	20000cf0 	.word	0x20000cf0
 8012620:	20000818 	.word	0x20000818
 8012624:	20000814 	.word	0x20000814
 8012628:	20000cfc 	.word	0x20000cfc
 801262c:	20000cf8 	.word	0x20000cf8
 8012630:	e000ed04 	.word	0xe000ed04

08012634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801263a:	4b05      	ldr	r3, [pc, #20]	; (8012650 <xTaskGetTickCount+0x1c>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012640:	687b      	ldr	r3, [r7, #4]
}
 8012642:	4618      	mov	r0, r3
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	20000cec 	.word	0x20000cec

08012654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b086      	sub	sp, #24
 8012658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801265a:	2300      	movs	r3, #0
 801265c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801265e:	4b4f      	ldr	r3, [pc, #316]	; (801279c <xTaskIncrementTick+0x148>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f040 8089 	bne.w	801277a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012668:	4b4d      	ldr	r3, [pc, #308]	; (80127a0 <xTaskIncrementTick+0x14c>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	3301      	adds	r3, #1
 801266e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012670:	4a4b      	ldr	r2, [pc, #300]	; (80127a0 <xTaskIncrementTick+0x14c>)
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012676:	693b      	ldr	r3, [r7, #16]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d120      	bne.n	80126be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801267c:	4b49      	ldr	r3, [pc, #292]	; (80127a4 <xTaskIncrementTick+0x150>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d00a      	beq.n	801269c <xTaskIncrementTick+0x48>
	__asm volatile
 8012686:	f04f 0310 	mov.w	r3, #16
 801268a:	f383 8811 	msr	BASEPRI, r3
 801268e:	f3bf 8f6f 	isb	sy
 8012692:	f3bf 8f4f 	dsb	sy
 8012696:	603b      	str	r3, [r7, #0]
}
 8012698:	bf00      	nop
 801269a:	e7fe      	b.n	801269a <xTaskIncrementTick+0x46>
 801269c:	4b41      	ldr	r3, [pc, #260]	; (80127a4 <xTaskIncrementTick+0x150>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	60fb      	str	r3, [r7, #12]
 80126a2:	4b41      	ldr	r3, [pc, #260]	; (80127a8 <xTaskIncrementTick+0x154>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a3f      	ldr	r2, [pc, #252]	; (80127a4 <xTaskIncrementTick+0x150>)
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	4a3f      	ldr	r2, [pc, #252]	; (80127a8 <xTaskIncrementTick+0x154>)
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6013      	str	r3, [r2, #0]
 80126b0:	4b3e      	ldr	r3, [pc, #248]	; (80127ac <xTaskIncrementTick+0x158>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	3301      	adds	r3, #1
 80126b6:	4a3d      	ldr	r2, [pc, #244]	; (80127ac <xTaskIncrementTick+0x158>)
 80126b8:	6013      	str	r3, [r2, #0]
 80126ba:	f000 fad1 	bl	8012c60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80126be:	4b3c      	ldr	r3, [pc, #240]	; (80127b0 <xTaskIncrementTick+0x15c>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	693a      	ldr	r2, [r7, #16]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d349      	bcc.n	801275c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126c8:	4b36      	ldr	r3, [pc, #216]	; (80127a4 <xTaskIncrementTick+0x150>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d104      	bne.n	80126dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126d2:	4b37      	ldr	r3, [pc, #220]	; (80127b0 <xTaskIncrementTick+0x15c>)
 80126d4:	f04f 32ff 	mov.w	r2, #4294967295
 80126d8:	601a      	str	r2, [r3, #0]
					break;
 80126da:	e03f      	b.n	801275c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126dc:	4b31      	ldr	r3, [pc, #196]	; (80127a4 <xTaskIncrementTick+0x150>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80126ec:	693a      	ldr	r2, [r7, #16]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d203      	bcs.n	80126fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80126f4:	4a2e      	ldr	r2, [pc, #184]	; (80127b0 <xTaskIncrementTick+0x15c>)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80126fa:	e02f      	b.n	801275c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	3304      	adds	r3, #4
 8012700:	4618      	mov	r0, r3
 8012702:	f7fe fd2b 	bl	801115c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801270a:	2b00      	cmp	r3, #0
 801270c:	d004      	beq.n	8012718 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801270e:	68bb      	ldr	r3, [r7, #8]
 8012710:	3318      	adds	r3, #24
 8012712:	4618      	mov	r0, r3
 8012714:	f7fe fd22 	bl	801115c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801271c:	4b25      	ldr	r3, [pc, #148]	; (80127b4 <xTaskIncrementTick+0x160>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	429a      	cmp	r2, r3
 8012722:	d903      	bls.n	801272c <xTaskIncrementTick+0xd8>
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012728:	4a22      	ldr	r2, [pc, #136]	; (80127b4 <xTaskIncrementTick+0x160>)
 801272a:	6013      	str	r3, [r2, #0]
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012730:	4613      	mov	r3, r2
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4a1f      	ldr	r2, [pc, #124]	; (80127b8 <xTaskIncrementTick+0x164>)
 801273a:	441a      	add	r2, r3
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	3304      	adds	r3, #4
 8012740:	4619      	mov	r1, r3
 8012742:	4610      	mov	r0, r2
 8012744:	f7fe fcad 	bl	80110a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801274c:	4b1b      	ldr	r3, [pc, #108]	; (80127bc <xTaskIncrementTick+0x168>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012752:	429a      	cmp	r2, r3
 8012754:	d3b8      	bcc.n	80126c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012756:	2301      	movs	r3, #1
 8012758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801275a:	e7b5      	b.n	80126c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801275c:	4b17      	ldr	r3, [pc, #92]	; (80127bc <xTaskIncrementTick+0x168>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012762:	4915      	ldr	r1, [pc, #84]	; (80127b8 <xTaskIncrementTick+0x164>)
 8012764:	4613      	mov	r3, r2
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4413      	add	r3, r2
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	440b      	add	r3, r1
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b01      	cmp	r3, #1
 8012772:	d907      	bls.n	8012784 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8012774:	2301      	movs	r3, #1
 8012776:	617b      	str	r3, [r7, #20]
 8012778:	e004      	b.n	8012784 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801277a:	4b11      	ldr	r3, [pc, #68]	; (80127c0 <xTaskIncrementTick+0x16c>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	3301      	adds	r3, #1
 8012780:	4a0f      	ldr	r2, [pc, #60]	; (80127c0 <xTaskIncrementTick+0x16c>)
 8012782:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012784:	4b0f      	ldr	r3, [pc, #60]	; (80127c4 <xTaskIncrementTick+0x170>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 801278c:	2301      	movs	r3, #1
 801278e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012790:	697b      	ldr	r3, [r7, #20]
}
 8012792:	4618      	mov	r0, r3
 8012794:	3718      	adds	r7, #24
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	20000d10 	.word	0x20000d10
 80127a0:	20000cec 	.word	0x20000cec
 80127a4:	20000ca0 	.word	0x20000ca0
 80127a8:	20000ca4 	.word	0x20000ca4
 80127ac:	20000d00 	.word	0x20000d00
 80127b0:	20000d08 	.word	0x20000d08
 80127b4:	20000cf0 	.word	0x20000cf0
 80127b8:	20000818 	.word	0x20000818
 80127bc:	20000814 	.word	0x20000814
 80127c0:	20000cf8 	.word	0x20000cf8
 80127c4:	20000cfc 	.word	0x20000cfc

080127c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80127ce:	4b28      	ldr	r3, [pc, #160]	; (8012870 <vTaskSwitchContext+0xa8>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d003      	beq.n	80127de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80127d6:	4b27      	ldr	r3, [pc, #156]	; (8012874 <vTaskSwitchContext+0xac>)
 80127d8:	2201      	movs	r2, #1
 80127da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80127dc:	e041      	b.n	8012862 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80127de:	4b25      	ldr	r3, [pc, #148]	; (8012874 <vTaskSwitchContext+0xac>)
 80127e0:	2200      	movs	r2, #0
 80127e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127e4:	4b24      	ldr	r3, [pc, #144]	; (8012878 <vTaskSwitchContext+0xb0>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	60fb      	str	r3, [r7, #12]
 80127ea:	e010      	b.n	801280e <vTaskSwitchContext+0x46>
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d10a      	bne.n	8012808 <vTaskSwitchContext+0x40>
	__asm volatile
 80127f2:	f04f 0310 	mov.w	r3, #16
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	607b      	str	r3, [r7, #4]
}
 8012804:	bf00      	nop
 8012806:	e7fe      	b.n	8012806 <vTaskSwitchContext+0x3e>
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	3b01      	subs	r3, #1
 801280c:	60fb      	str	r3, [r7, #12]
 801280e:	491b      	ldr	r1, [pc, #108]	; (801287c <vTaskSwitchContext+0xb4>)
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	4613      	mov	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4413      	add	r3, r2
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	440b      	add	r3, r1
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d0e4      	beq.n	80127ec <vTaskSwitchContext+0x24>
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	4613      	mov	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	4413      	add	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	4a13      	ldr	r2, [pc, #76]	; (801287c <vTaskSwitchContext+0xb4>)
 801282e:	4413      	add	r3, r2
 8012830:	60bb      	str	r3, [r7, #8]
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	605a      	str	r2, [r3, #4]
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	3308      	adds	r3, #8
 8012844:	429a      	cmp	r2, r3
 8012846:	d104      	bne.n	8012852 <vTaskSwitchContext+0x8a>
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	685a      	ldr	r2, [r3, #4]
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	605a      	str	r2, [r3, #4]
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	4a09      	ldr	r2, [pc, #36]	; (8012880 <vTaskSwitchContext+0xb8>)
 801285a:	6013      	str	r3, [r2, #0]
 801285c:	4a06      	ldr	r2, [pc, #24]	; (8012878 <vTaskSwitchContext+0xb0>)
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6013      	str	r3, [r2, #0]
}
 8012862:	bf00      	nop
 8012864:	3714      	adds	r7, #20
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr
 801286e:	bf00      	nop
 8012870:	20000d10 	.word	0x20000d10
 8012874:	20000cfc 	.word	0x20000cfc
 8012878:	20000cf0 	.word	0x20000cf0
 801287c:	20000818 	.word	0x20000818
 8012880:	20000814 	.word	0x20000814

08012884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d10a      	bne.n	80128aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012894:	f04f 0310 	mov.w	r3, #16
 8012898:	f383 8811 	msr	BASEPRI, r3
 801289c:	f3bf 8f6f 	isb	sy
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	60fb      	str	r3, [r7, #12]
}
 80128a6:	bf00      	nop
 80128a8:	e7fe      	b.n	80128a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128aa:	4b07      	ldr	r3, [pc, #28]	; (80128c8 <vTaskPlaceOnEventList+0x44>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	3318      	adds	r3, #24
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7fe fc19 	bl	80110ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128b8:	2101      	movs	r1, #1
 80128ba:	6838      	ldr	r0, [r7, #0]
 80128bc:	f000 fb7a 	bl	8012fb4 <prvAddCurrentTaskToDelayedList>
}
 80128c0:	bf00      	nop
 80128c2:	3710      	adds	r7, #16
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20000814 	.word	0x20000814

080128cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d10a      	bne.n	80128f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80128de:	f04f 0310 	mov.w	r3, #16
 80128e2:	f383 8811 	msr	BASEPRI, r3
 80128e6:	f3bf 8f6f 	isb	sy
 80128ea:	f3bf 8f4f 	dsb	sy
 80128ee:	617b      	str	r3, [r7, #20]
}
 80128f0:	bf00      	nop
 80128f2:	e7fe      	b.n	80128f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128f4:	4b0a      	ldr	r3, [pc, #40]	; (8012920 <vTaskPlaceOnEventListRestricted+0x54>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	3318      	adds	r3, #24
 80128fa:	4619      	mov	r1, r3
 80128fc:	68f8      	ldr	r0, [r7, #12]
 80128fe:	f7fe fbd0 	bl	80110a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d002      	beq.n	801290e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012908:	f04f 33ff 	mov.w	r3, #4294967295
 801290c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801290e:	6879      	ldr	r1, [r7, #4]
 8012910:	68b8      	ldr	r0, [r7, #8]
 8012912:	f000 fb4f 	bl	8012fb4 <prvAddCurrentTaskToDelayedList>
	}
 8012916:	bf00      	nop
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	20000814 	.word	0x20000814

08012924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d10a      	bne.n	8012950 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801293a:	f04f 0310 	mov.w	r3, #16
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	60fb      	str	r3, [r7, #12]
}
 801294c:	bf00      	nop
 801294e:	e7fe      	b.n	801294e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	3318      	adds	r3, #24
 8012954:	4618      	mov	r0, r3
 8012956:	f7fe fc01 	bl	801115c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801295a:	4b1e      	ldr	r3, [pc, #120]	; (80129d4 <xTaskRemoveFromEventList+0xb0>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d11d      	bne.n	801299e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	3304      	adds	r3, #4
 8012966:	4618      	mov	r0, r3
 8012968:	f7fe fbf8 	bl	801115c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012970:	4b19      	ldr	r3, [pc, #100]	; (80129d8 <xTaskRemoveFromEventList+0xb4>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	429a      	cmp	r2, r3
 8012976:	d903      	bls.n	8012980 <xTaskRemoveFromEventList+0x5c>
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801297c:	4a16      	ldr	r2, [pc, #88]	; (80129d8 <xTaskRemoveFromEventList+0xb4>)
 801297e:	6013      	str	r3, [r2, #0]
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012984:	4613      	mov	r3, r2
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	4a13      	ldr	r2, [pc, #76]	; (80129dc <xTaskRemoveFromEventList+0xb8>)
 801298e:	441a      	add	r2, r3
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	3304      	adds	r3, #4
 8012994:	4619      	mov	r1, r3
 8012996:	4610      	mov	r0, r2
 8012998:	f7fe fb83 	bl	80110a2 <vListInsertEnd>
 801299c:	e005      	b.n	80129aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	3318      	adds	r3, #24
 80129a2:	4619      	mov	r1, r3
 80129a4:	480e      	ldr	r0, [pc, #56]	; (80129e0 <xTaskRemoveFromEventList+0xbc>)
 80129a6:	f7fe fb7c 	bl	80110a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ae:	4b0d      	ldr	r3, [pc, #52]	; (80129e4 <xTaskRemoveFromEventList+0xc0>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d905      	bls.n	80129c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80129b8:	2301      	movs	r3, #1
 80129ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80129bc:	4b0a      	ldr	r3, [pc, #40]	; (80129e8 <xTaskRemoveFromEventList+0xc4>)
 80129be:	2201      	movs	r2, #1
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	e001      	b.n	80129c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80129c4:	2300      	movs	r3, #0
 80129c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80129c8:	697b      	ldr	r3, [r7, #20]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3718      	adds	r7, #24
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	20000d10 	.word	0x20000d10
 80129d8:	20000cf0 	.word	0x20000cf0
 80129dc:	20000818 	.word	0x20000818
 80129e0:	20000ca8 	.word	0x20000ca8
 80129e4:	20000814 	.word	0x20000814
 80129e8:	20000cfc 	.word	0x20000cfc

080129ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80129ec:	b480      	push	{r7}
 80129ee:	b083      	sub	sp, #12
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80129f4:	4b06      	ldr	r3, [pc, #24]	; (8012a10 <vTaskInternalSetTimeOutState+0x24>)
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <vTaskInternalSetTimeOutState+0x28>)
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	605a      	str	r2, [r3, #4]
}
 8012a04:	bf00      	nop
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr
 8012a10:	20000d00 	.word	0x20000d00
 8012a14:	20000cec 	.word	0x20000cec

08012a18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d10a      	bne.n	8012a3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012a28:	f04f 0310 	mov.w	r3, #16
 8012a2c:	f383 8811 	msr	BASEPRI, r3
 8012a30:	f3bf 8f6f 	isb	sy
 8012a34:	f3bf 8f4f 	dsb	sy
 8012a38:	613b      	str	r3, [r7, #16]
}
 8012a3a:	bf00      	nop
 8012a3c:	e7fe      	b.n	8012a3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10a      	bne.n	8012a5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012a44:	f04f 0310 	mov.w	r3, #16
 8012a48:	f383 8811 	msr	BASEPRI, r3
 8012a4c:	f3bf 8f6f 	isb	sy
 8012a50:	f3bf 8f4f 	dsb	sy
 8012a54:	60fb      	str	r3, [r7, #12]
}
 8012a56:	bf00      	nop
 8012a58:	e7fe      	b.n	8012a58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012a5a:	f000 ff7b 	bl	8013954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012a5e:	4b1d      	ldr	r3, [pc, #116]	; (8012ad4 <xTaskCheckForTimeOut+0xbc>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	69ba      	ldr	r2, [r7, #24]
 8012a6a:	1ad3      	subs	r3, r2, r3
 8012a6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a76:	d102      	bne.n	8012a7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	61fb      	str	r3, [r7, #28]
 8012a7c:	e023      	b.n	8012ac6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	4b15      	ldr	r3, [pc, #84]	; (8012ad8 <xTaskCheckForTimeOut+0xc0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d007      	beq.n	8012a9a <xTaskCheckForTimeOut+0x82>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	69ba      	ldr	r2, [r7, #24]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d302      	bcc.n	8012a9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012a94:	2301      	movs	r3, #1
 8012a96:	61fb      	str	r3, [r7, #28]
 8012a98:	e015      	b.n	8012ac6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	697a      	ldr	r2, [r7, #20]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d20b      	bcs.n	8012abc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	1ad2      	subs	r2, r2, r3
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7ff ff9b 	bl	80129ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	61fb      	str	r3, [r7, #28]
 8012aba:	e004      	b.n	8012ac6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012ac6:	f000 ff75 	bl	80139b4 <vPortExitCritical>

	return xReturn;
 8012aca:	69fb      	ldr	r3, [r7, #28]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3720      	adds	r7, #32
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	20000cec 	.word	0x20000cec
 8012ad8:	20000d00 	.word	0x20000d00

08012adc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012adc:	b480      	push	{r7}
 8012ade:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012ae0:	4b03      	ldr	r3, [pc, #12]	; (8012af0 <vTaskMissedYield+0x14>)
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	601a      	str	r2, [r3, #0]
}
 8012ae6:	bf00      	nop
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr
 8012af0:	20000cfc 	.word	0x20000cfc

08012af4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012afc:	f000 f852 	bl	8012ba4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012b00:	4b06      	ldr	r3, [pc, #24]	; (8012b1c <prvIdleTask+0x28>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d9f9      	bls.n	8012afc <prvIdleTask+0x8>
			{
				taskYIELD();
 8012b08:	4b05      	ldr	r3, [pc, #20]	; (8012b20 <prvIdleTask+0x2c>)
 8012b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b0e:	601a      	str	r2, [r3, #0]
 8012b10:	f3bf 8f4f 	dsb	sy
 8012b14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012b18:	e7f0      	b.n	8012afc <prvIdleTask+0x8>
 8012b1a:	bf00      	nop
 8012b1c:	20000818 	.word	0x20000818
 8012b20:	e000ed04 	.word	0xe000ed04

08012b24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	607b      	str	r3, [r7, #4]
 8012b2e:	e00c      	b.n	8012b4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	4613      	mov	r3, r2
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	4413      	add	r3, r2
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	4a12      	ldr	r2, [pc, #72]	; (8012b84 <prvInitialiseTaskLists+0x60>)
 8012b3c:	4413      	add	r3, r2
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fe fa82 	bl	8011048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	3301      	adds	r3, #1
 8012b48:	607b      	str	r3, [r7, #4]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2b37      	cmp	r3, #55	; 0x37
 8012b4e:	d9ef      	bls.n	8012b30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b50:	480d      	ldr	r0, [pc, #52]	; (8012b88 <prvInitialiseTaskLists+0x64>)
 8012b52:	f7fe fa79 	bl	8011048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b56:	480d      	ldr	r0, [pc, #52]	; (8012b8c <prvInitialiseTaskLists+0x68>)
 8012b58:	f7fe fa76 	bl	8011048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b5c:	480c      	ldr	r0, [pc, #48]	; (8012b90 <prvInitialiseTaskLists+0x6c>)
 8012b5e:	f7fe fa73 	bl	8011048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b62:	480c      	ldr	r0, [pc, #48]	; (8012b94 <prvInitialiseTaskLists+0x70>)
 8012b64:	f7fe fa70 	bl	8011048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b68:	480b      	ldr	r0, [pc, #44]	; (8012b98 <prvInitialiseTaskLists+0x74>)
 8012b6a:	f7fe fa6d 	bl	8011048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012b6e:	4b0b      	ldr	r3, [pc, #44]	; (8012b9c <prvInitialiseTaskLists+0x78>)
 8012b70:	4a05      	ldr	r2, [pc, #20]	; (8012b88 <prvInitialiseTaskLists+0x64>)
 8012b72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012b74:	4b0a      	ldr	r3, [pc, #40]	; (8012ba0 <prvInitialiseTaskLists+0x7c>)
 8012b76:	4a05      	ldr	r2, [pc, #20]	; (8012b8c <prvInitialiseTaskLists+0x68>)
 8012b78:	601a      	str	r2, [r3, #0]
}
 8012b7a:	bf00      	nop
 8012b7c:	3708      	adds	r7, #8
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}
 8012b82:	bf00      	nop
 8012b84:	20000818 	.word	0x20000818
 8012b88:	20000c78 	.word	0x20000c78
 8012b8c:	20000c8c 	.word	0x20000c8c
 8012b90:	20000ca8 	.word	0x20000ca8
 8012b94:	20000cbc 	.word	0x20000cbc
 8012b98:	20000cd4 	.word	0x20000cd4
 8012b9c:	20000ca0 	.word	0x20000ca0
 8012ba0:	20000ca4 	.word	0x20000ca4

08012ba4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012baa:	e019      	b.n	8012be0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012bac:	f000 fed2 	bl	8013954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bb0:	4b10      	ldr	r3, [pc, #64]	; (8012bf4 <prvCheckTasksWaitingTermination+0x50>)
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	3304      	adds	r3, #4
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7fe facd 	bl	801115c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012bc2:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <prvCheckTasksWaitingTermination+0x54>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	4a0b      	ldr	r2, [pc, #44]	; (8012bf8 <prvCheckTasksWaitingTermination+0x54>)
 8012bca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012bcc:	4b0b      	ldr	r3, [pc, #44]	; (8012bfc <prvCheckTasksWaitingTermination+0x58>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	4a0a      	ldr	r2, [pc, #40]	; (8012bfc <prvCheckTasksWaitingTermination+0x58>)
 8012bd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012bd6:	f000 feed 	bl	80139b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f000 f810 	bl	8012c00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012be0:	4b06      	ldr	r3, [pc, #24]	; (8012bfc <prvCheckTasksWaitingTermination+0x58>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1e1      	bne.n	8012bac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012be8:	bf00      	nop
 8012bea:	bf00      	nop
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	20000cbc 	.word	0x20000cbc
 8012bf8:	20000ce8 	.word	0x20000ce8
 8012bfc:	20000cd0 	.word	0x20000cd0

08012c00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d108      	bne.n	8012c24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c16:	4618      	mov	r0, r3
 8012c18:	f001 f882 	bl	8013d20 <vPortFree>
				vPortFree( pxTCB );
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f001 f87f 	bl	8013d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012c22:	e018      	b.n	8012c56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d103      	bne.n	8012c36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f001 f876 	bl	8013d20 <vPortFree>
	}
 8012c34:	e00f      	b.n	8012c56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	d00a      	beq.n	8012c56 <prvDeleteTCB+0x56>
	__asm volatile
 8012c40:	f04f 0310 	mov.w	r3, #16
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	60fb      	str	r3, [r7, #12]
}
 8012c52:	bf00      	nop
 8012c54:	e7fe      	b.n	8012c54 <prvDeleteTCB+0x54>
	}
 8012c56:	bf00      	nop
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c66:	4b0c      	ldr	r3, [pc, #48]	; (8012c98 <prvResetNextTaskUnblockTime+0x38>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d104      	bne.n	8012c7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012c70:	4b0a      	ldr	r3, [pc, #40]	; (8012c9c <prvResetNextTaskUnblockTime+0x3c>)
 8012c72:	f04f 32ff 	mov.w	r2, #4294967295
 8012c76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012c78:	e008      	b.n	8012c8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c7a:	4b07      	ldr	r3, [pc, #28]	; (8012c98 <prvResetNextTaskUnblockTime+0x38>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	68db      	ldr	r3, [r3, #12]
 8012c82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	4a04      	ldr	r2, [pc, #16]	; (8012c9c <prvResetNextTaskUnblockTime+0x3c>)
 8012c8a:	6013      	str	r3, [r2, #0]
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	20000ca0 	.word	0x20000ca0
 8012c9c:	20000d08 	.word	0x20000d08

08012ca0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012ca6:	4b0b      	ldr	r3, [pc, #44]	; (8012cd4 <xTaskGetSchedulerState+0x34>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d102      	bne.n	8012cb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	607b      	str	r3, [r7, #4]
 8012cb2:	e008      	b.n	8012cc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cb4:	4b08      	ldr	r3, [pc, #32]	; (8012cd8 <xTaskGetSchedulerState+0x38>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d102      	bne.n	8012cc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	607b      	str	r3, [r7, #4]
 8012cc0:	e001      	b.n	8012cc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012cc6:	687b      	ldr	r3, [r7, #4]
	}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr
 8012cd4:	20000cf4 	.word	0x20000cf4
 8012cd8:	20000d10 	.word	0x20000d10

08012cdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d051      	beq.n	8012d96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf6:	4b2a      	ldr	r3, [pc, #168]	; (8012da0 <xTaskPriorityInherit+0xc4>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfc:	429a      	cmp	r2, r3
 8012cfe:	d241      	bcs.n	8012d84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	699b      	ldr	r3, [r3, #24]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	db06      	blt.n	8012d16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d08:	4b25      	ldr	r3, [pc, #148]	; (8012da0 <xTaskPriorityInherit+0xc4>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	6959      	ldr	r1, [r3, #20]
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d1e:	4613      	mov	r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	4413      	add	r3, r2
 8012d24:	009b      	lsls	r3, r3, #2
 8012d26:	4a1f      	ldr	r2, [pc, #124]	; (8012da4 <xTaskPriorityInherit+0xc8>)
 8012d28:	4413      	add	r3, r2
 8012d2a:	4299      	cmp	r1, r3
 8012d2c:	d122      	bne.n	8012d74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	3304      	adds	r3, #4
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fe fa12 	bl	801115c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d38:	4b19      	ldr	r3, [pc, #100]	; (8012da0 <xTaskPriorityInherit+0xc4>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d46:	4b18      	ldr	r3, [pc, #96]	; (8012da8 <xTaskPriorityInherit+0xcc>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d903      	bls.n	8012d56 <xTaskPriorityInherit+0x7a>
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d52:	4a15      	ldr	r2, [pc, #84]	; (8012da8 <xTaskPriorityInherit+0xcc>)
 8012d54:	6013      	str	r3, [r2, #0]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5a:	4613      	mov	r3, r2
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	4413      	add	r3, r2
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	4a10      	ldr	r2, [pc, #64]	; (8012da4 <xTaskPriorityInherit+0xc8>)
 8012d64:	441a      	add	r2, r3
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	3304      	adds	r3, #4
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	4610      	mov	r0, r2
 8012d6e:	f7fe f998 	bl	80110a2 <vListInsertEnd>
 8012d72:	e004      	b.n	8012d7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d74:	4b0a      	ldr	r3, [pc, #40]	; (8012da0 <xTaskPriorityInherit+0xc4>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	60fb      	str	r3, [r7, #12]
 8012d82:	e008      	b.n	8012d96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012d84:	68bb      	ldr	r3, [r7, #8]
 8012d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d88:	4b05      	ldr	r3, [pc, #20]	; (8012da0 <xTaskPriorityInherit+0xc4>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d201      	bcs.n	8012d96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012d92:	2301      	movs	r3, #1
 8012d94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012d96:	68fb      	ldr	r3, [r7, #12]
	}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20000814 	.word	0x20000814
 8012da4:	20000818 	.word	0x20000818
 8012da8:	20000cf0 	.word	0x20000cf0

08012dac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b086      	sub	sp, #24
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012db8:	2300      	movs	r3, #0
 8012dba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d056      	beq.n	8012e70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012dc2:	4b2e      	ldr	r3, [pc, #184]	; (8012e7c <xTaskPriorityDisinherit+0xd0>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	693a      	ldr	r2, [r7, #16]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d00a      	beq.n	8012de2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012dcc:	f04f 0310 	mov.w	r3, #16
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	60fb      	str	r3, [r7, #12]
}
 8012dde:	bf00      	nop
 8012de0:	e7fe      	b.n	8012de0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d10a      	bne.n	8012e00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012dea:	f04f 0310 	mov.w	r3, #16
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	60bb      	str	r3, [r7, #8]
}
 8012dfc:	bf00      	nop
 8012dfe:	e7fe      	b.n	8012dfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e04:	1e5a      	subs	r2, r3, #1
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d02c      	beq.n	8012e70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d128      	bne.n	8012e70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	3304      	adds	r3, #4
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fe f99a 	bl	801115c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e40:	4b0f      	ldr	r3, [pc, #60]	; (8012e80 <xTaskPriorityDisinherit+0xd4>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	429a      	cmp	r2, r3
 8012e46:	d903      	bls.n	8012e50 <xTaskPriorityDisinherit+0xa4>
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4c:	4a0c      	ldr	r2, [pc, #48]	; (8012e80 <xTaskPriorityDisinherit+0xd4>)
 8012e4e:	6013      	str	r3, [r2, #0]
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e54:	4613      	mov	r3, r2
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4a09      	ldr	r2, [pc, #36]	; (8012e84 <xTaskPriorityDisinherit+0xd8>)
 8012e5e:	441a      	add	r2, r3
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	3304      	adds	r3, #4
 8012e64:	4619      	mov	r1, r3
 8012e66:	4610      	mov	r0, r2
 8012e68:	f7fe f91b 	bl	80110a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e70:	697b      	ldr	r3, [r7, #20]
	}
 8012e72:	4618      	mov	r0, r3
 8012e74:	3718      	adds	r7, #24
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	20000814 	.word	0x20000814
 8012e80:	20000cf0 	.word	0x20000cf0
 8012e84:	20000818 	.word	0x20000818

08012e88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012e96:	2301      	movs	r3, #1
 8012e98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d06a      	beq.n	8012f76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10a      	bne.n	8012ebe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012ea8:	f04f 0310 	mov.w	r3, #16
 8012eac:	f383 8811 	msr	BASEPRI, r3
 8012eb0:	f3bf 8f6f 	isb	sy
 8012eb4:	f3bf 8f4f 	dsb	sy
 8012eb8:	60fb      	str	r3, [r7, #12]
}
 8012eba:	bf00      	nop
 8012ebc:	e7fe      	b.n	8012ebc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ec2:	683a      	ldr	r2, [r7, #0]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d902      	bls.n	8012ece <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	61fb      	str	r3, [r7, #28]
 8012ecc:	e002      	b.n	8012ed4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ed2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d04b      	beq.n	8012f76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ee2:	697a      	ldr	r2, [r7, #20]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d146      	bne.n	8012f76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ee8:	4b25      	ldr	r3, [pc, #148]	; (8012f80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	69ba      	ldr	r2, [r7, #24]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d10a      	bne.n	8012f08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012ef2:	f04f 0310 	mov.w	r3, #16
 8012ef6:	f383 8811 	msr	BASEPRI, r3
 8012efa:	f3bf 8f6f 	isb	sy
 8012efe:	f3bf 8f4f 	dsb	sy
 8012f02:	60bb      	str	r3, [r7, #8]
}
 8012f04:	bf00      	nop
 8012f06:	e7fe      	b.n	8012f06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	69fa      	ldr	r2, [r7, #28]
 8012f12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	699b      	ldr	r3, [r3, #24]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db04      	blt.n	8012f26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012f26:	69bb      	ldr	r3, [r7, #24]
 8012f28:	6959      	ldr	r1, [r3, #20]
 8012f2a:	693a      	ldr	r2, [r7, #16]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	4413      	add	r3, r2
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	4a13      	ldr	r2, [pc, #76]	; (8012f84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f36:	4413      	add	r3, r2
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	d11c      	bne.n	8012f76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f3c:	69bb      	ldr	r3, [r7, #24]
 8012f3e:	3304      	adds	r3, #4
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe f90b 	bl	801115c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f4a:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d903      	bls.n	8012f5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f56:	4a0c      	ldr	r2, [pc, #48]	; (8012f88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012f58:	6013      	str	r3, [r2, #0]
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5e:	4613      	mov	r3, r2
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	4413      	add	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4a07      	ldr	r2, [pc, #28]	; (8012f84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f68:	441a      	add	r2, r3
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	4619      	mov	r1, r3
 8012f70:	4610      	mov	r0, r2
 8012f72:	f7fe f896 	bl	80110a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f76:	bf00      	nop
 8012f78:	3720      	adds	r7, #32
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	20000814 	.word	0x20000814
 8012f84:	20000818 	.word	0x20000818
 8012f88:	20000cf0 	.word	0x20000cf0

08012f8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012f8c:	b480      	push	{r7}
 8012f8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d004      	beq.n	8012fa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012f98:	4b05      	ldr	r3, [pc, #20]	; (8012fb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f9e:	3201      	adds	r2, #1
 8012fa0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012fa2:	4b03      	ldr	r3, [pc, #12]	; (8012fb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
	}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr
 8012fb0:	20000814 	.word	0x20000814

08012fb4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012fbe:	4b21      	ldr	r3, [pc, #132]	; (8013044 <prvAddCurrentTaskToDelayedList+0x90>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fc4:	4b20      	ldr	r3, [pc, #128]	; (8013048 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	3304      	adds	r3, #4
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fe f8c6 	bl	801115c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd6:	d10a      	bne.n	8012fee <prvAddCurrentTaskToDelayedList+0x3a>
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d007      	beq.n	8012fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fde:	4b1a      	ldr	r3, [pc, #104]	; (8013048 <prvAddCurrentTaskToDelayedList+0x94>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	4819      	ldr	r0, [pc, #100]	; (801304c <prvAddCurrentTaskToDelayedList+0x98>)
 8012fe8:	f7fe f85b 	bl	80110a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012fec:	e026      	b.n	801303c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012ff6:	4b14      	ldr	r3, [pc, #80]	; (8013048 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	68ba      	ldr	r2, [r7, #8]
 8012ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	429a      	cmp	r2, r3
 8013004:	d209      	bcs.n	801301a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013006:	4b12      	ldr	r3, [pc, #72]	; (8013050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	4b0f      	ldr	r3, [pc, #60]	; (8013048 <prvAddCurrentTaskToDelayedList+0x94>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	3304      	adds	r3, #4
 8013010:	4619      	mov	r1, r3
 8013012:	4610      	mov	r0, r2
 8013014:	f7fe f869 	bl	80110ea <vListInsert>
}
 8013018:	e010      	b.n	801303c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801301a:	4b0e      	ldr	r3, [pc, #56]	; (8013054 <prvAddCurrentTaskToDelayedList+0xa0>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	4b0a      	ldr	r3, [pc, #40]	; (8013048 <prvAddCurrentTaskToDelayedList+0x94>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	3304      	adds	r3, #4
 8013024:	4619      	mov	r1, r3
 8013026:	4610      	mov	r0, r2
 8013028:	f7fe f85f 	bl	80110ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801302c:	4b0a      	ldr	r3, [pc, #40]	; (8013058 <prvAddCurrentTaskToDelayedList+0xa4>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	68ba      	ldr	r2, [r7, #8]
 8013032:	429a      	cmp	r2, r3
 8013034:	d202      	bcs.n	801303c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013036:	4a08      	ldr	r2, [pc, #32]	; (8013058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	6013      	str	r3, [r2, #0]
}
 801303c:	bf00      	nop
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	20000cec 	.word	0x20000cec
 8013048:	20000814 	.word	0x20000814
 801304c:	20000cd4 	.word	0x20000cd4
 8013050:	20000ca4 	.word	0x20000ca4
 8013054:	20000ca0 	.word	0x20000ca0
 8013058:	20000d08 	.word	0x20000d08

0801305c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08a      	sub	sp, #40	; 0x28
 8013060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013062:	2300      	movs	r3, #0
 8013064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013066:	f000 fb07 	bl	8013678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801306a:	4b1c      	ldr	r3, [pc, #112]	; (80130dc <xTimerCreateTimerTask+0x80>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d021      	beq.n	80130b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013072:	2300      	movs	r3, #0
 8013074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013076:	2300      	movs	r3, #0
 8013078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801307a:	1d3a      	adds	r2, r7, #4
 801307c:	f107 0108 	add.w	r1, r7, #8
 8013080:	f107 030c 	add.w	r3, r7, #12
 8013084:	4618      	mov	r0, r3
 8013086:	f7fd ffc5 	bl	8011014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801308a:	6879      	ldr	r1, [r7, #4]
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	9202      	str	r2, [sp, #8]
 8013092:	9301      	str	r3, [sp, #4]
 8013094:	2300      	movs	r3, #0
 8013096:	9300      	str	r3, [sp, #0]
 8013098:	2300      	movs	r3, #0
 801309a:	460a      	mov	r2, r1
 801309c:	4910      	ldr	r1, [pc, #64]	; (80130e0 <xTimerCreateTimerTask+0x84>)
 801309e:	4811      	ldr	r0, [pc, #68]	; (80130e4 <xTimerCreateTimerTask+0x88>)
 80130a0:	f7fe ffe0 	bl	8012064 <xTaskCreateStatic>
 80130a4:	4603      	mov	r3, r0
 80130a6:	4a10      	ldr	r2, [pc, #64]	; (80130e8 <xTimerCreateTimerTask+0x8c>)
 80130a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80130aa:	4b0f      	ldr	r3, [pc, #60]	; (80130e8 <xTimerCreateTimerTask+0x8c>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d001      	beq.n	80130b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80130b2:	2301      	movs	r3, #1
 80130b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d10a      	bne.n	80130d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80130bc:	f04f 0310 	mov.w	r3, #16
 80130c0:	f383 8811 	msr	BASEPRI, r3
 80130c4:	f3bf 8f6f 	isb	sy
 80130c8:	f3bf 8f4f 	dsb	sy
 80130cc:	613b      	str	r3, [r7, #16]
}
 80130ce:	bf00      	nop
 80130d0:	e7fe      	b.n	80130d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80130d2:	697b      	ldr	r3, [r7, #20]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3718      	adds	r7, #24
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	20000d44 	.word	0x20000d44
 80130e0:	08014824 	.word	0x08014824
 80130e4:	08013221 	.word	0x08013221
 80130e8:	20000d48 	.word	0x20000d48

080130ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
 80130f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d10a      	bne.n	801311a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013104:	f04f 0310 	mov.w	r3, #16
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	623b      	str	r3, [r7, #32]
}
 8013116:	bf00      	nop
 8013118:	e7fe      	b.n	8013118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801311a:	4b1a      	ldr	r3, [pc, #104]	; (8013184 <xTimerGenericCommand+0x98>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d02a      	beq.n	8013178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	2b05      	cmp	r3, #5
 8013132:	dc18      	bgt.n	8013166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013134:	f7ff fdb4 	bl	8012ca0 <xTaskGetSchedulerState>
 8013138:	4603      	mov	r3, r0
 801313a:	2b02      	cmp	r3, #2
 801313c:	d109      	bne.n	8013152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801313e:	4b11      	ldr	r3, [pc, #68]	; (8013184 <xTimerGenericCommand+0x98>)
 8013140:	6818      	ldr	r0, [r3, #0]
 8013142:	f107 0110 	add.w	r1, r7, #16
 8013146:	2300      	movs	r3, #0
 8013148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314a:	f7fe f975 	bl	8011438 <xQueueGenericSend>
 801314e:	6278      	str	r0, [r7, #36]	; 0x24
 8013150:	e012      	b.n	8013178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013152:	4b0c      	ldr	r3, [pc, #48]	; (8013184 <xTimerGenericCommand+0x98>)
 8013154:	6818      	ldr	r0, [r3, #0]
 8013156:	f107 0110 	add.w	r1, r7, #16
 801315a:	2300      	movs	r3, #0
 801315c:	2200      	movs	r2, #0
 801315e:	f7fe f96b 	bl	8011438 <xQueueGenericSend>
 8013162:	6278      	str	r0, [r7, #36]	; 0x24
 8013164:	e008      	b.n	8013178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013166:	4b07      	ldr	r3, [pc, #28]	; (8013184 <xTimerGenericCommand+0x98>)
 8013168:	6818      	ldr	r0, [r3, #0]
 801316a:	f107 0110 	add.w	r1, r7, #16
 801316e:	2300      	movs	r3, #0
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	f7fe fa5f 	bl	8011634 <xQueueGenericSendFromISR>
 8013176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801317a:	4618      	mov	r0, r3
 801317c:	3728      	adds	r7, #40	; 0x28
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	20000d44 	.word	0x20000d44

08013188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b088      	sub	sp, #32
 801318c:	af02      	add	r7, sp, #8
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013192:	4b22      	ldr	r3, [pc, #136]	; (801321c <prvProcessExpiredTimer+0x94>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	3304      	adds	r3, #4
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fd ffdb 	bl	801115c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131ac:	f003 0304 	and.w	r3, r3, #4
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d022      	beq.n	80131fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	699a      	ldr	r2, [r3, #24]
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	18d1      	adds	r1, r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	683a      	ldr	r2, [r7, #0]
 80131c0:	6978      	ldr	r0, [r7, #20]
 80131c2:	f000 f8d1 	bl	8013368 <prvInsertTimerInActiveList>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d01f      	beq.n	801320c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131cc:	2300      	movs	r3, #0
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	2300      	movs	r3, #0
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	2100      	movs	r1, #0
 80131d6:	6978      	ldr	r0, [r7, #20]
 80131d8:	f7ff ff88 	bl	80130ec <xTimerGenericCommand>
 80131dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d113      	bne.n	801320c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80131e4:	f04f 0310 	mov.w	r3, #16
 80131e8:	f383 8811 	msr	BASEPRI, r3
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	60fb      	str	r3, [r7, #12]
}
 80131f6:	bf00      	nop
 80131f8:	e7fe      	b.n	80131f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013200:	f023 0301 	bic.w	r3, r3, #1
 8013204:	b2da      	uxtb	r2, r3
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	6a1b      	ldr	r3, [r3, #32]
 8013210:	6978      	ldr	r0, [r7, #20]
 8013212:	4798      	blx	r3
}
 8013214:	bf00      	nop
 8013216:	3718      	adds	r7, #24
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	20000d3c 	.word	0x20000d3c

08013220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013228:	f107 0308 	add.w	r3, r7, #8
 801322c:	4618      	mov	r0, r3
 801322e:	f000 f857 	bl	80132e0 <prvGetNextExpireTime>
 8013232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	4619      	mov	r1, r3
 8013238:	68f8      	ldr	r0, [r7, #12]
 801323a:	f000 f803 	bl	8013244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801323e:	f000 f8d5 	bl	80133ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013242:	e7f1      	b.n	8013228 <prvTimerTask+0x8>

08013244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801324e:	f7ff f945 	bl	80124dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013252:	f107 0308 	add.w	r3, r7, #8
 8013256:	4618      	mov	r0, r3
 8013258:	f000 f866 	bl	8013328 <prvSampleTimeNow>
 801325c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d130      	bne.n	80132c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d10a      	bne.n	8013280 <prvProcessTimerOrBlockTask+0x3c>
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	429a      	cmp	r2, r3
 8013270:	d806      	bhi.n	8013280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013272:	f7ff f941 	bl	80124f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013276:	68f9      	ldr	r1, [r7, #12]
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff ff85 	bl	8013188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801327e:	e024      	b.n	80132ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d008      	beq.n	8013298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013286:	4b13      	ldr	r3, [pc, #76]	; (80132d4 <prvProcessTimerOrBlockTask+0x90>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <prvProcessTimerOrBlockTask+0x50>
 8013290:	2301      	movs	r3, #1
 8013292:	e000      	b.n	8013296 <prvProcessTimerOrBlockTask+0x52>
 8013294:	2300      	movs	r3, #0
 8013296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013298:	4b0f      	ldr	r3, [pc, #60]	; (80132d8 <prvProcessTimerOrBlockTask+0x94>)
 801329a:	6818      	ldr	r0, [r3, #0]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	683a      	ldr	r2, [r7, #0]
 80132a4:	4619      	mov	r1, r3
 80132a6:	f7fe fea9 	bl	8011ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80132aa:	f7ff f925 	bl	80124f8 <xTaskResumeAll>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10a      	bne.n	80132ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80132b4:	4b09      	ldr	r3, [pc, #36]	; (80132dc <prvProcessTimerOrBlockTask+0x98>)
 80132b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ba:	601a      	str	r2, [r3, #0]
 80132bc:	f3bf 8f4f 	dsb	sy
 80132c0:	f3bf 8f6f 	isb	sy
}
 80132c4:	e001      	b.n	80132ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80132c6:	f7ff f917 	bl	80124f8 <xTaskResumeAll>
}
 80132ca:	bf00      	nop
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	20000d40 	.word	0x20000d40
 80132d8:	20000d44 	.word	0x20000d44
 80132dc:	e000ed04 	.word	0xe000ed04

080132e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80132e0:	b480      	push	{r7}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80132e8:	4b0e      	ldr	r3, [pc, #56]	; (8013324 <prvGetNextExpireTime+0x44>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <prvGetNextExpireTime+0x16>
 80132f2:	2201      	movs	r2, #1
 80132f4:	e000      	b.n	80132f8 <prvGetNextExpireTime+0x18>
 80132f6:	2200      	movs	r2, #0
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d105      	bne.n	8013310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013304:	4b07      	ldr	r3, [pc, #28]	; (8013324 <prvGetNextExpireTime+0x44>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	60fb      	str	r3, [r7, #12]
 801330e:	e001      	b.n	8013314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013314:	68fb      	ldr	r3, [r7, #12]
}
 8013316:	4618      	mov	r0, r3
 8013318:	3714      	adds	r7, #20
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	20000d3c 	.word	0x20000d3c

08013328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013330:	f7ff f980 	bl	8012634 <xTaskGetTickCount>
 8013334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013336:	4b0b      	ldr	r3, [pc, #44]	; (8013364 <prvSampleTimeNow+0x3c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	429a      	cmp	r2, r3
 801333e:	d205      	bcs.n	801334c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013340:	f000 f936 	bl	80135b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2201      	movs	r2, #1
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	e002      	b.n	8013352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013352:	4a04      	ldr	r2, [pc, #16]	; (8013364 <prvSampleTimeNow+0x3c>)
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013358:	68fb      	ldr	r3, [r7, #12]
}
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	20000d4c 	.word	0x20000d4c

08013368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b086      	sub	sp, #24
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013376:	2300      	movs	r3, #0
 8013378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	68ba      	ldr	r2, [r7, #8]
 801337e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013386:	68ba      	ldr	r2, [r7, #8]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	429a      	cmp	r2, r3
 801338c:	d812      	bhi.n	80133b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	1ad2      	subs	r2, r2, r3
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	699b      	ldr	r3, [r3, #24]
 8013398:	429a      	cmp	r2, r3
 801339a:	d302      	bcc.n	80133a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801339c:	2301      	movs	r3, #1
 801339e:	617b      	str	r3, [r7, #20]
 80133a0:	e01b      	b.n	80133da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80133a2:	4b10      	ldr	r3, [pc, #64]	; (80133e4 <prvInsertTimerInActiveList+0x7c>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	3304      	adds	r3, #4
 80133aa:	4619      	mov	r1, r3
 80133ac:	4610      	mov	r0, r2
 80133ae:	f7fd fe9c 	bl	80110ea <vListInsert>
 80133b2:	e012      	b.n	80133da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d206      	bcs.n	80133ca <prvInsertTimerInActiveList+0x62>
 80133bc:	68ba      	ldr	r2, [r7, #8]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d302      	bcc.n	80133ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80133c4:	2301      	movs	r3, #1
 80133c6:	617b      	str	r3, [r7, #20]
 80133c8:	e007      	b.n	80133da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80133ca:	4b07      	ldr	r3, [pc, #28]	; (80133e8 <prvInsertTimerInActiveList+0x80>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	3304      	adds	r3, #4
 80133d2:	4619      	mov	r1, r3
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7fd fe88 	bl	80110ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80133da:	697b      	ldr	r3, [r7, #20]
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3718      	adds	r7, #24
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	20000d40 	.word	0x20000d40
 80133e8:	20000d3c 	.word	0x20000d3c

080133ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b08e      	sub	sp, #56	; 0x38
 80133f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80133f2:	e0ca      	b.n	801358a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	da18      	bge.n	801342c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80133fa:	1d3b      	adds	r3, r7, #4
 80133fc:	3304      	adds	r3, #4
 80133fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013402:	2b00      	cmp	r3, #0
 8013404:	d10a      	bne.n	801341c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013406:	f04f 0310 	mov.w	r3, #16
 801340a:	f383 8811 	msr	BASEPRI, r3
 801340e:	f3bf 8f6f 	isb	sy
 8013412:	f3bf 8f4f 	dsb	sy
 8013416:	61fb      	str	r3, [r7, #28]
}
 8013418:	bf00      	nop
 801341a:	e7fe      	b.n	801341a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013422:	6850      	ldr	r0, [r2, #4]
 8013424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013426:	6892      	ldr	r2, [r2, #8]
 8013428:	4611      	mov	r1, r2
 801342a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f2c0 80aa 	blt.w	8013588 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	695b      	ldr	r3, [r3, #20]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d004      	beq.n	801344a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	3304      	adds	r3, #4
 8013444:	4618      	mov	r0, r3
 8013446:	f7fd fe89 	bl	801115c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801344a:	463b      	mov	r3, r7
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff ff6b 	bl	8013328 <prvSampleTimeNow>
 8013452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	2b09      	cmp	r3, #9
 8013458:	f200 8097 	bhi.w	801358a <prvProcessReceivedCommands+0x19e>
 801345c:	a201      	add	r2, pc, #4	; (adr r2, 8013464 <prvProcessReceivedCommands+0x78>)
 801345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013462:	bf00      	nop
 8013464:	0801348d 	.word	0x0801348d
 8013468:	0801348d 	.word	0x0801348d
 801346c:	0801348d 	.word	0x0801348d
 8013470:	08013501 	.word	0x08013501
 8013474:	08013515 	.word	0x08013515
 8013478:	0801355f 	.word	0x0801355f
 801347c:	0801348d 	.word	0x0801348d
 8013480:	0801348d 	.word	0x0801348d
 8013484:	08013501 	.word	0x08013501
 8013488:	08013515 	.word	0x08013515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013492:	f043 0301 	orr.w	r3, r3, #1
 8013496:	b2da      	uxtb	r2, r3
 8013498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801349e:	68ba      	ldr	r2, [r7, #8]
 80134a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a2:	699b      	ldr	r3, [r3, #24]
 80134a4:	18d1      	adds	r1, r2, r3
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134ac:	f7ff ff5c 	bl	8013368 <prvInsertTimerInActiveList>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d069      	beq.n	801358a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b8:	6a1b      	ldr	r3, [r3, #32]
 80134ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134c4:	f003 0304 	and.w	r3, r3, #4
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d05e      	beq.n	801358a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d0:	699b      	ldr	r3, [r3, #24]
 80134d2:	441a      	add	r2, r3
 80134d4:	2300      	movs	r3, #0
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	2300      	movs	r3, #0
 80134da:	2100      	movs	r1, #0
 80134dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134de:	f7ff fe05 	bl	80130ec <xTimerGenericCommand>
 80134e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80134e4:	6a3b      	ldr	r3, [r7, #32]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d14f      	bne.n	801358a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80134ea:	f04f 0310 	mov.w	r3, #16
 80134ee:	f383 8811 	msr	BASEPRI, r3
 80134f2:	f3bf 8f6f 	isb	sy
 80134f6:	f3bf 8f4f 	dsb	sy
 80134fa:	61bb      	str	r3, [r7, #24]
}
 80134fc:	bf00      	nop
 80134fe:	e7fe      	b.n	80134fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013506:	f023 0301 	bic.w	r3, r3, #1
 801350a:	b2da      	uxtb	r2, r3
 801350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013512:	e03a      	b.n	801358a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801351a:	f043 0301 	orr.w	r3, r3, #1
 801351e:	b2da      	uxtb	r2, r3
 8013520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013526:	68ba      	ldr	r2, [r7, #8]
 8013528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d10a      	bne.n	801354a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013534:	f04f 0310 	mov.w	r3, #16
 8013538:	f383 8811 	msr	BASEPRI, r3
 801353c:	f3bf 8f6f 	isb	sy
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	617b      	str	r3, [r7, #20]
}
 8013546:	bf00      	nop
 8013548:	e7fe      	b.n	8013548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801354c:	699a      	ldr	r2, [r3, #24]
 801354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013550:	18d1      	adds	r1, r2, r3
 8013552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013558:	f7ff ff06 	bl	8013368 <prvInsertTimerInActiveList>
					break;
 801355c:	e015      	b.n	801358a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013564:	f003 0302 	and.w	r3, r3, #2
 8013568:	2b00      	cmp	r3, #0
 801356a:	d103      	bne.n	8013574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801356c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801356e:	f000 fbd7 	bl	8013d20 <vPortFree>
 8013572:	e00a      	b.n	801358a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801357a:	f023 0301 	bic.w	r3, r3, #1
 801357e:	b2da      	uxtb	r2, r3
 8013580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013586:	e000      	b.n	801358a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801358a:	4b08      	ldr	r3, [pc, #32]	; (80135ac <prvProcessReceivedCommands+0x1c0>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	1d39      	adds	r1, r7, #4
 8013590:	2200      	movs	r2, #0
 8013592:	4618      	mov	r0, r3
 8013594:	f7fe f974 	bl	8011880 <xQueueReceive>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	f47f af2a 	bne.w	80133f4 <prvProcessReceivedCommands+0x8>
	}
}
 80135a0:	bf00      	nop
 80135a2:	bf00      	nop
 80135a4:	3730      	adds	r7, #48	; 0x30
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	20000d44 	.word	0x20000d44

080135b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b088      	sub	sp, #32
 80135b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80135b6:	e048      	b.n	801364a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135b8:	4b2d      	ldr	r3, [pc, #180]	; (8013670 <prvSwitchTimerLists+0xc0>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135c2:	4b2b      	ldr	r3, [pc, #172]	; (8013670 <prvSwitchTimerLists+0xc0>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	68db      	ldr	r3, [r3, #12]
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	3304      	adds	r3, #4
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fd fdc3 	bl	801115c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	6a1b      	ldr	r3, [r3, #32]
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135e4:	f003 0304 	and.w	r3, r3, #4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d02e      	beq.n	801364a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	693a      	ldr	r2, [r7, #16]
 80135f2:	4413      	add	r3, r2
 80135f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80135f6:	68ba      	ldr	r2, [r7, #8]
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d90e      	bls.n	801361c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68fa      	ldr	r2, [r7, #12]
 8013608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801360a:	4b19      	ldr	r3, [pc, #100]	; (8013670 <prvSwitchTimerLists+0xc0>)
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	3304      	adds	r3, #4
 8013612:	4619      	mov	r1, r3
 8013614:	4610      	mov	r0, r2
 8013616:	f7fd fd68 	bl	80110ea <vListInsert>
 801361a:	e016      	b.n	801364a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801361c:	2300      	movs	r3, #0
 801361e:	9300      	str	r3, [sp, #0]
 8013620:	2300      	movs	r3, #0
 8013622:	693a      	ldr	r2, [r7, #16]
 8013624:	2100      	movs	r1, #0
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f7ff fd60 	bl	80130ec <xTimerGenericCommand>
 801362c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10a      	bne.n	801364a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013634:	f04f 0310 	mov.w	r3, #16
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	603b      	str	r3, [r7, #0]
}
 8013646:	bf00      	nop
 8013648:	e7fe      	b.n	8013648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801364a:	4b09      	ldr	r3, [pc, #36]	; (8013670 <prvSwitchTimerLists+0xc0>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d1b1      	bne.n	80135b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013654:	4b06      	ldr	r3, [pc, #24]	; (8013670 <prvSwitchTimerLists+0xc0>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801365a:	4b06      	ldr	r3, [pc, #24]	; (8013674 <prvSwitchTimerLists+0xc4>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	4a04      	ldr	r2, [pc, #16]	; (8013670 <prvSwitchTimerLists+0xc0>)
 8013660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013662:	4a04      	ldr	r2, [pc, #16]	; (8013674 <prvSwitchTimerLists+0xc4>)
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	6013      	str	r3, [r2, #0]
}
 8013668:	bf00      	nop
 801366a:	3718      	adds	r7, #24
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	20000d3c 	.word	0x20000d3c
 8013674:	20000d40 	.word	0x20000d40

08013678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801367e:	f000 f969 	bl	8013954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013682:	4b15      	ldr	r3, [pc, #84]	; (80136d8 <prvCheckForValidListAndQueue+0x60>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d120      	bne.n	80136cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801368a:	4814      	ldr	r0, [pc, #80]	; (80136dc <prvCheckForValidListAndQueue+0x64>)
 801368c:	f7fd fcdc 	bl	8011048 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013690:	4813      	ldr	r0, [pc, #76]	; (80136e0 <prvCheckForValidListAndQueue+0x68>)
 8013692:	f7fd fcd9 	bl	8011048 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013696:	4b13      	ldr	r3, [pc, #76]	; (80136e4 <prvCheckForValidListAndQueue+0x6c>)
 8013698:	4a10      	ldr	r2, [pc, #64]	; (80136dc <prvCheckForValidListAndQueue+0x64>)
 801369a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801369c:	4b12      	ldr	r3, [pc, #72]	; (80136e8 <prvCheckForValidListAndQueue+0x70>)
 801369e:	4a10      	ldr	r2, [pc, #64]	; (80136e0 <prvCheckForValidListAndQueue+0x68>)
 80136a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80136a2:	2300      	movs	r3, #0
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	4b11      	ldr	r3, [pc, #68]	; (80136ec <prvCheckForValidListAndQueue+0x74>)
 80136a8:	4a11      	ldr	r2, [pc, #68]	; (80136f0 <prvCheckForValidListAndQueue+0x78>)
 80136aa:	2110      	movs	r1, #16
 80136ac:	200a      	movs	r0, #10
 80136ae:	f7fd fde7 	bl	8011280 <xQueueGenericCreateStatic>
 80136b2:	4603      	mov	r3, r0
 80136b4:	4a08      	ldr	r2, [pc, #32]	; (80136d8 <prvCheckForValidListAndQueue+0x60>)
 80136b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80136b8:	4b07      	ldr	r3, [pc, #28]	; (80136d8 <prvCheckForValidListAndQueue+0x60>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d005      	beq.n	80136cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80136c0:	4b05      	ldr	r3, [pc, #20]	; (80136d8 <prvCheckForValidListAndQueue+0x60>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	490b      	ldr	r1, [pc, #44]	; (80136f4 <prvCheckForValidListAndQueue+0x7c>)
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fe fc6e 	bl	8011fa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136cc:	f000 f972 	bl	80139b4 <vPortExitCritical>
}
 80136d0:	bf00      	nop
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	20000d44 	.word	0x20000d44
 80136dc:	20000d14 	.word	0x20000d14
 80136e0:	20000d28 	.word	0x20000d28
 80136e4:	20000d3c 	.word	0x20000d3c
 80136e8:	20000d40 	.word	0x20000d40
 80136ec:	20000df0 	.word	0x20000df0
 80136f0:	20000d50 	.word	0x20000d50
 80136f4:	0801482c 	.word	0x0801482c

080136f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80136f8:	b480      	push	{r7}
 80136fa:	b085      	sub	sp, #20
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	3b04      	subs	r3, #4
 8013708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	3b04      	subs	r3, #4
 8013716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	f023 0201 	bic.w	r2, r3, #1
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	3b04      	subs	r3, #4
 8013726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013728:	4a0c      	ldr	r2, [pc, #48]	; (801375c <pxPortInitialiseStack+0x64>)
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	3b14      	subs	r3, #20
 8013732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	3b04      	subs	r3, #4
 801373e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f06f 0202 	mvn.w	r2, #2
 8013746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	3b20      	subs	r3, #32
 801374c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801374e:	68fb      	ldr	r3, [r7, #12]
}
 8013750:	4618      	mov	r0, r3
 8013752:	3714      	adds	r7, #20
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr
 801375c:	08013761 	.word	0x08013761

08013760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801376a:	4b12      	ldr	r3, [pc, #72]	; (80137b4 <prvTaskExitError+0x54>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013772:	d00a      	beq.n	801378a <prvTaskExitError+0x2a>
	__asm volatile
 8013774:	f04f 0310 	mov.w	r3, #16
 8013778:	f383 8811 	msr	BASEPRI, r3
 801377c:	f3bf 8f6f 	isb	sy
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	60fb      	str	r3, [r7, #12]
}
 8013786:	bf00      	nop
 8013788:	e7fe      	b.n	8013788 <prvTaskExitError+0x28>
	__asm volatile
 801378a:	f04f 0310 	mov.w	r3, #16
 801378e:	f383 8811 	msr	BASEPRI, r3
 8013792:	f3bf 8f6f 	isb	sy
 8013796:	f3bf 8f4f 	dsb	sy
 801379a:	60bb      	str	r3, [r7, #8]
}
 801379c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801379e:	bf00      	nop
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d0fc      	beq.n	80137a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137a6:	bf00      	nop
 80137a8:	bf00      	nop
 80137aa:	3714      	adds	r7, #20
 80137ac:	46bd      	mov	sp, r7
 80137ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b2:	4770      	bx	lr
 80137b4:	200000b8 	.word	0x200000b8
	...

080137c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80137c0:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <pxCurrentTCBConst2>)
 80137c2:	6819      	ldr	r1, [r3, #0]
 80137c4:	6808      	ldr	r0, [r1, #0]
 80137c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ca:	f380 8809 	msr	PSP, r0
 80137ce:	f3bf 8f6f 	isb	sy
 80137d2:	f04f 0000 	mov.w	r0, #0
 80137d6:	f380 8811 	msr	BASEPRI, r0
 80137da:	4770      	bx	lr
 80137dc:	f3af 8000 	nop.w

080137e0 <pxCurrentTCBConst2>:
 80137e0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137e4:	bf00      	nop
 80137e6:	bf00      	nop

080137e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80137e8:	4808      	ldr	r0, [pc, #32]	; (801380c <prvPortStartFirstTask+0x24>)
 80137ea:	6800      	ldr	r0, [r0, #0]
 80137ec:	6800      	ldr	r0, [r0, #0]
 80137ee:	f380 8808 	msr	MSP, r0
 80137f2:	f04f 0000 	mov.w	r0, #0
 80137f6:	f380 8814 	msr	CONTROL, r0
 80137fa:	b662      	cpsie	i
 80137fc:	b661      	cpsie	f
 80137fe:	f3bf 8f4f 	dsb	sy
 8013802:	f3bf 8f6f 	isb	sy
 8013806:	df00      	svc	0
 8013808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801380a:	bf00      	nop
 801380c:	e000ed08 	.word	0xe000ed08

08013810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b086      	sub	sp, #24
 8013814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013816:	4b46      	ldr	r3, [pc, #280]	; (8013930 <xPortStartScheduler+0x120>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4a46      	ldr	r2, [pc, #280]	; (8013934 <xPortStartScheduler+0x124>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d10a      	bne.n	8013836 <xPortStartScheduler+0x26>
	__asm volatile
 8013820:	f04f 0310 	mov.w	r3, #16
 8013824:	f383 8811 	msr	BASEPRI, r3
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	613b      	str	r3, [r7, #16]
}
 8013832:	bf00      	nop
 8013834:	e7fe      	b.n	8013834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013836:	4b3e      	ldr	r3, [pc, #248]	; (8013930 <xPortStartScheduler+0x120>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	4a3f      	ldr	r2, [pc, #252]	; (8013938 <xPortStartScheduler+0x128>)
 801383c:	4293      	cmp	r3, r2
 801383e:	d10a      	bne.n	8013856 <xPortStartScheduler+0x46>
	__asm volatile
 8013840:	f04f 0310 	mov.w	r3, #16
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	60fb      	str	r3, [r7, #12]
}
 8013852:	bf00      	nop
 8013854:	e7fe      	b.n	8013854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013856:	4b39      	ldr	r3, [pc, #228]	; (801393c <xPortStartScheduler+0x12c>)
 8013858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	b2db      	uxtb	r3, r3
 8013860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	22ff      	movs	r2, #255	; 0xff
 8013866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	b2db      	uxtb	r3, r3
 801386e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013870:	78fb      	ldrb	r3, [r7, #3]
 8013872:	b2db      	uxtb	r3, r3
 8013874:	f003 0310 	and.w	r3, r3, #16
 8013878:	b2da      	uxtb	r2, r3
 801387a:	4b31      	ldr	r3, [pc, #196]	; (8013940 <xPortStartScheduler+0x130>)
 801387c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801387e:	4b31      	ldr	r3, [pc, #196]	; (8013944 <xPortStartScheduler+0x134>)
 8013880:	2207      	movs	r2, #7
 8013882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013884:	e009      	b.n	801389a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013886:	4b2f      	ldr	r3, [pc, #188]	; (8013944 <xPortStartScheduler+0x134>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	3b01      	subs	r3, #1
 801388c:	4a2d      	ldr	r2, [pc, #180]	; (8013944 <xPortStartScheduler+0x134>)
 801388e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013890:	78fb      	ldrb	r3, [r7, #3]
 8013892:	b2db      	uxtb	r3, r3
 8013894:	005b      	lsls	r3, r3, #1
 8013896:	b2db      	uxtb	r3, r3
 8013898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801389a:	78fb      	ldrb	r3, [r7, #3]
 801389c:	b2db      	uxtb	r3, r3
 801389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138a2:	2b80      	cmp	r3, #128	; 0x80
 80138a4:	d0ef      	beq.n	8013886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80138a6:	4b27      	ldr	r3, [pc, #156]	; (8013944 <xPortStartScheduler+0x134>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	f1c3 0307 	rsb	r3, r3, #7
 80138ae:	2b04      	cmp	r3, #4
 80138b0:	d00a      	beq.n	80138c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80138b2:	f04f 0310 	mov.w	r3, #16
 80138b6:	f383 8811 	msr	BASEPRI, r3
 80138ba:	f3bf 8f6f 	isb	sy
 80138be:	f3bf 8f4f 	dsb	sy
 80138c2:	60bb      	str	r3, [r7, #8]
}
 80138c4:	bf00      	nop
 80138c6:	e7fe      	b.n	80138c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138c8:	4b1e      	ldr	r3, [pc, #120]	; (8013944 <xPortStartScheduler+0x134>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	021b      	lsls	r3, r3, #8
 80138ce:	4a1d      	ldr	r2, [pc, #116]	; (8013944 <xPortStartScheduler+0x134>)
 80138d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80138d2:	4b1c      	ldr	r3, [pc, #112]	; (8013944 <xPortStartScheduler+0x134>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80138da:	4a1a      	ldr	r2, [pc, #104]	; (8013944 <xPortStartScheduler+0x134>)
 80138dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	b2da      	uxtb	r2, r3
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138e6:	4b18      	ldr	r3, [pc, #96]	; (8013948 <xPortStartScheduler+0x138>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4a17      	ldr	r2, [pc, #92]	; (8013948 <xPortStartScheduler+0x138>)
 80138ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80138f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138f2:	4b15      	ldr	r3, [pc, #84]	; (8013948 <xPortStartScheduler+0x138>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4a14      	ldr	r2, [pc, #80]	; (8013948 <xPortStartScheduler+0x138>)
 80138f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80138fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80138fe:	f000 f8dd 	bl	8013abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013902:	4b12      	ldr	r3, [pc, #72]	; (801394c <xPortStartScheduler+0x13c>)
 8013904:	2200      	movs	r2, #0
 8013906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013908:	f000 f8fc 	bl	8013b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801390c:	4b10      	ldr	r3, [pc, #64]	; (8013950 <xPortStartScheduler+0x140>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a0f      	ldr	r2, [pc, #60]	; (8013950 <xPortStartScheduler+0x140>)
 8013912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013918:	f7ff ff66 	bl	80137e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801391c:	f7fe ff54 	bl	80127c8 <vTaskSwitchContext>
	prvTaskExitError();
 8013920:	f7ff ff1e 	bl	8013760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013924:	2300      	movs	r3, #0
}
 8013926:	4618      	mov	r0, r3
 8013928:	3718      	adds	r7, #24
 801392a:	46bd      	mov	sp, r7
 801392c:	bd80      	pop	{r7, pc}
 801392e:	bf00      	nop
 8013930:	e000ed00 	.word	0xe000ed00
 8013934:	410fc271 	.word	0x410fc271
 8013938:	410fc270 	.word	0x410fc270
 801393c:	e000e400 	.word	0xe000e400
 8013940:	20000e40 	.word	0x20000e40
 8013944:	20000e44 	.word	0x20000e44
 8013948:	e000ed20 	.word	0xe000ed20
 801394c:	200000b8 	.word	0x200000b8
 8013950:	e000ef34 	.word	0xe000ef34

08013954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
	__asm volatile
 801395a:	f04f 0310 	mov.w	r3, #16
 801395e:	f383 8811 	msr	BASEPRI, r3
 8013962:	f3bf 8f6f 	isb	sy
 8013966:	f3bf 8f4f 	dsb	sy
 801396a:	607b      	str	r3, [r7, #4]
}
 801396c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801396e:	4b0f      	ldr	r3, [pc, #60]	; (80139ac <vPortEnterCritical+0x58>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	3301      	adds	r3, #1
 8013974:	4a0d      	ldr	r2, [pc, #52]	; (80139ac <vPortEnterCritical+0x58>)
 8013976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013978:	4b0c      	ldr	r3, [pc, #48]	; (80139ac <vPortEnterCritical+0x58>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d10f      	bne.n	80139a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013980:	4b0b      	ldr	r3, [pc, #44]	; (80139b0 <vPortEnterCritical+0x5c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801398a:	f04f 0310 	mov.w	r3, #16
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	603b      	str	r3, [r7, #0]
}
 801399c:	bf00      	nop
 801399e:	e7fe      	b.n	801399e <vPortEnterCritical+0x4a>
	}
}
 80139a0:	bf00      	nop
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr
 80139ac:	200000b8 	.word	0x200000b8
 80139b0:	e000ed04 	.word	0xe000ed04

080139b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80139b4:	b480      	push	{r7}
 80139b6:	b083      	sub	sp, #12
 80139b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80139ba:	4b12      	ldr	r3, [pc, #72]	; (8013a04 <vPortExitCritical+0x50>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d10a      	bne.n	80139d8 <vPortExitCritical+0x24>
	__asm volatile
 80139c2:	f04f 0310 	mov.w	r3, #16
 80139c6:	f383 8811 	msr	BASEPRI, r3
 80139ca:	f3bf 8f6f 	isb	sy
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	607b      	str	r3, [r7, #4]
}
 80139d4:	bf00      	nop
 80139d6:	e7fe      	b.n	80139d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80139d8:	4b0a      	ldr	r3, [pc, #40]	; (8013a04 <vPortExitCritical+0x50>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3b01      	subs	r3, #1
 80139de:	4a09      	ldr	r2, [pc, #36]	; (8013a04 <vPortExitCritical+0x50>)
 80139e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139e2:	4b08      	ldr	r3, [pc, #32]	; (8013a04 <vPortExitCritical+0x50>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d105      	bne.n	80139f6 <vPortExitCritical+0x42>
 80139ea:	2300      	movs	r3, #0
 80139ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	f383 8811 	msr	BASEPRI, r3
}
 80139f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80139f6:	bf00      	nop
 80139f8:	370c      	adds	r7, #12
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	200000b8 	.word	0x200000b8
	...

08013a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013a10:	f3ef 8009 	mrs	r0, PSP
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	4b15      	ldr	r3, [pc, #84]	; (8013a70 <pxCurrentTCBConst>)
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	f01e 0f10 	tst.w	lr, #16
 8013a20:	bf08      	it	eq
 8013a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a2a:	6010      	str	r0, [r2, #0]
 8013a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013a30:	f04f 0010 	mov.w	r0, #16
 8013a34:	f380 8811 	msr	BASEPRI, r0
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	f3bf 8f6f 	isb	sy
 8013a40:	f7fe fec2 	bl	80127c8 <vTaskSwitchContext>
 8013a44:	f04f 0000 	mov.w	r0, #0
 8013a48:	f380 8811 	msr	BASEPRI, r0
 8013a4c:	bc09      	pop	{r0, r3}
 8013a4e:	6819      	ldr	r1, [r3, #0]
 8013a50:	6808      	ldr	r0, [r1, #0]
 8013a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a56:	f01e 0f10 	tst.w	lr, #16
 8013a5a:	bf08      	it	eq
 8013a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a60:	f380 8809 	msr	PSP, r0
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	f3af 8000 	nop.w

08013a70 <pxCurrentTCBConst>:
 8013a70:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a74:	bf00      	nop
 8013a76:	bf00      	nop

08013a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a7e:	f04f 0310 	mov.w	r3, #16
 8013a82:	f383 8811 	msr	BASEPRI, r3
 8013a86:	f3bf 8f6f 	isb	sy
 8013a8a:	f3bf 8f4f 	dsb	sy
 8013a8e:	607b      	str	r3, [r7, #4]
}
 8013a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a92:	f7fe fddf 	bl	8012654 <xTaskIncrementTick>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d003      	beq.n	8013aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a9c:	4b06      	ldr	r3, [pc, #24]	; (8013ab8 <SysTick_Handler+0x40>)
 8013a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aa2:	601a      	str	r2, [r3, #0]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	f383 8811 	msr	BASEPRI, r3
}
 8013aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013ab0:	bf00      	nop
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	e000ed04 	.word	0xe000ed04

08013abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013abc:	b480      	push	{r7}
 8013abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013ac0:	4b0b      	ldr	r3, [pc, #44]	; (8013af0 <vPortSetupTimerInterrupt+0x34>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <vPortSetupTimerInterrupt+0x38>)
 8013ac8:	2200      	movs	r2, #0
 8013aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013acc:	4b0a      	ldr	r3, [pc, #40]	; (8013af8 <vPortSetupTimerInterrupt+0x3c>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	4a0a      	ldr	r2, [pc, #40]	; (8013afc <vPortSetupTimerInterrupt+0x40>)
 8013ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ad6:	099b      	lsrs	r3, r3, #6
 8013ad8:	4a09      	ldr	r2, [pc, #36]	; (8013b00 <vPortSetupTimerInterrupt+0x44>)
 8013ada:	3b01      	subs	r3, #1
 8013adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013ade:	4b04      	ldr	r3, [pc, #16]	; (8013af0 <vPortSetupTimerInterrupt+0x34>)
 8013ae0:	2207      	movs	r2, #7
 8013ae2:	601a      	str	r2, [r3, #0]
}
 8013ae4:	bf00      	nop
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	e000e010 	.word	0xe000e010
 8013af4:	e000e018 	.word	0xe000e018
 8013af8:	20000000 	.word	0x20000000
 8013afc:	10624dd3 	.word	0x10624dd3
 8013b00:	e000e014 	.word	0xe000e014

08013b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013b14 <vPortEnableVFP+0x10>
 8013b08:	6801      	ldr	r1, [r0, #0]
 8013b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013b0e:	6001      	str	r1, [r0, #0]
 8013b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013b12:	bf00      	nop
 8013b14:	e000ed88 	.word	0xe000ed88

08013b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013b18:	b480      	push	{r7}
 8013b1a:	b085      	sub	sp, #20
 8013b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b1e:	f3ef 8305 	mrs	r3, IPSR
 8013b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b0f      	cmp	r3, #15
 8013b28:	d914      	bls.n	8013b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b2a:	4a17      	ldr	r2, [pc, #92]	; (8013b88 <vPortValidateInterruptPriority+0x70>)
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	4413      	add	r3, r2
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013b34:	4b15      	ldr	r3, [pc, #84]	; (8013b8c <vPortValidateInterruptPriority+0x74>)
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	7afa      	ldrb	r2, [r7, #11]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d20a      	bcs.n	8013b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013b3e:	f04f 0310 	mov.w	r3, #16
 8013b42:	f383 8811 	msr	BASEPRI, r3
 8013b46:	f3bf 8f6f 	isb	sy
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	607b      	str	r3, [r7, #4]
}
 8013b50:	bf00      	nop
 8013b52:	e7fe      	b.n	8013b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b54:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <vPortValidateInterruptPriority+0x78>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013b5c:	4b0d      	ldr	r3, [pc, #52]	; (8013b94 <vPortValidateInterruptPriority+0x7c>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d90a      	bls.n	8013b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013b64:	f04f 0310 	mov.w	r3, #16
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	603b      	str	r3, [r7, #0]
}
 8013b76:	bf00      	nop
 8013b78:	e7fe      	b.n	8013b78 <vPortValidateInterruptPriority+0x60>
	}
 8013b7a:	bf00      	nop
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	e000e3f0 	.word	0xe000e3f0
 8013b8c:	20000e40 	.word	0x20000e40
 8013b90:	e000ed0c 	.word	0xe000ed0c
 8013b94:	20000e44 	.word	0x20000e44

08013b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b08a      	sub	sp, #40	; 0x28
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013ba4:	f7fe fc9a 	bl	80124dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013ba8:	4b58      	ldr	r3, [pc, #352]	; (8013d0c <pvPortMalloc+0x174>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013bb0:	f000 f910 	bl	8013dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013bb4:	4b56      	ldr	r3, [pc, #344]	; (8013d10 <pvPortMalloc+0x178>)
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	4013      	ands	r3, r2
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	f040 808e 	bne.w	8013cde <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d01d      	beq.n	8013c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013bc8:	2208      	movs	r2, #8
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4413      	add	r3, r2
 8013bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f003 0307 	and.w	r3, r3, #7
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d014      	beq.n	8013c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f023 0307 	bic.w	r3, r3, #7
 8013be0:	3308      	adds	r3, #8
 8013be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f003 0307 	and.w	r3, r3, #7
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d00a      	beq.n	8013c04 <pvPortMalloc+0x6c>
	__asm volatile
 8013bee:	f04f 0310 	mov.w	r3, #16
 8013bf2:	f383 8811 	msr	BASEPRI, r3
 8013bf6:	f3bf 8f6f 	isb	sy
 8013bfa:	f3bf 8f4f 	dsb	sy
 8013bfe:	617b      	str	r3, [r7, #20]
}
 8013c00:	bf00      	nop
 8013c02:	e7fe      	b.n	8013c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d069      	beq.n	8013cde <pvPortMalloc+0x146>
 8013c0a:	4b42      	ldr	r3, [pc, #264]	; (8013d14 <pvPortMalloc+0x17c>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d864      	bhi.n	8013cde <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c14:	4b40      	ldr	r3, [pc, #256]	; (8013d18 <pvPortMalloc+0x180>)
 8013c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c18:	4b3f      	ldr	r3, [pc, #252]	; (8013d18 <pvPortMalloc+0x180>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c1e:	e004      	b.n	8013c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d903      	bls.n	8013c3c <pvPortMalloc+0xa4>
 8013c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1f1      	bne.n	8013c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c3c:	4b33      	ldr	r3, [pc, #204]	; (8013d0c <pvPortMalloc+0x174>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d04b      	beq.n	8013cde <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c46:	6a3b      	ldr	r3, [r7, #32]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2208      	movs	r2, #8
 8013c4c:	4413      	add	r3, r2
 8013c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	6a3b      	ldr	r3, [r7, #32]
 8013c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5a:	685a      	ldr	r2, [r3, #4]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	1ad2      	subs	r2, r2, r3
 8013c60:	2308      	movs	r3, #8
 8013c62:	005b      	lsls	r3, r3, #1
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d91f      	bls.n	8013ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	4413      	add	r3, r2
 8013c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	f003 0307 	and.w	r3, r3, #7
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d00a      	beq.n	8013c90 <pvPortMalloc+0xf8>
	__asm volatile
 8013c7a:	f04f 0310 	mov.w	r3, #16
 8013c7e:	f383 8811 	msr	BASEPRI, r3
 8013c82:	f3bf 8f6f 	isb	sy
 8013c86:	f3bf 8f4f 	dsb	sy
 8013c8a:	613b      	str	r3, [r7, #16]
}
 8013c8c:	bf00      	nop
 8013c8e:	e7fe      	b.n	8013c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c92:	685a      	ldr	r2, [r3, #4]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	1ad2      	subs	r2, r2, r3
 8013c98:	69bb      	ldr	r3, [r7, #24]
 8013c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013ca2:	69b8      	ldr	r0, [r7, #24]
 8013ca4:	f000 f8f8 	bl	8013e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013ca8:	4b1a      	ldr	r3, [pc, #104]	; (8013d14 <pvPortMalloc+0x17c>)
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	4a18      	ldr	r2, [pc, #96]	; (8013d14 <pvPortMalloc+0x17c>)
 8013cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013cb6:	4b17      	ldr	r3, [pc, #92]	; (8013d14 <pvPortMalloc+0x17c>)
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	4b18      	ldr	r3, [pc, #96]	; (8013d1c <pvPortMalloc+0x184>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d203      	bcs.n	8013cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013cc2:	4b14      	ldr	r3, [pc, #80]	; (8013d14 <pvPortMalloc+0x17c>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	4a15      	ldr	r2, [pc, #84]	; (8013d1c <pvPortMalloc+0x184>)
 8013cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ccc:	685a      	ldr	r2, [r3, #4]
 8013cce:	4b10      	ldr	r3, [pc, #64]	; (8013d10 <pvPortMalloc+0x178>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	431a      	orrs	r2, r3
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	2200      	movs	r2, #0
 8013cdc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013cde:	f7fe fc0b 	bl	80124f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	f003 0307 	and.w	r3, r3, #7
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d00a      	beq.n	8013d02 <pvPortMalloc+0x16a>
	__asm volatile
 8013cec:	f04f 0310 	mov.w	r3, #16
 8013cf0:	f383 8811 	msr	BASEPRI, r3
 8013cf4:	f3bf 8f6f 	isb	sy
 8013cf8:	f3bf 8f4f 	dsb	sy
 8013cfc:	60fb      	str	r3, [r7, #12]
}
 8013cfe:	bf00      	nop
 8013d00:	e7fe      	b.n	8013d00 <pvPortMalloc+0x168>
	return pvReturn;
 8013d02:	69fb      	ldr	r3, [r7, #28]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3728      	adds	r7, #40	; 0x28
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20004a50 	.word	0x20004a50
 8013d10:	20004a5c 	.word	0x20004a5c
 8013d14:	20004a54 	.word	0x20004a54
 8013d18:	20004a48 	.word	0x20004a48
 8013d1c:	20004a58 	.word	0x20004a58

08013d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b086      	sub	sp, #24
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d048      	beq.n	8013dc4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d32:	2308      	movs	r3, #8
 8013d34:	425b      	negs	r3, r3
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	4413      	add	r3, r2
 8013d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	685a      	ldr	r2, [r3, #4]
 8013d44:	4b21      	ldr	r3, [pc, #132]	; (8013dcc <vPortFree+0xac>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4013      	ands	r3, r2
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d10a      	bne.n	8013d64 <vPortFree+0x44>
	__asm volatile
 8013d4e:	f04f 0310 	mov.w	r3, #16
 8013d52:	f383 8811 	msr	BASEPRI, r3
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	f3bf 8f4f 	dsb	sy
 8013d5e:	60fb      	str	r3, [r7, #12]
}
 8013d60:	bf00      	nop
 8013d62:	e7fe      	b.n	8013d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00a      	beq.n	8013d82 <vPortFree+0x62>
	__asm volatile
 8013d6c:	f04f 0310 	mov.w	r3, #16
 8013d70:	f383 8811 	msr	BASEPRI, r3
 8013d74:	f3bf 8f6f 	isb	sy
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	60bb      	str	r3, [r7, #8]
}
 8013d7e:	bf00      	nop
 8013d80:	e7fe      	b.n	8013d80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	685a      	ldr	r2, [r3, #4]
 8013d86:	4b11      	ldr	r3, [pc, #68]	; (8013dcc <vPortFree+0xac>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d019      	beq.n	8013dc4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d115      	bne.n	8013dc4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013d98:	693b      	ldr	r3, [r7, #16]
 8013d9a:	685a      	ldr	r2, [r3, #4]
 8013d9c:	4b0b      	ldr	r3, [pc, #44]	; (8013dcc <vPortFree+0xac>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	43db      	mvns	r3, r3
 8013da2:	401a      	ands	r2, r3
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013da8:	f7fe fb98 	bl	80124dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013dac:	693b      	ldr	r3, [r7, #16]
 8013dae:	685a      	ldr	r2, [r3, #4]
 8013db0:	4b07      	ldr	r3, [pc, #28]	; (8013dd0 <vPortFree+0xb0>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	4413      	add	r3, r2
 8013db6:	4a06      	ldr	r2, [pc, #24]	; (8013dd0 <vPortFree+0xb0>)
 8013db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013dba:	6938      	ldr	r0, [r7, #16]
 8013dbc:	f000 f86c 	bl	8013e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013dc0:	f7fe fb9a 	bl	80124f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013dc4:	bf00      	nop
 8013dc6:	3718      	adds	r7, #24
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	20004a5c 	.word	0x20004a5c
 8013dd0:	20004a54 	.word	0x20004a54

08013dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b085      	sub	sp, #20
 8013dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013de0:	4b27      	ldr	r3, [pc, #156]	; (8013e80 <prvHeapInit+0xac>)
 8013de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	f003 0307 	and.w	r3, r3, #7
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d00c      	beq.n	8013e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	3307      	adds	r3, #7
 8013df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f023 0307 	bic.w	r3, r3, #7
 8013dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	4a1f      	ldr	r2, [pc, #124]	; (8013e80 <prvHeapInit+0xac>)
 8013e04:	4413      	add	r3, r2
 8013e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013e0c:	4a1d      	ldr	r2, [pc, #116]	; (8013e84 <prvHeapInit+0xb0>)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013e12:	4b1c      	ldr	r3, [pc, #112]	; (8013e84 <prvHeapInit+0xb0>)
 8013e14:	2200      	movs	r2, #0
 8013e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	68ba      	ldr	r2, [r7, #8]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e20:	2208      	movs	r2, #8
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	1a9b      	subs	r3, r3, r2
 8013e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f023 0307 	bic.w	r3, r3, #7
 8013e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	4a15      	ldr	r2, [pc, #84]	; (8013e88 <prvHeapInit+0xb4>)
 8013e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e36:	4b14      	ldr	r3, [pc, #80]	; (8013e88 <prvHeapInit+0xb4>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e3e:	4b12      	ldr	r3, [pc, #72]	; (8013e88 <prvHeapInit+0xb4>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2200      	movs	r2, #0
 8013e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	1ad2      	subs	r2, r2, r3
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e54:	4b0c      	ldr	r3, [pc, #48]	; (8013e88 <prvHeapInit+0xb4>)
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	4a0a      	ldr	r2, [pc, #40]	; (8013e8c <prvHeapInit+0xb8>)
 8013e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	4a09      	ldr	r2, [pc, #36]	; (8013e90 <prvHeapInit+0xbc>)
 8013e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e6c:	4b09      	ldr	r3, [pc, #36]	; (8013e94 <prvHeapInit+0xc0>)
 8013e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013e72:	601a      	str	r2, [r3, #0]
}
 8013e74:	bf00      	nop
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr
 8013e80:	20000e48 	.word	0x20000e48
 8013e84:	20004a48 	.word	0x20004a48
 8013e88:	20004a50 	.word	0x20004a50
 8013e8c:	20004a58 	.word	0x20004a58
 8013e90:	20004a54 	.word	0x20004a54
 8013e94:	20004a5c 	.word	0x20004a5c

08013e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b085      	sub	sp, #20
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ea0:	4b28      	ldr	r3, [pc, #160]	; (8013f44 <prvInsertBlockIntoFreeList+0xac>)
 8013ea2:	60fb      	str	r3, [r7, #12]
 8013ea4:	e002      	b.n	8013eac <prvInsertBlockIntoFreeList+0x14>
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	60fb      	str	r3, [r7, #12]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	687a      	ldr	r2, [r7, #4]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d8f7      	bhi.n	8013ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	68ba      	ldr	r2, [r7, #8]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d108      	bne.n	8013eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	685a      	ldr	r2, [r3, #4]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	441a      	add	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	685b      	ldr	r3, [r3, #4]
 8013ee2:	68ba      	ldr	r2, [r7, #8]
 8013ee4:	441a      	add	r2, r3
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d118      	bne.n	8013f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	4b15      	ldr	r3, [pc, #84]	; (8013f48 <prvInsertBlockIntoFreeList+0xb0>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d00d      	beq.n	8013f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	685a      	ldr	r2, [r3, #4]
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	685b      	ldr	r3, [r3, #4]
 8013f04:	441a      	add	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	601a      	str	r2, [r3, #0]
 8013f14:	e008      	b.n	8013f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f16:	4b0c      	ldr	r3, [pc, #48]	; (8013f48 <prvInsertBlockIntoFreeList+0xb0>)
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	601a      	str	r2, [r3, #0]
 8013f1e:	e003      	b.n	8013f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d002      	beq.n	8013f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f36:	bf00      	nop
 8013f38:	3714      	adds	r7, #20
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	20004a48 	.word	0x20004a48
 8013f48:	20004a50 	.word	0x20004a50

08013f4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8013f50:	2200      	movs	r2, #0
 8013f52:	490e      	ldr	r1, [pc, #56]	; (8013f8c <MX_USB_HOST_Init+0x40>)
 8013f54:	480e      	ldr	r0, [pc, #56]	; (8013f90 <MX_USB_HOST_Init+0x44>)
 8013f56:	f7fa ffaf 	bl	800eeb8 <USBH_Init>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8013f60:	f7ed fc4c 	bl	80017fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8013f64:	490b      	ldr	r1, [pc, #44]	; (8013f94 <MX_USB_HOST_Init+0x48>)
 8013f66:	480a      	ldr	r0, [pc, #40]	; (8013f90 <MX_USB_HOST_Init+0x44>)
 8013f68:	f7fb f856 	bl	800f018 <USBH_RegisterClass>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d001      	beq.n	8013f76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8013f72:	f7ed fc43 	bl	80017fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8013f76:	4806      	ldr	r0, [pc, #24]	; (8013f90 <MX_USB_HOST_Init+0x44>)
 8013f78:	f7fb f8da 	bl	800f130 <USBH_Start>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8013f82:	f7ed fc3b 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013f86:	bf00      	nop
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	08013f99 	.word	0x08013f99
 8013f90:	200053f0 	.word	0x200053f0
 8013f94:	20000098 	.word	0x20000098

08013f98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	460b      	mov	r3, r1
 8013fa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013fa4:	78fb      	ldrb	r3, [r7, #3]
 8013fa6:	3b01      	subs	r3, #1
 8013fa8:	2b04      	cmp	r3, #4
 8013faa:	d819      	bhi.n	8013fe0 <USBH_UserProcess+0x48>
 8013fac:	a201      	add	r2, pc, #4	; (adr r2, 8013fb4 <USBH_UserProcess+0x1c>)
 8013fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb2:	bf00      	nop
 8013fb4:	08013fe1 	.word	0x08013fe1
 8013fb8:	08013fd1 	.word	0x08013fd1
 8013fbc:	08013fe1 	.word	0x08013fe1
 8013fc0:	08013fd9 	.word	0x08013fd9
 8013fc4:	08013fc9 	.word	0x08013fc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013fc8:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <USBH_UserProcess+0x58>)
 8013fca:	2203      	movs	r2, #3
 8013fcc:	701a      	strb	r2, [r3, #0]
  break;
 8013fce:	e008      	b.n	8013fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8013fd0:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <USBH_UserProcess+0x58>)
 8013fd2:	2202      	movs	r2, #2
 8013fd4:	701a      	strb	r2, [r3, #0]
  break;
 8013fd6:	e004      	b.n	8013fe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <USBH_UserProcess+0x58>)
 8013fda:	2201      	movs	r2, #1
 8013fdc:	701a      	strb	r2, [r3, #0]
  break;
 8013fde:	e000      	b.n	8013fe2 <USBH_UserProcess+0x4a>

  default:
  break;
 8013fe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013fe2:	bf00      	nop
 8013fe4:	370c      	adds	r7, #12
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	20004a60 	.word	0x20004a60

08013ff4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08a      	sub	sp, #40	; 0x28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ffc:	f107 0314 	add.w	r3, r7, #20
 8014000:	2200      	movs	r2, #0
 8014002:	601a      	str	r2, [r3, #0]
 8014004:	605a      	str	r2, [r3, #4]
 8014006:	609a      	str	r2, [r3, #8]
 8014008:	60da      	str	r2, [r3, #12]
 801400a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	4a1e      	ldr	r2, [pc, #120]	; (801408c <HAL_HCD_MspInit+0x98>)
 8014012:	4293      	cmp	r3, r2
 8014014:	d136      	bne.n	8014084 <HAL_HCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014016:	4b1e      	ldr	r3, [pc, #120]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 8014018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801401c:	4a1c      	ldr	r2, [pc, #112]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 801401e:	f043 0302 	orr.w	r3, r3, #2
 8014022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014026:	4b1a      	ldr	r3, [pc, #104]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 8014028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801402c:	f003 0302 	and.w	r3, r3, #2
 8014030:	613b      	str	r3, [r7, #16]
 8014032:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8014034:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8014038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801403a:	2302      	movs	r3, #2
 801403c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801403e:	2300      	movs	r3, #0
 8014040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8014042:	2302      	movs	r3, #2
 8014044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8014046:	230c      	movs	r3, #12
 8014048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801404a:	f107 0314 	add.w	r3, r7, #20
 801404e:	4619      	mov	r1, r3
 8014050:	4810      	ldr	r0, [pc, #64]	; (8014094 <HAL_HCD_MspInit+0xa0>)
 8014052:	f7ee fea1 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8014056:	4b0e      	ldr	r3, [pc, #56]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 8014058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801405c:	4a0c      	ldr	r2, [pc, #48]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 801405e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014062:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014066:	4b0a      	ldr	r3, [pc, #40]	; (8014090 <HAL_HCD_MspInit+0x9c>)
 8014068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801406c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014070:	60fb      	str	r3, [r7, #12]
 8014072:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8014074:	2200      	movs	r2, #0
 8014076:	2105      	movs	r1, #5
 8014078:	204d      	movs	r0, #77	; 0x4d
 801407a:	f7ee f97d 	bl	8002378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801407e:	204d      	movs	r0, #77	; 0x4d
 8014080:	f7ee f994 	bl	80023ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8014084:	bf00      	nop
 8014086:	3728      	adds	r7, #40	; 0x28
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	40040000 	.word	0x40040000
 8014090:	58024400 	.word	0x58024400
 8014094:	58020400 	.word	0x58020400

08014098 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fb fcef 	bl	800fa8a <USBH_LL_IncTimer>
}
 80140ac:	bf00      	nop
 80140ae:	3708      	adds	r7, #8
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fb fd33 	bl	800fb2e <USBH_LL_Connect>
}
 80140c8:	bf00      	nop
 80140ca:	3708      	adds	r7, #8
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140de:	4618      	mov	r0, r3
 80140e0:	f7fb fd48 	bl	800fb74 <USBH_LL_Disconnect>
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b082      	sub	sp, #8
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	460b      	mov	r3, r1
 80140f6:	70fb      	strb	r3, [r7, #3]
 80140f8:	4613      	mov	r3, r2
 80140fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014102:	4618      	mov	r0, r3
 8014104:	f7fb fd7f 	bl	800fc06 <USBH_LL_NotifyURBChange>
#endif
}
 8014108:	bf00      	nop
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801411e:	4618      	mov	r0, r3
 8014120:	f7fb fcdd 	bl	800fade <USBH_LL_PortEnabled>
}
 8014124:	bf00      	nop
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801413a:	4618      	mov	r0, r3
 801413c:	f7fb fce9 	bl	800fb12 <USBH_LL_PortDisabled>
}
 8014140:	bf00      	nop
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014156:	2b00      	cmp	r3, #0
 8014158:	d12f      	bne.n	80141ba <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801415a:	4a1a      	ldr	r2, [pc, #104]	; (80141c4 <USBH_LL_Init+0x7c>)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	4a17      	ldr	r2, [pc, #92]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014166:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801416a:	4b16      	ldr	r3, [pc, #88]	; (80141c4 <USBH_LL_Init+0x7c>)
 801416c:	4a16      	ldr	r2, [pc, #88]	; (80141c8 <USBH_LL_Init+0x80>)
 801416e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8014170:	4b14      	ldr	r3, [pc, #80]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014172:	2210      	movs	r2, #16
 8014174:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8014176:	4b13      	ldr	r3, [pc, #76]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014178:	2201      	movs	r2, #1
 801417a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801417c:	4b11      	ldr	r3, [pc, #68]	; (80141c4 <USBH_LL_Init+0x7c>)
 801417e:	2200      	movs	r2, #0
 8014180:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8014182:	4b10      	ldr	r3, [pc, #64]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014184:	2202      	movs	r2, #2
 8014186:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8014188:	4b0e      	ldr	r3, [pc, #56]	; (80141c4 <USBH_LL_Init+0x7c>)
 801418a:	2200      	movs	r2, #0
 801418c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801418e:	4b0d      	ldr	r3, [pc, #52]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014190:	2200      	movs	r2, #0
 8014192:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8014194:	4b0b      	ldr	r3, [pc, #44]	; (80141c4 <USBH_LL_Init+0x7c>)
 8014196:	2200      	movs	r2, #0
 8014198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801419a:	480a      	ldr	r0, [pc, #40]	; (80141c4 <USBH_LL_Init+0x7c>)
 801419c:	f7ee ffdf 	bl	800315e <HAL_HCD_Init>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d001      	beq.n	80141aa <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 80141a6:	f7ed fb29 	bl	80017fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80141aa:	4806      	ldr	r0, [pc, #24]	; (80141c4 <USBH_LL_Init+0x7c>)
 80141ac:	f7ef fbe2 	bl	8003974 <HAL_HCD_GetCurrentFrame>
 80141b0:	4603      	mov	r3, r0
 80141b2:	4619      	mov	r1, r3
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7fb fc59 	bl	800fa6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	200057d4 	.word	0x200057d4
 80141c8:	40040000 	.word	0x40040000

080141cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141d4:	2300      	movs	r3, #0
 80141d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80141d8:	2300      	movs	r3, #0
 80141da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7ef fb4e 	bl	8003884 <HAL_HCD_Start>
 80141e8:	4603      	mov	r3, r0
 80141ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f000 f992 	bl	8014518 <USBH_Get_USB_Status>
 80141f4:	4603      	mov	r3, r0
 80141f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}

08014202 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014202:	b580      	push	{r7, lr}
 8014204:	b084      	sub	sp, #16
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801420a:	2300      	movs	r3, #0
 801420c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801420e:	2300      	movs	r3, #0
 8014210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014218:	4618      	mov	r0, r3
 801421a:	f7ef fb56 	bl	80038ca <HAL_HCD_Stop>
 801421e:	4603      	mov	r3, r0
 8014220:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014222:	7bfb      	ldrb	r3, [r7, #15]
 8014224:	4618      	mov	r0, r3
 8014226:	f000 f977 	bl	8014518 <USBH_Get_USB_Status>
 801422a:	4603      	mov	r3, r0
 801422c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801422e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014240:	2301      	movs	r3, #1
 8014242:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801424a:	4618      	mov	r0, r3
 801424c:	f7ef fba0 	bl	8003990 <HAL_HCD_GetCurrentSpeed>
 8014250:	4603      	mov	r3, r0
 8014252:	2b02      	cmp	r3, #2
 8014254:	d00c      	beq.n	8014270 <USBH_LL_GetSpeed+0x38>
 8014256:	2b02      	cmp	r3, #2
 8014258:	d80d      	bhi.n	8014276 <USBH_LL_GetSpeed+0x3e>
 801425a:	2b00      	cmp	r3, #0
 801425c:	d002      	beq.n	8014264 <USBH_LL_GetSpeed+0x2c>
 801425e:	2b01      	cmp	r3, #1
 8014260:	d003      	beq.n	801426a <USBH_LL_GetSpeed+0x32>
 8014262:	e008      	b.n	8014276 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014264:	2300      	movs	r3, #0
 8014266:	73fb      	strb	r3, [r7, #15]
    break;
 8014268:	e008      	b.n	801427c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801426a:	2301      	movs	r3, #1
 801426c:	73fb      	strb	r3, [r7, #15]
    break;
 801426e:	e005      	b.n	801427c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014270:	2302      	movs	r3, #2
 8014272:	73fb      	strb	r3, [r7, #15]
    break;
 8014274:	e002      	b.n	801427c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8014276:	2301      	movs	r3, #1
 8014278:	73fb      	strb	r3, [r7, #15]
    break;
 801427a:	bf00      	nop
  }
  return  speed;
 801427c:	7bfb      	ldrb	r3, [r7, #15]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b084      	sub	sp, #16
 801428a:	af00      	add	r7, sp, #0
 801428c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801428e:	2300      	movs	r3, #0
 8014290:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014292:	2300      	movs	r3, #0
 8014294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801429c:	4618      	mov	r0, r3
 801429e:	f7ef fb31 	bl	8003904 <HAL_HCD_ResetPort>
 80142a2:	4603      	mov	r3, r0
 80142a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80142a6:	7bfb      	ldrb	r3, [r7, #15]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 f935 	bl	8014518 <USBH_Get_USB_Status>
 80142ae:	4603      	mov	r3, r0
 80142b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b082      	sub	sp, #8
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	460b      	mov	r3, r1
 80142c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80142ce:	78fa      	ldrb	r2, [r7, #3]
 80142d0:	4611      	mov	r1, r2
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7ef fb39 	bl	800394a <HAL_HCD_HC_GetXferCount>
 80142d8:	4603      	mov	r3, r0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3708      	adds	r7, #8
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80142e2:	b590      	push	{r4, r7, lr}
 80142e4:	b089      	sub	sp, #36	; 0x24
 80142e6:	af04      	add	r7, sp, #16
 80142e8:	6078      	str	r0, [r7, #4]
 80142ea:	4608      	mov	r0, r1
 80142ec:	4611      	mov	r1, r2
 80142ee:	461a      	mov	r2, r3
 80142f0:	4603      	mov	r3, r0
 80142f2:	70fb      	strb	r3, [r7, #3]
 80142f4:	460b      	mov	r3, r1
 80142f6:	70bb      	strb	r3, [r7, #2]
 80142f8:	4613      	mov	r3, r2
 80142fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142fc:	2300      	movs	r3, #0
 80142fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014300:	2300      	movs	r3, #0
 8014302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801430a:	787c      	ldrb	r4, [r7, #1]
 801430c:	78ba      	ldrb	r2, [r7, #2]
 801430e:	78f9      	ldrb	r1, [r7, #3]
 8014310:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014312:	9302      	str	r3, [sp, #8]
 8014314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801431e:	9300      	str	r3, [sp, #0]
 8014320:	4623      	mov	r3, r4
 8014322:	f7ee ff7e 	bl	8003222 <HAL_HCD_HC_Init>
 8014326:	4603      	mov	r3, r0
 8014328:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801432a:	7bfb      	ldrb	r3, [r7, #15]
 801432c:	4618      	mov	r0, r3
 801432e:	f000 f8f3 	bl	8014518 <USBH_Get_USB_Status>
 8014332:	4603      	mov	r3, r0
 8014334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014336:	7bbb      	ldrb	r3, [r7, #14]
}
 8014338:	4618      	mov	r0, r3
 801433a:	3714      	adds	r7, #20
 801433c:	46bd      	mov	sp, r7
 801433e:	bd90      	pop	{r4, r7, pc}

08014340 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	460b      	mov	r3, r1
 801434a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801434c:	2300      	movs	r3, #0
 801434e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014350:	2300      	movs	r3, #0
 8014352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801435a:	78fa      	ldrb	r2, [r7, #3]
 801435c:	4611      	mov	r1, r2
 801435e:	4618      	mov	r0, r3
 8014360:	f7ee fff7 	bl	8003352 <HAL_HCD_HC_Halt>
 8014364:	4603      	mov	r3, r0
 8014366:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014368:	7bfb      	ldrb	r3, [r7, #15]
 801436a:	4618      	mov	r0, r3
 801436c:	f000 f8d4 	bl	8014518 <USBH_Get_USB_Status>
 8014370:	4603      	mov	r3, r0
 8014372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014374:	7bbb      	ldrb	r3, [r7, #14]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801437e:	b590      	push	{r4, r7, lr}
 8014380:	b089      	sub	sp, #36	; 0x24
 8014382:	af04      	add	r7, sp, #16
 8014384:	6078      	str	r0, [r7, #4]
 8014386:	4608      	mov	r0, r1
 8014388:	4611      	mov	r1, r2
 801438a:	461a      	mov	r2, r3
 801438c:	4603      	mov	r3, r0
 801438e:	70fb      	strb	r3, [r7, #3]
 8014390:	460b      	mov	r3, r1
 8014392:	70bb      	strb	r3, [r7, #2]
 8014394:	4613      	mov	r3, r2
 8014396:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014398:	2300      	movs	r3, #0
 801439a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801439c:	2300      	movs	r3, #0
 801439e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80143a6:	787c      	ldrb	r4, [r7, #1]
 80143a8:	78ba      	ldrb	r2, [r7, #2]
 80143aa:	78f9      	ldrb	r1, [r7, #3]
 80143ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80143b0:	9303      	str	r3, [sp, #12]
 80143b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80143b4:	9302      	str	r3, [sp, #8]
 80143b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b8:	9301      	str	r3, [sp, #4]
 80143ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80143be:	9300      	str	r3, [sp, #0]
 80143c0:	4623      	mov	r3, r4
 80143c2:	f7ee ffe9 	bl	8003398 <HAL_HCD_HC_SubmitRequest>
 80143c6:	4603      	mov	r3, r0
 80143c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80143ca:	7bfb      	ldrb	r3, [r7, #15]
 80143cc:	4618      	mov	r0, r3
 80143ce:	f000 f8a3 	bl	8014518 <USBH_Get_USB_Status>
 80143d2:	4603      	mov	r3, r0
 80143d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3714      	adds	r7, #20
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd90      	pop	{r4, r7, pc}

080143e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	460b      	mov	r3, r1
 80143ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80143f2:	78fa      	ldrb	r2, [r7, #3]
 80143f4:	4611      	mov	r1, r2
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7ef fa92 	bl	8003920 <HAL_HCD_HC_GetURBState>
 80143fc:	4603      	mov	r3, r0
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
 801440e:	460b      	mov	r3, r1
 8014410:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014418:	2b00      	cmp	r3, #0
 801441a:	d103      	bne.n	8014424 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 801441c:	78fb      	ldrb	r3, [r7, #3]
 801441e:	4618      	mov	r0, r3
 8014420:	f000 f8a6 	bl	8014570 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014424:	20c8      	movs	r0, #200	; 0xc8
 8014426:	f7ed febf 	bl	80021a8 <HAL_Delay>
  return USBH_OK;
 801442a:	2300      	movs	r3, #0
}
 801442c:	4618      	mov	r0, r3
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014434:	b480      	push	{r7}
 8014436:	b085      	sub	sp, #20
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
 801443c:	460b      	mov	r3, r1
 801443e:	70fb      	strb	r3, [r7, #3]
 8014440:	4613      	mov	r3, r2
 8014442:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801444a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801444c:	78fa      	ldrb	r2, [r7, #3]
 801444e:	68f9      	ldr	r1, [r7, #12]
 8014450:	4613      	mov	r3, r2
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	00db      	lsls	r3, r3, #3
 8014458:	440b      	add	r3, r1
 801445a:	333b      	adds	r3, #59	; 0x3b
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00a      	beq.n	8014478 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014462:	78fa      	ldrb	r2, [r7, #3]
 8014464:	68f9      	ldr	r1, [r7, #12]
 8014466:	4613      	mov	r3, r2
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	4413      	add	r3, r2
 801446c:	00db      	lsls	r3, r3, #3
 801446e:	440b      	add	r3, r1
 8014470:	3350      	adds	r3, #80	; 0x50
 8014472:	78ba      	ldrb	r2, [r7, #2]
 8014474:	701a      	strb	r2, [r3, #0]
 8014476:	e009      	b.n	801448c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014478:	78fa      	ldrb	r2, [r7, #3]
 801447a:	68f9      	ldr	r1, [r7, #12]
 801447c:	4613      	mov	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	4413      	add	r3, r2
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	440b      	add	r3, r1
 8014486:	3351      	adds	r3, #81	; 0x51
 8014488:	78ba      	ldrb	r2, [r7, #2]
 801448a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801448c:	2300      	movs	r3, #0
}
 801448e:	4618      	mov	r0, r3
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801449a:	b480      	push	{r7}
 801449c:	b085      	sub	sp, #20
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
 80144a2:	460b      	mov	r3, r1
 80144a4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80144b0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80144b2:	78fa      	ldrb	r2, [r7, #3]
 80144b4:	68b9      	ldr	r1, [r7, #8]
 80144b6:	4613      	mov	r3, r2
 80144b8:	009b      	lsls	r3, r3, #2
 80144ba:	4413      	add	r3, r2
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	440b      	add	r3, r1
 80144c0:	333b      	adds	r3, #59	; 0x3b
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d00a      	beq.n	80144de <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 80144c8:	78fa      	ldrb	r2, [r7, #3]
 80144ca:	68b9      	ldr	r1, [r7, #8]
 80144cc:	4613      	mov	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	440b      	add	r3, r1
 80144d6:	3350      	adds	r3, #80	; 0x50
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	73fb      	strb	r3, [r7, #15]
 80144dc:	e009      	b.n	80144f2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80144de:	78fa      	ldrb	r2, [r7, #3]
 80144e0:	68b9      	ldr	r1, [r7, #8]
 80144e2:	4613      	mov	r3, r2
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	440b      	add	r3, r1
 80144ec:	3351      	adds	r3, #81	; 0x51
 80144ee:	781b      	ldrb	r3, [r3, #0]
 80144f0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80144f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3714      	adds	r7, #20
 80144f8:	46bd      	mov	sp, r7
 80144fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fe:	4770      	bx	lr

08014500 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f7ed fe4d 	bl	80021a8 <HAL_Delay>
}
 801450e:	bf00      	nop
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
	...

08014518 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014518:	b480      	push	{r7}
 801451a:	b085      	sub	sp, #20
 801451c:	af00      	add	r7, sp, #0
 801451e:	4603      	mov	r3, r0
 8014520:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014522:	2300      	movs	r3, #0
 8014524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	2b03      	cmp	r3, #3
 801452a:	d817      	bhi.n	801455c <USBH_Get_USB_Status+0x44>
 801452c:	a201      	add	r2, pc, #4	; (adr r2, 8014534 <USBH_Get_USB_Status+0x1c>)
 801452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014532:	bf00      	nop
 8014534:	08014545 	.word	0x08014545
 8014538:	0801454b 	.word	0x0801454b
 801453c:	08014551 	.word	0x08014551
 8014540:	08014557 	.word	0x08014557
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014544:	2300      	movs	r3, #0
 8014546:	73fb      	strb	r3, [r7, #15]
    break;
 8014548:	e00b      	b.n	8014562 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801454a:	2302      	movs	r3, #2
 801454c:	73fb      	strb	r3, [r7, #15]
    break;
 801454e:	e008      	b.n	8014562 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014550:	2301      	movs	r3, #1
 8014552:	73fb      	strb	r3, [r7, #15]
    break;
 8014554:	e005      	b.n	8014562 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014556:	2302      	movs	r3, #2
 8014558:	73fb      	strb	r3, [r7, #15]
    break;
 801455a:	e002      	b.n	8014562 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801455c:	2302      	movs	r3, #2
 801455e:	73fb      	strb	r3, [r7, #15]
    break;
 8014560:	bf00      	nop
  }
  return usb_status;
 8014562:	7bfb      	ldrb	r3, [r7, #15]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	4603      	mov	r3, r0
 8014578:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801457a:	79fb      	ldrb	r3, [r7, #7]
 801457c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801457e:	79fb      	ldrb	r3, [r7, #7]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d102      	bne.n	801458a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014584:	2301      	movs	r3, #1
 8014586:	73fb      	strb	r3, [r7, #15]
 8014588:	e001      	b.n	801458e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801458a:	2300      	movs	r3, #0
 801458c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,(GPIO_PinState)data);
 801458e:	7bfb      	ldrb	r3, [r7, #15]
 8014590:	461a      	mov	r2, r3
 8014592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014596:	4803      	ldr	r0, [pc, #12]	; (80145a4 <MX_DriverVbusHS+0x34>)
 8014598:	f7ee fdae 	bl	80030f8 <HAL_GPIO_WritePin>
}
 801459c:	bf00      	nop
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	58020000 	.word	0x58020000

080145a8 <__errno>:
 80145a8:	4b01      	ldr	r3, [pc, #4]	; (80145b0 <__errno+0x8>)
 80145aa:	6818      	ldr	r0, [r3, #0]
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	200000bc 	.word	0x200000bc

080145b4 <__libc_init_array>:
 80145b4:	b570      	push	{r4, r5, r6, lr}
 80145b6:	4d0d      	ldr	r5, [pc, #52]	; (80145ec <__libc_init_array+0x38>)
 80145b8:	4c0d      	ldr	r4, [pc, #52]	; (80145f0 <__libc_init_array+0x3c>)
 80145ba:	1b64      	subs	r4, r4, r5
 80145bc:	10a4      	asrs	r4, r4, #2
 80145be:	2600      	movs	r6, #0
 80145c0:	42a6      	cmp	r6, r4
 80145c2:	d109      	bne.n	80145d8 <__libc_init_array+0x24>
 80145c4:	4d0b      	ldr	r5, [pc, #44]	; (80145f4 <__libc_init_array+0x40>)
 80145c6:	4c0c      	ldr	r4, [pc, #48]	; (80145f8 <__libc_init_array+0x44>)
 80145c8:	f000 f906 	bl	80147d8 <_init>
 80145cc:	1b64      	subs	r4, r4, r5
 80145ce:	10a4      	asrs	r4, r4, #2
 80145d0:	2600      	movs	r6, #0
 80145d2:	42a6      	cmp	r6, r4
 80145d4:	d105      	bne.n	80145e2 <__libc_init_array+0x2e>
 80145d6:	bd70      	pop	{r4, r5, r6, pc}
 80145d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80145dc:	4798      	blx	r3
 80145de:	3601      	adds	r6, #1
 80145e0:	e7ee      	b.n	80145c0 <__libc_init_array+0xc>
 80145e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80145e6:	4798      	blx	r3
 80145e8:	3601      	adds	r6, #1
 80145ea:	e7f2      	b.n	80145d2 <__libc_init_array+0x1e>
 80145ec:	08014abc 	.word	0x08014abc
 80145f0:	08014abc 	.word	0x08014abc
 80145f4:	08014abc 	.word	0x08014abc
 80145f8:	08014ac0 	.word	0x08014ac0

080145fc <malloc>:
 80145fc:	4b02      	ldr	r3, [pc, #8]	; (8014608 <malloc+0xc>)
 80145fe:	4601      	mov	r1, r0
 8014600:	6818      	ldr	r0, [r3, #0]
 8014602:	f000 b871 	b.w	80146e8 <_malloc_r>
 8014606:	bf00      	nop
 8014608:	200000bc 	.word	0x200000bc

0801460c <free>:
 801460c:	4b02      	ldr	r3, [pc, #8]	; (8014618 <free+0xc>)
 801460e:	4601      	mov	r1, r0
 8014610:	6818      	ldr	r0, [r3, #0]
 8014612:	f000 b819 	b.w	8014648 <_free_r>
 8014616:	bf00      	nop
 8014618:	200000bc 	.word	0x200000bc

0801461c <memcpy>:
 801461c:	440a      	add	r2, r1
 801461e:	4291      	cmp	r1, r2
 8014620:	f100 33ff 	add.w	r3, r0, #4294967295
 8014624:	d100      	bne.n	8014628 <memcpy+0xc>
 8014626:	4770      	bx	lr
 8014628:	b510      	push	{r4, lr}
 801462a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801462e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014632:	4291      	cmp	r1, r2
 8014634:	d1f9      	bne.n	801462a <memcpy+0xe>
 8014636:	bd10      	pop	{r4, pc}

08014638 <memset>:
 8014638:	4402      	add	r2, r0
 801463a:	4603      	mov	r3, r0
 801463c:	4293      	cmp	r3, r2
 801463e:	d100      	bne.n	8014642 <memset+0xa>
 8014640:	4770      	bx	lr
 8014642:	f803 1b01 	strb.w	r1, [r3], #1
 8014646:	e7f9      	b.n	801463c <memset+0x4>

08014648 <_free_r>:
 8014648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801464a:	2900      	cmp	r1, #0
 801464c:	d048      	beq.n	80146e0 <_free_r+0x98>
 801464e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014652:	9001      	str	r0, [sp, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	f1a1 0404 	sub.w	r4, r1, #4
 801465a:	bfb8      	it	lt
 801465c:	18e4      	addlt	r4, r4, r3
 801465e:	f000 f8ad 	bl	80147bc <__malloc_lock>
 8014662:	4a20      	ldr	r2, [pc, #128]	; (80146e4 <_free_r+0x9c>)
 8014664:	9801      	ldr	r0, [sp, #4]
 8014666:	6813      	ldr	r3, [r2, #0]
 8014668:	4615      	mov	r5, r2
 801466a:	b933      	cbnz	r3, 801467a <_free_r+0x32>
 801466c:	6063      	str	r3, [r4, #4]
 801466e:	6014      	str	r4, [r2, #0]
 8014670:	b003      	add	sp, #12
 8014672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014676:	f000 b8a7 	b.w	80147c8 <__malloc_unlock>
 801467a:	42a3      	cmp	r3, r4
 801467c:	d90b      	bls.n	8014696 <_free_r+0x4e>
 801467e:	6821      	ldr	r1, [r4, #0]
 8014680:	1862      	adds	r2, r4, r1
 8014682:	4293      	cmp	r3, r2
 8014684:	bf04      	itt	eq
 8014686:	681a      	ldreq	r2, [r3, #0]
 8014688:	685b      	ldreq	r3, [r3, #4]
 801468a:	6063      	str	r3, [r4, #4]
 801468c:	bf04      	itt	eq
 801468e:	1852      	addeq	r2, r2, r1
 8014690:	6022      	streq	r2, [r4, #0]
 8014692:	602c      	str	r4, [r5, #0]
 8014694:	e7ec      	b.n	8014670 <_free_r+0x28>
 8014696:	461a      	mov	r2, r3
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	b10b      	cbz	r3, 80146a0 <_free_r+0x58>
 801469c:	42a3      	cmp	r3, r4
 801469e:	d9fa      	bls.n	8014696 <_free_r+0x4e>
 80146a0:	6811      	ldr	r1, [r2, #0]
 80146a2:	1855      	adds	r5, r2, r1
 80146a4:	42a5      	cmp	r5, r4
 80146a6:	d10b      	bne.n	80146c0 <_free_r+0x78>
 80146a8:	6824      	ldr	r4, [r4, #0]
 80146aa:	4421      	add	r1, r4
 80146ac:	1854      	adds	r4, r2, r1
 80146ae:	42a3      	cmp	r3, r4
 80146b0:	6011      	str	r1, [r2, #0]
 80146b2:	d1dd      	bne.n	8014670 <_free_r+0x28>
 80146b4:	681c      	ldr	r4, [r3, #0]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	6053      	str	r3, [r2, #4]
 80146ba:	4421      	add	r1, r4
 80146bc:	6011      	str	r1, [r2, #0]
 80146be:	e7d7      	b.n	8014670 <_free_r+0x28>
 80146c0:	d902      	bls.n	80146c8 <_free_r+0x80>
 80146c2:	230c      	movs	r3, #12
 80146c4:	6003      	str	r3, [r0, #0]
 80146c6:	e7d3      	b.n	8014670 <_free_r+0x28>
 80146c8:	6825      	ldr	r5, [r4, #0]
 80146ca:	1961      	adds	r1, r4, r5
 80146cc:	428b      	cmp	r3, r1
 80146ce:	bf04      	itt	eq
 80146d0:	6819      	ldreq	r1, [r3, #0]
 80146d2:	685b      	ldreq	r3, [r3, #4]
 80146d4:	6063      	str	r3, [r4, #4]
 80146d6:	bf04      	itt	eq
 80146d8:	1949      	addeq	r1, r1, r5
 80146da:	6021      	streq	r1, [r4, #0]
 80146dc:	6054      	str	r4, [r2, #4]
 80146de:	e7c7      	b.n	8014670 <_free_r+0x28>
 80146e0:	b003      	add	sp, #12
 80146e2:	bd30      	pop	{r4, r5, pc}
 80146e4:	20004a64 	.word	0x20004a64

080146e8 <_malloc_r>:
 80146e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ea:	1ccd      	adds	r5, r1, #3
 80146ec:	f025 0503 	bic.w	r5, r5, #3
 80146f0:	3508      	adds	r5, #8
 80146f2:	2d0c      	cmp	r5, #12
 80146f4:	bf38      	it	cc
 80146f6:	250c      	movcc	r5, #12
 80146f8:	2d00      	cmp	r5, #0
 80146fa:	4606      	mov	r6, r0
 80146fc:	db01      	blt.n	8014702 <_malloc_r+0x1a>
 80146fe:	42a9      	cmp	r1, r5
 8014700:	d903      	bls.n	801470a <_malloc_r+0x22>
 8014702:	230c      	movs	r3, #12
 8014704:	6033      	str	r3, [r6, #0]
 8014706:	2000      	movs	r0, #0
 8014708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801470a:	f000 f857 	bl	80147bc <__malloc_lock>
 801470e:	4921      	ldr	r1, [pc, #132]	; (8014794 <_malloc_r+0xac>)
 8014710:	680a      	ldr	r2, [r1, #0]
 8014712:	4614      	mov	r4, r2
 8014714:	b99c      	cbnz	r4, 801473e <_malloc_r+0x56>
 8014716:	4f20      	ldr	r7, [pc, #128]	; (8014798 <_malloc_r+0xb0>)
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	b923      	cbnz	r3, 8014726 <_malloc_r+0x3e>
 801471c:	4621      	mov	r1, r4
 801471e:	4630      	mov	r0, r6
 8014720:	f000 f83c 	bl	801479c <_sbrk_r>
 8014724:	6038      	str	r0, [r7, #0]
 8014726:	4629      	mov	r1, r5
 8014728:	4630      	mov	r0, r6
 801472a:	f000 f837 	bl	801479c <_sbrk_r>
 801472e:	1c43      	adds	r3, r0, #1
 8014730:	d123      	bne.n	801477a <_malloc_r+0x92>
 8014732:	230c      	movs	r3, #12
 8014734:	6033      	str	r3, [r6, #0]
 8014736:	4630      	mov	r0, r6
 8014738:	f000 f846 	bl	80147c8 <__malloc_unlock>
 801473c:	e7e3      	b.n	8014706 <_malloc_r+0x1e>
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	1b5b      	subs	r3, r3, r5
 8014742:	d417      	bmi.n	8014774 <_malloc_r+0x8c>
 8014744:	2b0b      	cmp	r3, #11
 8014746:	d903      	bls.n	8014750 <_malloc_r+0x68>
 8014748:	6023      	str	r3, [r4, #0]
 801474a:	441c      	add	r4, r3
 801474c:	6025      	str	r5, [r4, #0]
 801474e:	e004      	b.n	801475a <_malloc_r+0x72>
 8014750:	6863      	ldr	r3, [r4, #4]
 8014752:	42a2      	cmp	r2, r4
 8014754:	bf0c      	ite	eq
 8014756:	600b      	streq	r3, [r1, #0]
 8014758:	6053      	strne	r3, [r2, #4]
 801475a:	4630      	mov	r0, r6
 801475c:	f000 f834 	bl	80147c8 <__malloc_unlock>
 8014760:	f104 000b 	add.w	r0, r4, #11
 8014764:	1d23      	adds	r3, r4, #4
 8014766:	f020 0007 	bic.w	r0, r0, #7
 801476a:	1ac2      	subs	r2, r0, r3
 801476c:	d0cc      	beq.n	8014708 <_malloc_r+0x20>
 801476e:	1a1b      	subs	r3, r3, r0
 8014770:	50a3      	str	r3, [r4, r2]
 8014772:	e7c9      	b.n	8014708 <_malloc_r+0x20>
 8014774:	4622      	mov	r2, r4
 8014776:	6864      	ldr	r4, [r4, #4]
 8014778:	e7cc      	b.n	8014714 <_malloc_r+0x2c>
 801477a:	1cc4      	adds	r4, r0, #3
 801477c:	f024 0403 	bic.w	r4, r4, #3
 8014780:	42a0      	cmp	r0, r4
 8014782:	d0e3      	beq.n	801474c <_malloc_r+0x64>
 8014784:	1a21      	subs	r1, r4, r0
 8014786:	4630      	mov	r0, r6
 8014788:	f000 f808 	bl	801479c <_sbrk_r>
 801478c:	3001      	adds	r0, #1
 801478e:	d1dd      	bne.n	801474c <_malloc_r+0x64>
 8014790:	e7cf      	b.n	8014732 <_malloc_r+0x4a>
 8014792:	bf00      	nop
 8014794:	20004a64 	.word	0x20004a64
 8014798:	20004a68 	.word	0x20004a68

0801479c <_sbrk_r>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4d06      	ldr	r5, [pc, #24]	; (80147b8 <_sbrk_r+0x1c>)
 80147a0:	2300      	movs	r3, #0
 80147a2:	4604      	mov	r4, r0
 80147a4:	4608      	mov	r0, r1
 80147a6:	602b      	str	r3, [r5, #0]
 80147a8:	f7ed f996 	bl	8001ad8 <_sbrk>
 80147ac:	1c43      	adds	r3, r0, #1
 80147ae:	d102      	bne.n	80147b6 <_sbrk_r+0x1a>
 80147b0:	682b      	ldr	r3, [r5, #0]
 80147b2:	b103      	cbz	r3, 80147b6 <_sbrk_r+0x1a>
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	20005a98 	.word	0x20005a98

080147bc <__malloc_lock>:
 80147bc:	4801      	ldr	r0, [pc, #4]	; (80147c4 <__malloc_lock+0x8>)
 80147be:	f000 b809 	b.w	80147d4 <__retarget_lock_acquire_recursive>
 80147c2:	bf00      	nop
 80147c4:	20005aa0 	.word	0x20005aa0

080147c8 <__malloc_unlock>:
 80147c8:	4801      	ldr	r0, [pc, #4]	; (80147d0 <__malloc_unlock+0x8>)
 80147ca:	f000 b804 	b.w	80147d6 <__retarget_lock_release_recursive>
 80147ce:	bf00      	nop
 80147d0:	20005aa0 	.word	0x20005aa0

080147d4 <__retarget_lock_acquire_recursive>:
 80147d4:	4770      	bx	lr

080147d6 <__retarget_lock_release_recursive>:
 80147d6:	4770      	bx	lr

080147d8 <_init>:
 80147d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147da:	bf00      	nop
 80147dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147de:	bc08      	pop	{r3}
 80147e0:	469e      	mov	lr, r3
 80147e2:	4770      	bx	lr

080147e4 <_fini>:
 80147e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e6:	bf00      	nop
 80147e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147ea:	bc08      	pop	{r3}
 80147ec:	469e      	mov	lr, r3
 80147ee:	4770      	bx	lr
